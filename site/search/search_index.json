{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Application Development 1","text":"<p>Author : Denis Rinfret</p>"},{"location":"#ressources","title":"Ressources","text":"<ol> <li>Python Documentation</li> <li>Github repo for these lecture notes</li> </ol>"},{"location":"#software","title":"Software","text":"<ol> <li>Python<ul> <li>Download and install the latest stable version available</li> </ul> </li> <li>PyCharm Professional Edition<ul> <li>It is recommended to download and install the professional version,</li> <li>and apply for a Jetbrains education account.</li> <li>The facilitate installing and updating Jetbrains application, you can install the   Toolbox application</li> </ul> </li> </ol>"},{"location":"#other-resources","title":"Other resources","text":"<p>For students with prior Java OOP experience and web development knowledge, here are targeted Python tutorials:</p>"},{"location":"#comprehensive-courses","title":"Comprehensive Courses","text":"<ul> <li> <p>From Java to Python OOP: Bridge the Gap for Java Developers - LinkedIn Learning course by Deepa Muralidhar specifically designed for Java developers transitioning to Python OOP (1h7m)[1]</p> </li> <li> <p>Python Crash Course for Java Developers - GitHub   repository by blu3r4y with interactive Jupyter notebooks and   slides specifically for Java developers[3]</p> </li> </ul>"},{"location":"#oop-focused-resources","title":"OOP-Focused Resources","text":"<ul> <li> <p>Python OOP Tutorial by Tech With Tim - YouTube video series   covering everything beginners need to know about   classes and objects in Python[11]</p> </li> <li> <p>Python\u2019s Official Tutorial: Classes - Refined documentation on   Python\u2019s OOP implementation from Python.org[10]</p> </li> </ul>"},{"location":"#practice-platforms","title":"Practice Platforms","text":"<ul> <li> <p>Exercism\u2019s Python Track - 17 concept modules and 140 exercises with   optional mentoring from experienced   programmers[5]</p> </li> <li> <p>LeetCode - Popular platform with algorithm challenges and interview questions   that can be solved in Python[5]</p> </li> </ul>"},{"location":"#design-patterns-advanced-concepts","title":"Design Patterns &amp; Advanced Concepts","text":"<ul> <li> <p>Python-Patterns Repository - GitHub collection of common OOP design   patterns implemented in Python[10]</p> </li> <li> <p>Python Design Patterns - Tutorial explaining how classic   design patterns are implemented in Python, often more   simply than in Java[10]</p> </li> <li> <p>DataCamp\u2019s Python OOP Tutorial - Explains OOP concepts   with practical examples including a finance application   case study[2]</p> </li> </ul> <p>These resources focus on bridging the gap between Java and Python, emphasizing the differences in OOP implementation while building on existing programming knowledge.</p> References <ul> <li>[1] https://www.linkedin.com/learning/from-java-to-python-oop-bridge-the-gap-for-java-developers</li> <li>[2] https://www.datacamp.com/tutorial/python-oop-tutorial</li> <li>[3] https://github.com/blu3r4y/python-for-java-developers</li> <li>[5] https://www.kdnuggets.com/7-best-platforms-to-practice-python</li> <li>[6] https://realpython.com/learning-paths/object-oriented-programming-oop-python/</li> <li>[7] https://realpython.com/python3-object-oriented-programming/</li> <li>[8] https://www.datacamp.com/category/python</li> <li>[9] https://www.bitdegree.org/tutorials/best-place-to-learn-python</li> <li>[10] https://snaye.hashnode.dev/object-oriented-programming-in-python-the-best-resources</li> <li>[11] https://www.youtube.com/watch?v=JeznW_7DlB0</li> <li>[12] https://www.reddit.com/r/learnpython/comments/xlxsw2/complete_beginner_looking_for_interactive_site_to/</li> <li>[13] https://www.w3schools.com/python/python_classes.asp</li> <li>[14] https://www.youtube.com/watch?v=Ej_02ICOIgs</li> <li>[15] https://www.programiz.com/python-programming/object-oriented-programming</li> <li>[16] https://www.reddit.com/r/learnpython/comments/s3a25c/any_good_resources_for_an_experienced_java/</li> <li>[17] https://www.reddit.com/r/learnprogramming/comments/nkvict/learning_java_with_background_in_python/</li> <li>[18] https://www.learnpython.org</li> <li>[19] https://www.youtube.com/watch?v=PCsCAMfwvos</li> <li>[20] https://www.coursera.org/specializations/programming-python-java</li> <li>[21] https://realpython.com/python-classes/</li> <li>[22] https://www.linkedin.com/pulse/10-best-courses-learn-python-3-depth-soma-sharma-yq1qc</li> <li>[23] https://www.youtube.com/watch?v=xEZkR9BFXOI</li> <li>[24] https://www.youtube.com/watch?v=ZDa-Z5JzLYM</li> <li>[25] https://www.youtube.com/watch?v=5qWPP_SRnZ0</li> <li>[26] https://www.youtube.com/watch?v=q2SGW2VgwAM</li> <li>[27] https://www.youtube.com/watch?v=-pEs-Bss8Wc</li> <li>[28] https://www.youtube.com/watch?v=MikphENIrOo</li> <li>[29] https://www.youtube.com/watch?v=JM279KD0DZ0</li> <li>[30] https://www.youtube.com/watch?v=xLovcfIugy8</li> <li>[31] https://www.youtube.com/watch?v=Vyd_1qy5ErQ</li> <li>[32] https://www.youtube.com/watch?v=VMXoPc6_8pw</li> <li>[33] https://www.reddit.com/r/learnpython/comments/z7wi79/good_sites_to_learn_python_that_are_not_crazy/</li> <li>[34] https://developers.google.com/edu/python</li> <li>[35] https://www.codecademy.com/learn/learn-python</li> <li>[36] https://www.youtube.com/watch?v=PMFd95RgIwE</li> <li>[37] https://www.codecademy.com/catalog/language/python</li> <li>[38] https://www.python.org</li> <li>[39] https://www.reddit.com/r/learnpython/comments/18xj44p/looking_for_good_resources_to_learn_oop_concepts/</li> <li>[40] https://www.coursera.org/courses?query=python</li> <li>[41] https://codecombat.com</li> <li>[42] https://kinsta.com/blog/python-object-oriented-programming/</li> <li>[43] https://realpython.com/java-vs-python/</li> <li>[44] https://www.aryaboudaie.com/java/python/technical/educational/2017/11/13/python-for-java-programmers.html</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/","title":"Getting Started","text":""},{"location":"1.%20Intro%20to%20Python/01-getting_started/#installing-python","title":"Installing Python","text":"<p>To get started with Python, you\u2019ll need to install it on your system. Here\u2019s how to do it on different platforms:</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#windows","title":"Windows","text":"<ol> <li>Visit python.org and download the latest version for Windows.</li> <li>Run the installer and make sure to check \u201cAdd Python to PATH\u201d[1].</li> <li>Follow the installation wizard to complete the process.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#macos","title":"macOS","text":"<ol> <li>Go to python.org and download the macOS installer.</li> <li>Open the .pkg file and follow the installation instructions[2].</li> <li>Python will be installed in the Applications folder.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#linux","title":"Linux","text":"<p>Most Linux distributions come with Python pre-installed. If not:</p> <ol> <li>Use your distribution\u2019s package manager (e.g., apt for Ubuntu)[3].</li> <li>For example, on Ubuntu: <code>sudo apt-get install python3</code></li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#installing-jetbrains-toolbox-and-pycharm-professional","title":"Installing JetBrains Toolbox and PyCharm Professional","text":""},{"location":"1.%20Intro%20to%20Python/01-getting_started/#jetbrains-toolbox","title":"JetBrains Toolbox","text":"<ol> <li>Visit the JetBrains Toolbox App web page and download the appropriate version for your OS[4].</li> <li>Run the installer and follow the on-screen instructions.</li> <li>Once installed, launch the Toolbox App.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#getting-an-education-license","title":"Getting an Education License","text":"<ol> <li>Go to the JetBrains website and apply for a free educational license[5].</li> <li>Verify your student or teacher status with your academic email.</li> <li>Once approved, you\u2019ll receive instructions to activate your license.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#installing-pycharm-professional","title":"Installing PyCharm Professional","text":"<ol> <li>Open JetBrains Toolbox.</li> <li>Search for \u201cPyCharm\u201d and select \u201cPyCharm Professional\u201d[4].</li> <li>Click the \u201cInstall\u201d button next to PyCharm Professional.</li> <li>The Toolbox App will download and install PyCharm automatically.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#creating-a-new-pure-python-project","title":"Creating a New Pure Python Project","text":"<ol> <li>Launch PyCharm Professional.</li> <li>Click \u201cNew Project\u201d on the welcome screen or go to <code>File &gt; New Project</code>.</li> <li>In the New Project dialog:<ul> <li>Specify the project location.</li> <li>Select \u201cCreate Git repository\u201d if desired.</li> <li>Check \u201cCreate a main.py welcome script\u201d[6].</li> </ul> </li> <li>Choose your Python interpreter or create a new virtual environment.</li> <li>Click \u201cCreate\u201d to set up your new project.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#running-the-welcome-script","title":"Running the Welcome Script","text":"<ol> <li>In the project explorer, locate the <code>main.py</code> file.</li> <li>Right-click on <code>main.py</code> and select \u201cRun \u2018main\u2019\u201c[10].</li> <li>Alternatively, click the green play button next to the <code>if __name__ == '__main__':</code> block[10].</li> <li>The script will execute, and you\u2019ll see the output in the Run tool window.</li> </ol> References <ul> <li>[1] https://docs.python.org/3/using/windows.html</li> <li>[2] https://docs.python.org/3.12/using/mac.html</li> <li>[3] https://docs.python.org/3/using/unix.html</li> <li>[4] https://www.jetbrains.com/help/rider/Installation_guide.html</li> <li>[5] https://www.jetbrains.com/lp/leaflets-gdc/students/</li> <li>[6] https://ultahost.com/knowledge-base/install-pycharm-windows/</li> <li>[7] https://www.jetbrains.com/help/pycharm/creating-empty-project.html</li> <li>[8] https://stackoverflow.com/questions/79331078/is-it-possible-to-edit-modify-the-welcome-scriptmain-py-in-pycharm-for-python</li> <li>[9] https://stackoverflow.com/questions/68537979/how-do-you-disable-this-sample-program-in-pycharm</li> <li>[10] https://www.jetbrains.com/guide/python/tutorials/getting-started-pycharm/run-python-using-a-run-configuration/</li> <li>[11] https://www.python.org/downloads/windows/</li> <li>[12] https://www.python.org/downloads/</li> <li>[13] https://docs.python.org/3/using/mac.html</li> <li>[14] https://discuss.python.org/t/install-python-3-11-9-on-ubuntu/51093</li> <li>[15] https://www.python.org/download/releases/2.5/msi/</li> <li>[16] https://www.python.org/downloads/macos/</li> <li>[17] https://discuss.python.org/t/publish-linux-installer-on-python-org/53760</li> <li>[18] https://discuss.python.org/t/trying-to-download-python-3-12-3-on-windows-11/52897</li> <li>[19] https://discuss.python.org/t/on-macos-14-pip-install-throws-error-externally-managed-environment/50352</li> <li>[20] https://docs.python.org/3/installing/index.html</li> <li>[21] https://discuss.python.org/t/python-installation/40571</li> <li>[22] https://discuss.python.org/t/help-needed-to-install-python-on-mac-os-i-get-the-installation-failed-message-everytime-i-install/22142</li> <li>[23] https://blog.jetbrains.com/toolbox-app/</li> <li>[24] https://www.jetbrains.com/toolbox-app/</li> <li>[25] https://askubuntu.com/questions/1410885/how-to-install-jetbrains-toolbox-in-ubuntu-22-04-lts</li> <li>[26] https://toolbox-support.jetbrains.com/hc/en-us/community/posts/360000394239-Automating-Toolbox-Setup</li> <li>[27] https://www.jetbrains.com/toolbox-app/download/other.html</li> <li>[28] https://youtrack.jetbrains.com/issue/TBX-9167/choose-install-location-on-for-toolbox-app-and-the-downloaded-apps</li> <li>[29] https://www.reddit.com/r/Jetbrains/comments/1cu41no/jetbrains_toolbox_app_still_broken/</li> <li>[30] https://toolbox-support.jetbrains.com/hc/en-us/community/posts/360009528659-Portable-toolbox</li> <li>[31] https://www.jetbrains.com/products/</li> <li>[32] https://blog.jetbrains.com/toolbox-app/2023/08/toolbox-app-2-0-overhauls-installations-and-updates/</li> <li>[33] https://www.jetbrains.com/toolbox-app/faq/</li> <li>[34] https://www.reddit.com/r/programming/comments/9pal3i/jetbrains_offer_their_entire_suite_of_tools_for/</li> <li>[35] https://www.jetbrains.com/store/</li> <li>[36] https://www.jetbrains.com/rider/buy/</li> <li>[37] https://www.jetbrains.com/edu-products/download/</li> <li>[38] https://www.reddit.com/r/Jetbrains/comments/1g7qgcw/jetbrains_is_it_worth_it/</li> <li>[39] https://www.jetbrains.com/pycharm/download/</li> <li>[40] https://www.jetbrains.com/pycharm/buy/</li> <li>[41] https://flathub.org/en/apps/com.jetbrains.PyCharm-Professional</li> <li>[42] https://resources.jetbrains.com/help/img/idea/2024.3/py_toolbox_app.png?sa=X&amp;ved=2ahUKEwiVma7t1ryMAxXSKLkGHZuYFu4Q_B16BAgLEAI</li> <li>[43] https://www.jetbrains.com/lp/toolbox/</li> <li>[44] https://www.jetbrains.com/help/pycharm/quick-start-guide.html</li> <li>[45] https://www.liquidweb.com/blog/how-to-install-pycharm-on-ubuntu/</li> <li>[46] https://resources.jetbrains.com/help/img/idea/2024.3/py_toolbox_app.png?sa=X&amp;ved=2ahUKEwjouK7t1ryMAxVFe_UHHTPbPMwQ_B16BAgMEAI</li> <li>[47] https://www.jetbrains.com/guide/python/tutorials/cloud-code-pycharm/project-setup/</li> <li>[48] https://www.jetbrains.com/help/pycharm/setting-up-your-project.html</li> <li>[49] https://www.youtube.com/watch?v=j37FLOh-NnU</li> <li>[50] https://www.reddit.com/r/pycharm/comments/1eoourr/how_could_i_setup_my_project_in_pycharm/</li> <li>[51] https://www.jetbrains.com/help/pycharm/getting-started.html</li> <li>[52] https://www.youtube.com/watch?v=W5p8v4yhxjk</li> <li>[53] https://docs.anaconda.com/working-with-conda/ide-tutorials/pycharm/</li> <li>[54] https://www.jetbrains.com/help/pycharm/using-consoles.html</li> <li>[55] https://discuss.python.org/t/install-python-3-10-in-windows/40014</li> <li>[56] https://legacy.python.org/download/mac/</li> <li>[57] https://wiki.python.org/moin/BeginnersGuide/Download</li> <li>[58] https://docs.python.org/3.10/using/mac.html</li> <li>[59] https://devguide.python.org/getting-started/setup-building/</li> <li>[60] https://dev.to/jorgecastro/install-jetbrains-toolbox-on-linux-596n</li> <li>[61] https://www.jetbrains.com/help/idea/installation-guide.html</li> <li>[62] https://www.youtube.com/watch?v=gM7SBQyKCY0</li> <li>[63] https://toolbox-support.jetbrains.com/hc/en-us/articles/20567925512850-Silent-installation-of-JetBrains-Toolbox-App-on-Windows</li> <li>[64] https://winget.run/pkg/JetBrains/Toolbox</li> <li>[65] https://sales.jetbrains.com/hc/en-gb</li> <li>[66] https://www.jetbrains.com/legal/docs/toolbox/license_educational/</li> <li>[67] https://sales.jetbrains.com/hc/en-gb/articles/11558649766674-How-do-I-apply-for-a-free-educational-license</li> <li>[68] https://www.jetbrains.com/community/education/</li> <li>[69] https://www.reddit.com/r/programming/comments/2h8l2x/jetbrains_makes_its_products_free_for_students/</li> <li>[70] https://www.jetbrains.com/store/comparison.html</li> <li>[71] https://www.reddit.com/r/webdev/comments/5zsgdb/am_i_allowed_to_use_my_student_jetbrains_license/</li> <li>[72] https://www.youtube.com/watch?v=6YYjtUAtfS8</li> <li>[73] https://www.reddit.com/r/archlinux/comments/ndf3qm/pycharm_professional_package_install_help/</li> <li>[74] https://askubuntu.com/questions/701618/pycharm-by-jetbrains-installation</li> <li>[75] https://www.digitalocean.com/community/tutorials/install-pycharm-on-linux</li> <li>[76] https://www.youtube.com/watch?v=2y2F7x2TPPA</li> <li>[77] https://www.youtube.com/watch?v=a0OUkzNMj2A</li> <li>[78] https://www.jetbrains.com/guide/python/tutorials/getting-started-pycharm/your-first-project/</li> <li>[79] https://dev.to/scofieldidehen/how-to-use-pycharm-as-a-python-developer-2hek</li> <li>[80] https://www.jetbrains.com/help/pycharm/creating-and-running-your-first-python-project.html</li> <li>[81] https://www.dataquest.io/blog/how-to-set-up-pycharm-community-edition/</li> <li>[82] https://www.youtube.com/watch?v=56bPIGf4us0</li> <li>[83] https://www.youtube.com/watch?v=HHcZbXsZtm0</li> <li>[84] https://www.jetbrains.com/help/pycharm/welcome-screen.html</li> <li>[85] https://stackoverflow.com/questions/42846803/how-to-run-code-in-pycharm</li> <li>[86] https://www.youtube.com/watch?v=FOdQa364sLM</li> <li>[87] https://www.reddit.com/r/pycharm/comments/k7pv7y/how_to_run_code_on_pycharm/</li> <li>[88] https://www.jetbrains.com/help/pycharm/code-running-assistance-tutorial.html</li> </ul>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#hello-world","title":"Hello, World!","text":"<pre><code># This is a sample Python script.\n\n# Press Maj+F10 to execute it or replace it with your code.\n# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.\n\n\ndef print_hi(name):\n    # Use a breakpoint in the code line below to debug your script.\n    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.\n\n\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    print_hi('PyCharm')\n\n# See PyCharm help at https://www.jetbrains.com/help/pycharm/\n</code></pre> <p>The default script generated by PyCharm is a simple \u201cHello, World!\u201d style program with some additional comments explaining PyCharm features. Let\u2019s break it down:</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#script-structure","title":"Script Structure","text":""},{"location":"1.%20Intro%20to%20Python/01-getting_started/#function-definition","title":"Function Definition","text":"<pre><code>def print_hi(name):\n    print(f'Hi, {name}')\n</code></pre> <p>This defines a function called <code>print_hi</code> that takes a <code>name</code> parameter. It uses an f-string to print a greeting with the provided name[2].</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#main-block","title":"Main Block","text":"<pre><code>if __name__ == '__main__':\n    print_hi('PyCharm')\n</code></pre> <p>This is the main block of the script. It checks if the script is being run directly (not imported as a module) and calls the <code>print_hi</code> function with \u2018PyCharm\u2019 as the argument[4].</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#pycharm-features","title":"PyCharm Features","text":"<p>The script includes comments highlighting some PyCharm features:</p> <ol> <li>Execution shortcut: \u201cPress Maj+F10 to execute it or replace it with your code.\u201d</li> <li>Search functionality: \u201cPress Double Shift to search everywhere for classes, files, tool windows, actions, and settings.\u201d</li> <li>Debugging: \u201cUse a breakpoint in the code line below to debug your script.\u201d and \u201cPress Ctrl+F8 to toggle the breakpoint.\u201d</li> <li>Run button: \u201cPress the green button in the gutter to run the script.\u201d</li> </ol> <p>These comments serve as quick reminders for new users about PyCharm\u2019s key features[1][3].</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#purpose","title":"Purpose","text":"<p>This default script serves several purposes:</p> <ol> <li>It provides a working example of a simple Python program.</li> <li>It demonstrates basic Python syntax, including function definition and the main block.</li> <li>It introduces users to PyCharm-specific features and shortcuts.</li> <li>It gives new users a starting point for their own projects.</li> </ol> <p>By running this script, you should see the output: \u201cHi, PyCharm\u201d in the console[6][15].</p> References <ul> <li>[1] https://www.jetbrains.com/help/pycharm/creating-and-running-your-first-python-project.html</li> <li>[2] https://web.stanford.edu/class/archive/cs/cs106a/cs106a.1204/handouts/py-fn.html</li> <li>[3] https://www.youtube.com/watch?v=56bPIGf4us0</li> <li>[4] https://python.land/introduction-to-python/functions</li> <li>[5] https://www.jetbrains.com/help/pycharm/run-debug-configuration-python.html</li> <li>[6] https://book.pythontips.com/en/latest/decorators.html</li> <li>[7] https://stackoverflow.com/questions/19679150/how-to-set-default-pycharm-interpreter</li> <li>[8] https://stackoverflow.com/questions/52606101/decorator-function-syntax-python</li> <li>[9] https://www.youtube.com/watch?v=OajNS-WHiUI</li> <li>[10] https://realpython.com/python-print/</li> <li>[11] https://www.jetbrains.com/help/pycharm/quick-start-guide.html</li> <li>[12] https://andreask.cs.illinois.edu/cs357-s15/public/demos/00-intro/Python%205:%20Functions.html</li> <li>[13] https://www.jetbrains.com/help/pycharm/configuring-python-interpreter.html</li> <li>[14] https://teamtreehouse.com/community/python-basics-print-hi-what-doesnt-this-code-fulfill-from-the-problem</li> <li>[15] https://www.jetbrains.com/help/pycharm/using-consoles.html</li> <li>[16] https://programming-23.mooc.fi/part-3/4-defining-functions/</li> <li>[17] https://stackoverflow.com/questions/10322424/how-to-select-python-version-in-pycharm</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate   explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the   author.</p>"},{"location":"1.%20Intro%20to%20Python/02-history-use/","title":"History and Usage","text":"<p>Python was developed by Dutch programmer Guido van Rossum in 1991 after he became frustrated with the limitations of the ABC programming language[1][2]. Van Rossum began developing Python in December 1989 while working at the Centrum Wiskunde &amp; Informatica (CWI) in the Netherlands[2]. The language was named after the British comedy series \u201cMonty Python\u2019s Flying Circus\u201d[1][2].</p> <p>Python was first released publicly in February 1991 with version 0.9.0[2]. The language has gone through three major evolutions: Python 1.0 (released in 1994), Python 2.0 (2000), and Python 3.0 (2008), with Python 3.0 not being backward-compatible with earlier versions[1].</p>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#popularity-and-rankings","title":"Popularity and Rankings","text":"<p>Python has seen a dramatic rise in popularity over the years:</p> <ul> <li>It currently ranks #1 on the Pluralsight\u2019s 2025 programming language rankings[3]</li> <li>Python has held the top position on the Tiobe programming language index since October 2021[4]</li> <li>As of March 2024, the gap between Python and other programming languages has widened significantly according to the   Tiobe Index[4]</li> <li>In 2024, Python became the most popular language on GitHub, surpassing JavaScript[2]</li> </ul> <p>This is particularly impressive considering Python was only in eighth place a decade ago[4].</p>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#applications-and-use-cases","title":"Applications and Use Cases","text":"<p>Python is widely used across numerous industries and applications:</p>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#data-science-and-analysis","title":"Data Science and Analysis","text":"<ul> <li>Data analysis using libraries like pandas and NumPy[5]</li> <li>Data visualization with matplotlib, seaborn, Plotly, and other libraries[5]</li> <li>Machine learning and AI applications[5][7]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#web-development","title":"Web Development","text":"<ul> <li>Backend development using frameworks like Django and Flask[5][8]</li> <li>API development with FastAPI[5]</li> <li>Major websites like Google, Facebook, Instagram, YouTube, Dropbox, and Reddit use Python[5]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#software-development","title":"Software Development","text":"<ul> <li>Used at all stages of software development including build control, testing, and maintenance[5]</li> <li>Automation and scripting for repetitive tasks[5]</li> <li>DevOps and Infrastructure as Code with libraries like Ansible and Terraform[5]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#scientific-and-numeric-computing","title":"Scientific and Numeric Computing","text":"<ul> <li>Scientific research with specialized libraries like NumPy, SciPy[8]</li> <li>Domain-specific applications in astronomy (Astropy), biology (Biopython), neuroscience (Psychopy)[7]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#business-applications","title":"Business Applications","text":"<ul> <li>Enterprise Resource Planning (ERP) systems[8]</li> <li>Financial technology and banking applications[7]</li> <li>Business intelligence and data mining[7]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#other-applications","title":"Other Applications","text":"<ul> <li>Internet of Things (IoT) development[10]</li> <li>Game development[10]</li> <li>Image processing and computer vision[7]</li> <li>Desktop GUI applications[8]</li> <li>Education and teaching programming[8]</li> </ul> <p>Python\u2019s widespread adoption is attributed to its easy-to-understand syntax, readability (using indentation instead of braces), extensive libraries, and versatility across different domains[2][5].</p> References <ul> <li>[1] https://www.britannica.com/technology/Python-computer-language</li> <li>[2] https://www.allstarsit.com/blog/how-python-became-a-top-programming-language</li> <li>[3] https://www.pluralsight.com/resources/blog/upskilling/top-programming-languages-2025</li> <li>[4] https://www.itpro.com/software/development/python-stretches-its-lead-as-the-most-popular-programming-language-but-why-does-it-have-such-widespread-appeal</li> <li>[5] https://www.datacamp.com/blog/what-is-python-used-for</li> <li>[6] https://www.coursera.org/articles/what-is-python-used-for-a-beginners-guide-to-using-python</li> <li>[7] https://www.linkedin.com/pulse/how-industries-using-python-sonal-jaiswal</li> <li>[8] https://www.python.org/about/apps/</li> <li>[9] https://www.nobledesktop.com/learn/python/industries-and-professions</li> <li>[10] https://www.linkedin.com/pulse/what-top-10-python-use-cases-applications-real-world</li> <li>[11] https://docs.python.org/3/faq/general.html</li> <li>[12] https://codefinity.com/blog/The-Evolution-of-Python</li> <li>[13] https://en.wikipedia.org/wiki/History_of_Python</li> <li>[14] https://www.aclti.com/en/cutting-edge-technologies/the-evolution-of-python-a-language-shaping-the-digital-world</li> <li>[15] https://pythoninstitute.org/about-python</li> <li>[16] https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1200px-Python-logo-notext.svg.png?sa=X&amp;ved=2ahUKEwiisrHN8ryMAxXhFLkGHcCbK6UQ_B16BAgBEAI</li> <li>[17] https://chem.libretexts.org/Courses/University_of_Arkansas_Little_Rock/IOST_Library/05:_Python_Book/01:_Introduction/01:_History_of_Python</li> <li>[18] https://learnpython.com/blog/history-of-python/</li> <li>[19] https://www.w3schools.com/python/python_intro.asp</li> <li>[20] https://www.wscubetech.com/resources/python/history</li> <li>[21] https://www.youtube.com/watch?v=NClmyC6olC0</li> <li>[22] https://www.bairesdev.com/blog/top-programming-languages/</li> <li>[23] https://www.reddit.com/r/codingbootcamp/comments/1hrq91y/its_2025_should_i_start_with_javascript_or_python/</li> <li>[24] https://www.crossover.com/blog/top-10-in-demand-programming-languages-for-2025-updated</li> <li>[25] https://www.index.dev/blog/most-popular-programming-languages-</li> <li>[26] https://github.blog/developer-skills/programming-languages-and-frameworks/why-python-keeps-growing-explained/</li> <li>[27] https://pypl.github.io</li> <li>[28] https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/</li> <li>[29] https://statisticstimes.com/tech/top-computer-languages.php</li> <li>[30] https://stackoverflow.blog/2023/01/26/comparing-tag-trends-with-our-most-loved-programming-languages/</li> <li>[31] https://www.linkedin.com/pulse/programming-language-trends-2025-which-performs-best-circleci-temhc</li> <li>[32] https://en.wikipedia.org/wiki/Python_(programming_language)</li> <li>[33] https://www.futurelearn.com/info/blog/what-is-python-used-for</li> <li>[34] https://www.reddit.com/r/learnpython/comments/10w01cs/practical_uses_for_python_for_an_average_user/</li> <li>[35] https://academy.nit-institute.com/where-is-python-used-real-world/</li> <li>[36] https://brainstation.io/career-guides/who-uses-python-today</li> <li>[37] https://inoxoft.com/blog/top-23-applications-made-with-python/</li> <li>[38] https://www.altamira.ai/blog/industries-using-python-2/</li> <li>[39] https://www.stxnext.com/blog/top-python-apps</li> <li>[40] https://www.youtube.com/watch?v=Y8Tko2YC5hA</li> <li>[41] https://www.reddit.com/r/learnprogramming/comments/zw30rz/industry_uses_of_python/</li> <li>[42] https://www.simplilearn.com/what-is-python-used-for-article</li> <li>[43] https://dev.to/souvikdcoder/the-origins-of-python-a-journey-through-its-history-and-evolution-24m2</li> <li>[44] https://www.linkedin.com/pulse/evolution-python-from-humble-beginnings-powerful-snsct-auto</li> <li>[45] https://www.tutorialspoint.com/python/python_history.htm</li> <li>[46] https://www.datasciencesociety.net/the-evolution-and-impact-of-python-in-modern-programming/</li> <li>[47] https://www.bocasay.com/history-python-programming/</li> <li>[48] https://www.tiobe.com/tiobe-index/</li> <li>[49] https://newsletter.techworld-with-milan.com/p/trends-6-python-is-the-most-popular</li> <li>[50] https://www.techrepublic.com/article/tiobe-index-language-rankings/</li> <li>[51] https://flatironschool.com/blog/python-popularity-the-rise-of-a-global-programming-language/</li> <li>[52] https://www.datacamp.com/blog/top-programming-languages-for-data-scientists-in-2022</li> <li>[53] https://github.blog/news-insights/octoverse/octoverse-2024/</li> <li>[54] https://www.reddit.com/r/learnpython/comments/15ane9q/what_can_i_use_python_for/</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/01-python-tutorial/","title":"1. Recommended readings","text":"<p>Python tutorial</p> <ol> <li>Basic Python</li> </ol> <ul> <li>Part 1: Chapters 1, 2, 3, 4</li> <li>Part 2: Chapters 5, 7, 8 (skip chapter 6 for now)</li> </ul> <ol> <li>OOP</li> </ol> <ul> <li>Chapter 9</li> </ul>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/","title":"2. Python vs. Java","text":"<p>Python and Java are both popular programming languages with distinct characteristics in syntax and style. Here\u2019s a comparison of their key differences:</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#syntax-differences","title":"Syntax Differences","text":""},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#code-structure","title":"Code Structure","text":"<p>Python uses indentation to define code blocks, making the code cleaner and more readable. Java, on the other hand, uses curly braces to denote code blocks and requires semicolons at the end of statements[2][7].</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#type-system","title":"Type System","text":"<p>Python is dynamically typed, meaning variable types are inferred at runtime and don\u2019t need to be explicitly declared. Java is statically typed, requiring explicit type declarations for all variables, method parameters, and return values[1][3].</p> <pre><code># Python example\nx = 10\nx = \"hello\"  # Valid in Python\n</code></pre> <pre><code>// Java example\nint x = 10;\nx = \"hello\";  // Error in Java\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#verbosity","title":"Verbosity","text":"<p>Python code is typically more concise. For example, reading a text file in Python might take only 4 lines of code, while Java could require 18 lines for the same operation[1]. This difference stems from Java\u2019s strict type system and syntax requirements[5].</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#performance-and-execution","title":"Performance and Execution","text":"<p>Python is an interpreted language that compiles to bytecode at runtime, while Java compiles in advance. This fundamental difference makes Java generally faster in execution, though Python has improved significantly with Python 3[3][4].</p> <p>Java uses a Just-in-Time (JIT) compiler, which improves efficiency by compiling bytecode into machine code in near real-time[3][5].</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#object-oriented-programming","title":"Object-Oriented Programming","text":"<p>Both languages support object-oriented programming, but with different approaches:</p> <ul> <li>Class Definition: Python uses the <code>class</code> keyword with <code>__init__</code> as the constructor, while Java requires classes   in separate files with constructors named after the class[1].</li> <li>Inheritance: Python supports multiple inheritance, while Java only allows single inheritance with multiple   interface implementation[1].</li> <li>Encapsulation: Python uses a convention-based privacy system with underscores, while Java enforces strict access   modifiers (public, private, protected)[1].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#learning-curve","title":"Learning Curve","text":"<p>Python\u2019s simplified syntax and readability make it more beginner-friendly with a gentler learning curve. Java\u2019s stricter syntax and object-oriented nature may present a steeper learning curve for beginners[2][7].</p> <p>Python\u2019s design philosophy emphasizes code readability and simplicity, allowing developers to focus more on logic than syntax details[3].</p> <p>In summary, Python offers a more concise, readable syntax with dynamic typing, making it excellent for rapid development, while Java provides a more structured, verbose approach with static typing that catches errors at compile time.</p> References <ul> <li>[1] https://www.datacamp.com/blog/python-vs-java</li> <li>[2] https://www.skillreactor.io/blog/python-vs-java/</li> <li>[3] https://www.scoutapm.com/python-vs-java/</li> <li>[4] https://www.revelo.com/blog/python-vs-java</li> <li>[5] https://www.imaginarycloud.com/blog/python-vs-java</li> <li>[6] https://www.snaplogic.com/glossary/python-vs-java</li> <li>[7] https://raygun.com/blog/java-vs-python/</li> <li>[8] https://www.bmc.com/blogs/python-vs-java/</li> <li>[9] https://www.coursera.org/articles/python-vs-java</li> <li>[10] https://www.youtube.com/watch?v=HJ4TN5Obqag</li> <li>[11] https://s7280.pcdn.co/wp-content/uploads/2018/12/key-1024x309.png?sa=X&amp;ved=2ahUKEwiAx4aU3LyMAxVVcfUHHXg_E5gQ_B16BAgCEAI</li> <li>[12] https://math-cs.gordon.edu/courses/cps122/handouts-2014/From%20Python%20to%20Java%20Lecture/A%20Comparison%20of%20the%20Syntax%20of%20Python%20and%20Java.pdf</li> <li>[13] https://www.rose-hulman.edu/class/cs/csse220/201130/Resources/Python_vs_Java.html</li> <li>[14] https://radixweb.com/blog/python-vs-java</li> <li>[15] https://www.rose-hulman.edu/class/cs/csse220/200820/web/Resources/Python_vs_Java.html</li> <li>[16] https://www.reddit.com/r/learnprogramming/comments/tzyz28/main_differences_between_python_and_java/</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/","title":"3. Type System","text":"<p>Python\u2019s type system is a unique blend of dynamic and strong typing, with optional static type hints. Here\u2019s an overview of its key characteristics:</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#dynamic-typing","title":"Dynamic Typing","text":"<p>Python is primarily a dynamically typed language[2][5]. This means:</p> <ol> <li>Variable types are determined at runtime.</li> <li>You don\u2019t need to declare variable types explicitly.</li> <li>A variable can hold different types of data during its lifetime.</li> </ol> <p>For example:</p> <pre><code>x = 10  # x is an integer\nx = \"Hello\"  # now x is a string\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#strong-typing","title":"Strong Typing","text":"<p>Despite being dynamic, Python employs strong typing[2][5]:</p> <ol> <li>The type of a value doesn\u2019t change unexpectedly.</li> <li>Explicit type conversions are required for most type changes.</li> <li>Operations between incompatible types raise errors.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#type-hints-and-annotations","title":"Type Hints and Annotations","text":"<p>Python 3.5+ introduced optional static type hints[3][6]:</p> <ol> <li>They provide additional metadata about expected types.</li> <li>They don\u2019t affect runtime behavior but aid static analysis tools.</li> <li>They improve code readability and maintainability.</li> </ol> <p>Example of type hints:</p> <pre><code>def greet(name: str) -&gt; str:\n    return f\"Hello, {name}\"\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#gradual-typing","title":"Gradual Typing","text":"<p>Python supports gradual typing[1], allowing developers to:</p> <ol> <li>Add type annotations incrementally.</li> <li>Mix statically typed and dynamically typed code.</li> <li>Use the <code>Any</code> type for expressions with unknown types.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#type-checking","title":"Type Checking","text":"<p>While Python itself doesn\u2019t enforce type hints at runtime, external tools like mypy can perform static type checking[6][8]:</p> <ol> <li>These tools analyze code without executing it.</li> <li>They can catch type-related errors before runtime.</li> <li>They support gradual adoption of type hints.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#custom-types","title":"Custom Types","text":"<p>Python allows the creation of custom types using classes[5], providing flexibility in modeling domain-specific concepts.</p> <p>In summary, Python\u2019s type system offers a balance between the flexibility of dynamic typing and the safety of strong typing, with optional static type hints for improved code quality and tooling support.</p> References <ul> <li>[1] https://typing.python.org/en/latest/spec/concepts.html</li> <li>[2] https://stackoverflow.com/questions/11328920/is-python-strongly-typed</li> <li>[3] https://fastapi.tiangolo.com/python-types/</li> <li>[4] https://vickiboykis.com/2019/07/08/a-deep-dive-on-python-type-hints/</li> <li>[5] https://beecrowd.com/blog-posts/typing-in-python/</li> <li>[6] https://blog.logrocket.com/understanding-type-annotation-python/</li> <li>[7] https://typing.python.org/en/latest/spec/type-system.html</li> <li>[8] https://dagster.io/blog/python-type-hinting</li> <li>[9] https://peps.python.org/pep-0484/</li> <li>[10] https://cerfacs.fr/coop/python-typing</li> <li>[11] https://mypy.readthedocs.io/en/stable/dynamic_typing.html</li> <li>[12] https://runestone.academy/ns/books/published/fopp/Functions/TypeAnnotations.html</li> <li>[13] https://docs.python.org/3/library/typing.html</li> <li>[14] https://docs.python.org/3/library/types.html</li> <li>[15] https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html</li> <li>[16] https://auth0.com/blog/typing-in-python/</li> <li>[17] https://docs.python.org/3/library/stdtypes.html</li> <li>[18] https://stackoverflow.com/questions/59023552/in-python-are-type-annotations-and-type-hints-the-same-thing</li> <li>[19] https://weaviate.io/blog/typing-systems-in-python</li> <li>[20] https://www.futurelearn.com/info/courses/python-in-hpc/0/steps/65121</li> </ul>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/","title":"4. Type Hints","text":"<p>Python type hints provide a way to indicate the expected types of variables, function parameters, and return values. Let\u2019s explore this feature in depth with various examples.</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#basic-type-hints","title":"Basic Type Hints","text":"<p>Type hints use a simple syntax with colons to annotate variables and functions:</p> <pre><code># Variable annotations\nage: int = 30\nname: str = \"Alice\"\nis_active: bool = True\nprice: float = 19.99\n</code></pre> <p>For functions, you can annotate both parameters and return values:</p> <pre><code>def greet(name: str) -&gt; str:\n    return f\"Hello, {name}\"\n\n\ndef calculate_area(length: float, width: float) -&gt; float:\n    return length * width\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#built-in-collection-types","title":"Built-in Collection Types","text":"<p>Python\u2019s typing module provides ways to annotate collection types:</p> <pre><code>from typing import List, Dict, Tuple, Set\n\n# Lists\nnumbers: List[int] = [1, 2, 3, 4, 5]\nnames: List[str] = [\"Alice\", \"Bob\", \"Charlie\"]\n\n# Dictionaries\nuser_scores: Dict[str, int] = {\"Alice\": 95, \"Bob\": 87, \"Charlie\": 92}\nconfig: Dict[str, str] = {\"host\": \"localhost\", \"port\": \"8080\"}\n\n# Tuples\npoint: Tuple[int, int] = (10, 20)\nperson: Tuple[str, int, bool] = (\"Alice\", 30, True)\n\n# Sets\nunique_ids: Set[int] = {1, 2, 3, 4, 5}\nfruits: Set[str] = {\"apple\", \"banana\", \"orange\"}\n</code></pre> <p>In Python 3.9+, you can use the built-in collection types directly:</p> <pre><code># Python 3.9+ syntax\nnumbers: list[int] = [1, 2, 3, 4, 5]\nuser_scores: dict[str, int] = {\"Alice\": 95, \"Bob\": 87}\npoint: tuple[int, int] = (10, 20)\nunique_ids: set[int] = {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#optional-and-union-types","title":"Optional and Union Types","text":"<p>For variables that might be None or have multiple possible types:</p> <pre><code>from typing import Optional, Union\n\n\n# Optional - can be a specific type or None\ndef find_user(user_id: int) -&gt; Optional[dict]:\n    # Implementation that might return None if user not found\n    pass\n\n\n# Union - can be one of several types\ndef process_input(data: Union[str, bytes, list]) -&gt; str:\n    # Implementation that handles different input types\n    pass\n</code></pre> <p>In Python 3.10+, you can use the pipe operator for unions:</p> <pre><code># Python 3.10+ syntax\ndef process_input(data: str | bytes | list) -&gt; str:\n    # Implementation\n    pass\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#type-aliases","title":"Type Aliases","text":"<p>You can create aliases for complex types:</p> <pre><code>from typing import Dict, List, Tuple\n\n# Type aliases\nUserID = int\nUsername = str\nUserRecord = Dict[str, Union[str, int, bool]]\nMatrix = List[List[float]]\nPoint = Tuple[float, float]\n\n\ndef get_user(user_id: UserID) -&gt; UserRecord:\n    # Implementation\n    pass\n\n\ndef transform_matrix(m: Matrix) -&gt; Matrix:\n    # Implementation\n    pass\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#callable-types","title":"Callable Types","text":"<p>For functions that accept other functions as arguments:</p> <pre><code>from typing import Callable\n\n\n# A function that takes a callback function\ndef process_data(data: list, callback: Callable[[int], str]) -&gt; list:\n    return [callback(item) for item in data]\n\n\n# Usage\ndef format_number(num: int) -&gt; str:\n    return f\"Number: {num}\"\n\n\nresult = process_data([1, 2, 3], format_number)\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#user-defined-classes","title":"User-Defined Classes","text":"<p>Classes work naturally with type hints:</p> <pre><code>class User:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n\n\ndef create_greeting(user: User) -&gt; str:\n    return f\"Hello, {user.name}!\"\n\n\n# Using Type for class references\nfrom typing import Type\n\n\ndef create_user(user_class: Type[User], name: str, age: int) -&gt; User:\n    return user_class(name, age)\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#generic-types","title":"Generic Types","text":"<p>For creating flexible, reusable components:</p> <pre><code>from typing import TypeVar, Generic, List\n\nT = TypeVar('T')\n\n\nclass Stack(Generic[T]):\n    def __init__(self) -&gt; None:\n        self.items: List[T] = []\n\n    def push(self, item: T) -&gt; None:\n        self.items.append(item)\n\n    def pop(self) -&gt; T:\n        return self.items.pop()\n\n    def is_empty(self) -&gt; bool:\n        return not self.items\n\n\n# Usage\nint_stack = Stack[int]()\nint_stack.push(1)\nint_stack.push(2)\n\nstr_stack = Stack[str]()\nstr_stack.push(\"hello\")\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#type-checking-with-mypy","title":"Type Checking with mypy","text":"<p>Type hints don\u2019t enforce types at runtime, but tools like mypy can check them statically:</p> <pre><code># example.py\ndef double(x: int) -&gt; int:\n    return x * 2\n\n\nresult = double(\"hello\")  # Type error!\n</code></pre> <p>Running mypy will catch this error:</p> <pre><code>$ mypy example.py\nexample.py:4: error: Argument 1 to \"double\" has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>Type hints make your code more readable, maintainable, and help catch errors before runtime, especially when used with static analysis tools like mypy.</p> References <ul> <li>[1] https://realpython.com/lessons/type-hinting/ </li> <li>[2] https://realpython.com/python-type-hints-multiple-types/</li> <li>[3] https://dagster.io/blog/python-type-hinting</li> <li>[4] https://ryan.himmelwright.net/post/python-type-hinting-intro/</li> <li>[5] https://fastapi.tiangolo.com/python-types/</li> <li>[6] https://peps.python.org/pep-0484/</li> <li>[7] https://codefinity.com/blog/A-Comprehensive-Guide-to-Python-Type-Hints</li> <li>[8] https://www.youtube.com/watch?v=MaejDU6pelY</li> <li>[9] https://docs.python.org/3/library/typing.html</li> <li>[10] https://www.youtube.com/watch?v=79zeCq9raY0</li> <li>[11] https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html</li> <li>[12] https://dagster.io/posts/python-type-hinting/python-type-hinting-min.jpg?sa=X&amp;ved=2ahUKEwjck76X37yMAxVfHrkGHXoPAcgQ_B16BAgHEAI</li> <li>[13] https://www.youtube.com/watch?v=C1ANuCyniOw</li> <li>[14] https://stackoverflow.com/questions/37835179/how-can-i-specify-the-function-type-in-my-type-hints</li> <li>[15] https://www.reddit.com/r/Python/comments/10zdidm/why_type_hinting_sucks/</li> <li>[16] https://www.reddit.com/r/learnpython/comments/lgwdsd/whats_the_point_of_type_hints_in_python/</li> <li>[17] https://www.infoworld.com/article/2268917/get-started-with-python-type-hints.html</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/05-exercices/","title":"5. Exercises","text":"<p>Write a function for each of the following questions.</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/05-exercices/#practice-questions","title":"Practice Questions","text":"<ol> <li> <p>Calculate and display the absolute value of a number entered by the user.</p> </li> <li> <p>Determine if an integer entered by the user is even or odd.</p> </li> <li> <p>Read three numbers and print the smallest of these three numbers.</p> </li> <li> <p>Calculate the total salary of an employee. Read the hourly wage and the number of hours worked as input. If the employee worked more than 40 hours, overtime hours are paid at 1.5 times the hourly wage.</p> </li> <li> <p>Read three positive numbers representing the lengths of the sides of a triangle. Print:</p> </li> </ol> <ul> <li>\u201cScalene\u201d if all three sides are unequal</li> <li>\u201cIsosceles\u201d if two sides are equal</li> <li>\u201cEquilateral\u201d if all three sides are equal</li> </ul> <ol> <li> <p>A professor provides you with three grades calculated out of 100. Calculate the average and print \u201cfail\u201d if the final grade is less than 60/100. Otherwise, print the student\u2019s grade.</p> </li> <li> <p>Read a final course grade as input. If the grade is less than 0, or if the grade is greater than 100, then display \u201cThis grade is invalid\u201d and terminate the function. If the grade is valid, then display a letter corresponding to the grade according to the following conditions:</p> </li> </ol> <ul> <li>E: less than 60</li> <li>D: from 60 to less than 70</li> <li>C: from 70 to less than 80</li> <li>B: from 80 to less than 90</li> <li>A: 90 or more</li> </ul> <ol> <li>Read a number between 1 and 10 inclusive.</li> </ol> <ul> <li>If the number is not in this range, display \u201cinvalid\u201d.</li> <li>If the number is valid, display \u201cvalid\u201d.</li> </ul> <ol> <li>Read a number between 1 and 10 inclusive.</li> </ol> <ul> <li>If the number is not in this range, display \u201cinvalid\u201d and ask for the number again. You must ensure that the number is valid before continuing to the next step. There is no limit on the number of incorrect attempts.</li> <li>If the number is valid, display \u201cvalid\u201d.</li> </ul> <ol> <li> <p>Read a number between 1 and 10 inclusive.</p> <ul> <li>If the number is not in this range, display \u201cinvalid\u201d and ask for the number again. You must ensure that the number is valid before continuing to the next step. There is a limit of 3 incorrect attempts.</li> <li>If the maximum number of incorrect attempts has been reached, display \u201cMaximum number of attempts reached.\u201d and the method must terminate.</li> <li>If the number is valid, display \u201cvalid\u201d.</li> </ul> </li> <li> <p>Read an integer and display it in reverse. For example, if the user enters <code>123456</code>, the program displays <code>654321</code>. For this exercise, you cannot reverse a string representing the number; you must use an <code>int</code> and use division and modulo operations on this <code>int</code>.</p> </li> <li> <p>Read an integer and display a countdown from this number to 0. When the countdown is complete, display \u201cFinished!\u201d instead of the number 0. For example, if the entered number is 5, you should display:     <pre><code>5\n4\n3\n2\n1\nFinished!\n</code></pre></p> </li> <li> <p>For each of the following questions, define a list of integers containing approximately 10 values of your choice. The exact length of the list and the numbers it contains are up to you, but they should allow for good testing of the questions. Answer the questions in different functions. Using a <code>for</code> loop on the indices of the list:</p> <ol> <li>Find the sum and average of all numbers in the list.</li> <li>Display all even numbers contained in the list.</li> <li>Determine if all numbers in the list are positive or not. If all numbers are positive, display True, otherwise display False.</li> </ol> </li> <li> <p>Repeat the previous question, but using a <code>while</code> loop on the list.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/","title":"1. Python\u2019s OOP Model","text":"<p>Python\u2019s OOP model provides a flexible approach to object-oriented programming that balances simplicity with power. Let me describe Python\u2019s model first, then compare it to Java\u2019s approach.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#pythons-oop-model","title":"Python\u2019s OOP Model","text":"<p>Python implements object-oriented programming through classes and objects. In Python, a class serves as a blueprint that defines attributes (data) and methods (functions) that objects of that class will possess[1]. Everything in Python is an object, including numbers, strings, and functions[2].</p> <p>Python\u2019s OOP model is built on four fundamental pillars:</p> <ol> <li> <p>Encapsulation: Python uses a convention-based approach with underscores (e.g., <code>_private_var</code>) rather than strict    access modifiers[4].</p> </li> <li> <p>Inheritance: Python supports both single and multiple inheritance, allowing a class to inherit attributes and    methods from one or more parent classes[2][3].</p> </li> <li> <p>Polymorphism: This allows methods to be implemented differently in different classes, enabling objects of    different classes to respond to the same method call in class-specific ways[3].</p> </li> <li> <p>Abstraction: Python allows you to hide complex implementation details and show only the necessary features of an    object[2].</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#comparing-pythons-oop-to-javas-oop","title":"Comparing Python\u2019s OOP to Java\u2019s OOP","text":""},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#type-system","title":"Type System","text":"<ul> <li>Python: Uses dynamic typing where variable types are determined at runtime. Variables can change types throughout   program execution[4][5].</li> <li>Java: Uses static typing where all variables must be explicitly declared with their types before use[4][5].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#syntax-and-structure","title":"Syntax and Structure","text":"<ul> <li>Python: Uses indentation to define code blocks. Classes are defined with the <code>class</code> keyword and constructor with   <code>__init__</code>[4][6].</li> <li>Java: Uses curly braces to define code blocks. Classes are typically defined in separate files with constructors   named after the class[4][7].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#inheritance","title":"Inheritance","text":"<ul> <li>Python: Supports multiple inheritance, allowing a class to inherit from multiple parent classes[2][3].</li> <li>Java: Supports only single inheritance for classes but allows multiple interface implementation[4].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#encapsulation","title":"Encapsulation","text":"<ul> <li>Python: Doesn\u2019t have strict access modifiers. Uses naming conventions (underscores) to indicate private   attributes[4][8].</li> <li>Java: Enforces strict access modifiers (public, private, protected) to control access to class members[3][4].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#performance","title":"Performance","text":"<ul> <li>Python: Generally slower due to its interpreted nature and dynamic typing[5][9].</li> <li>Java: Typically faster due to compilation to bytecode and Just-In-Time (JIT) compilation[5][9].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#design-philosophy","title":"Design Philosophy","text":"<ul> <li>Python: Supports OOP but doesn\u2019t force it. You can write procedural or functional code without classes[8].</li> <li>Java: Designed as a pure OOP language where everything must be within a class[8].</li> </ul> <p>In summary, while both languages implement the core principles of OOP, Python offers a more flexible, convention-based approach with dynamic typing, while Java provides a stricter, more structured approach with static typing and explicit access control.</p> References <ul> <li>[1] https://www.datacamp.com/tutorial/python-oop-tutorial</li> <li>[2] https://www.linkedin.com/pulse/python-four-pillars-object-oriented-programming-benjamin-b-phiri</li> <li>[3] https://www.tutorialspoint.com/python/python_oops_concepts.htm</li> <li>[4] https://www.datacamp.com/blog/python-vs-java</li> <li>[5] https://www.imaginarycloud.com/blog/python-vs-java</li> <li>[6] https://www.freecodecamp.org/news/how-to-use-oop-in-python/</li> <li>[7] https://www.youngwonks.com/blog/python-vs-java</li> <li>[8] https://www.activestate.com/blog/java-versus-python-key-programming-differences-in-2021/</li> <li>[9] https://raygun.com/blog/java-vs-python/</li> <li>[10] https://www.youtube.com/watch?v=q2SGW2VgwAM</li> <li>[11] https://www.freecodecamp.org/news/object-oriented-programming-in-python/</li> <li>[12] https://www.w3schools.com/python/python_classes.asp</li> <li>[13] https://www.programiz.com/python-programming/object-oriented-programming</li> <li>[14] https://www.wscubetech.com/resources/python/oops-concepts</li> <li>[15] https://docs.python.org/3/reference/datamodel.html</li> <li>[16] https://www.youtube.com/watch?v=ZVTuWsrjvyU</li> <li>[17] https://www.pythoncheatsheet.org/cheatsheet/oop-basics</li> <li>[18] https://www.freecodecamp.org/news/object-oriented-programming-python/</li> <li>[19] https://www.youtube.com/watch?v=Ej_02ICOIgs</li> <li>[20] https://files.realpython.com/media/Object-Oriented-Programming-OOP-in-Python-3_Watermarked.0d29780806d5.jpg?sa=X&amp;ved=2ahUKEwi8ks_097yMAxXuCLkGHZFBI9cQ_B16BAgHEAI</li> <li>[21] https://raygun.com/blog/images/java-vs-python/feature.png?sa=X&amp;ved=2ahUKEwifuZT297yMAxUdklYBHX65EI0Q_B16BAgMEAI</li> <li>[22] https://realpython.com/oop-in-python-vs-java/</li> <li>[23] https://www.reddit.com/r/javahelp/comments/13qow9l/are_javas_oop_concepts_much_different_than_pythons/</li> <li>[24] https://www.youtube.com/watch?v=dYLSFF2gjSs</li> <li>[25] https://www.coursera.org/articles/python-vs-java</li> <li>[26] https://dev.to/terrythreatt/the-four-principles-of-object-oriented-programming-in-python-1jbi</li> <li>[27] https://www.geekster.in/articles/oops-concepts-in-python/</li> <li>[28] https://realpython.com/python3-object-oriented-programming/</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/","title":"2. Classes","text":"<p>Python\u2019s class model provides a flexible and powerful way to implement object-oriented programming. Let\u2019s dive into the details of Python\u2019s class structure and its various components.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#class-definition","title":"Class Definition","text":"<p>To define a class in Python, you use the <code>class</code> keyword followed by the class name:</p> <pre><code>class MyClass:\n    pass\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#attributes","title":"Attributes","text":"<p>Attributes in Python classes can be instance attributes or class attributes.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#instance-attributes","title":"Instance Attributes","text":"<p>Instance attributes are unique to each instance of a class. They are typically defined within the constructor method:</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name  # instance attribute\n        self.age = age  # instance attribute\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#class-attributes","title":"Class Attributes","text":"<p>Class attributes are shared among all instances of a class. They are defined outside any method within the class:</p> <pre><code>class Person:\n    species = \"Homo sapiens\"  # class attribute\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#methods","title":"Methods","text":""},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#instance-methods","title":"Instance Methods","text":"<p>Instance methods are the most common type of methods in Python classes. They take <code>self</code> as the first parameter:</p> <pre><code>class Person:\n    def greet(self):\n        return f\"Hello, my name is {self.name}\"\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#static-methods","title":"Static Methods","text":"<p>Static methods don\u2019t have access to <code>cls</code> or <code>self</code>. They work like regular functions but belong to the class\u2019s namespace. They are defined using the <code>@staticmethod</code> decorator:</p> <pre><code>class MathOperations:\n    @staticmethod\n    def add(x, y):\n        return x + y\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#class-methods","title":"Class Methods","text":"<p>Class methods take <code>cls</code> as the first parameter and can access or modify class state. They are defined using the <code>@classmethod</code> decorator:</p> <pre><code>class Person:\n    count = 0\n\n    @classmethod\n    def increment_count(cls):\n        cls.count += 1\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#constructor","title":"Constructor","text":"<p>The constructor in Python is the <code>__init__</code> method. It\u2019s called when an object is created:</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#string-representation","title":"String Representation","text":"<p>Python provides two methods for string representation of objects:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#str","title":"str","text":"<p>The <code>__str__</code> method is used for creating a user-friendly string representation:</p> <pre><code>class Person:\n    def __str__(self):\n        return f\"Person named {self.name}\"\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#repr","title":"repr","text":"<p>The <code>__repr__</code> method is used for creating a detailed, unambiguous representation of the object, typically for debugging:</p> <pre><code>class Person:\n    def __repr__(self):\n        return f\"Person(name='{self.name}', age={self.age})\"\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#public-vs-private","title":"Public vs Private","text":"<p>Python doesn\u2019t have strict public/private distinctions, but it uses conventions:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#public","title":"Public","text":"<p>By default, all attributes and methods in Python are public:</p> <pre><code>class Person:\n    def public_method(self):\n        pass\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#private","title":"Private","text":"<p>To indicate that an attribute or method should be treated as private, prefix it with double underscores:</p> <pre><code>class Person:\n    def __init__(self):\n        self.__private_attr = 42\n\n    def __private_method(self):\n        pass\n</code></pre> <p>This triggers name mangling, making it harder (but not impossible) to access from outside the class[6][8].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#protected","title":"Protected","text":"<p>A single underscore prefix is used to indicate that an attribute or method should be treated as protected:</p> <pre><code>class Person:\n    def __init__(self):\n        self._protected_attr = 42\n\n    def _protected_method(self):\n        pass\n</code></pre> <p>This is just a convention and doesn\u2019t prevent access from outside the class[6][8].</p> <p>In summary, Python\u2019s class model provides a flexible system for creating object-oriented code. While it doesn\u2019t enforce strict access control like some other languages, it offers conventions that allow developers to communicate their intentions regarding the visibility and usage of class members.</p> References <ul> <li>[1] https://realpython.com/python-classes/</li> <li>[2] https://www.digitalocean.com/community/tutorials/python-static-method</li> <li>[3] https://pythonbasics.org/constructor/</li> <li>[4] https://codedamn.com/news/python/what-is-repr-in-python</li> <li>[5] https://hacktec.gitbooks.io/effective-python/content/en/Chapter3/item27.html</li> <li>[6] https://llego.dev/posts/access-modifiers-python/</li> <li>[7] https://www.tutorialsteacher.com/python/public-private-protected-modifiers</li> <li>[8] https://dev.to/ankitmalikg/python-how-to-define-public-private-and-protected-variables-in-a-class-4g9</li> <li>[9] https://jellis18.github.io/post/2022-01-15-access-modifiers-python/</li> <li>[10] https://www.youtube.com/watch?v=xY__sjI5yVU</li> <li>[11] https://www.datacamp.com/tutorial/python-private-methods-explained</li> <li>[12] https://www.youtube.com/watch?v=tQ1n-ySubAM</li> <li>[13] https://builtin.com/software-engineering-perspectives/python-attributes</li> <li>[14] https://images.prismic.io/turing/65981105531ac2845a2729c7_Importance_of_Python_class_attributes_6495667a2b.webp?auto=format%2Ccompress&amp;sa=X&amp;ved=2ahUKEwjn6PH2-7yMAxXUrokEHX32Kl4Q_B16BAgDEAI</li> <li>[15] https://www.turing.com/kb/introduction-to-python-class-attributes</li> <li>[16] https://docs.python.org/3/reference/datamodel.html</li> <li>[17] https://www.toptal.com/python/python-class-attributes-an-overly-thorough-guide</li> <li>[18] https://labex.io/tutorials/python-how-to-define-class-attributes-and-methods-at-runtime-398174</li> <li>[19] https://www.w3schools.com/python/python_classes.asp</li> <li>[20] https://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</li> <li>[21] https://stackoverflow.com/questions/2438473/what-is-the-purpose-of-static-methods-how-do-i-know-when-to-use-one</li> <li>[22] https://www.youtube.com/watch?v=-LevVCuAi2E</li> <li>[23] https://stackoverflow.com/questions/38280526/is-a-constructor-init-necessary-for-a-class-in-python</li> <li>[24] https://realpython.com/python-multiple-constructors/</li> <li>[25] https://www.digitalocean.com/community/tutorials/how-to-construct-classes-and-define-objects-in-python-3</li> <li>[26] https://docs.python.org/3/tutorial/classes.html</li> <li>[27] https://realpython.com/python-class-constructor/</li> <li>[28] https://www.reddit.com/r/learnprogramming/comments/83flwh/what_exactly_is_a_constructor_and_what_does_it_do/</li> <li>[29] https://www.wscubetech.com/resources/python/constructors</li> <li>[30] https://www.youtube.com/watch?v=uKmfhJA76Y4</li> <li>[31] https://www.reddit.com/r/learnpython/comments/izjrbp/a_beginners_guide_to_str_and_repr/</li> <li>[32] https://discuss.python.org/t/what-are-the-differences-between-str-and-repr-in-class-methods/44142</li> <li>[33] https://www.youtube.com/watch?v=-lz5kRcoU5Q</li> <li>[34] https://realpython.com/python-repr-vs-str/</li> <li>[35] https://stackoverflow.com/questions/1641219/does-python-have-private-variables-in-classes</li> <li>[36] https://www.reddit.com/r/learnpython/comments/pfkj1h/when_should_i_use_private_attributes_in_python/</li> <li>[37] https://profound.academy/python-mid/private-variables-in-classes-km0x40ery3suTthPk3MB</li> <li>[38] https://diveintopython.org/learn/classes/methods</li> <li>[39] https://www.techwithtim.net/tutorials/python-programming/classes-objects-in-python/private-and-public-classes</li> <li>[40] https://softwareengineering.stackexchange.com/questions/452995/should-private-attributes-or-public-attributes-be-the-default-in-python-classes</li> <li>[41] https://stackoverflow.com/questions/55525463/public-and-private-methods-in-python</li> <li>[42] https://stackoverflow.com/questions/46312470/difference-between-methods-and-attributes-in-python</li> <li>[43] https://www.almabetter.com/bytes/tutorials/python/methods-and-attributes-in-python</li> <li>[44] https://www.linkedin.com/pulse/exploring-differences-between-class-methods-static-python</li> <li>[45] https://codeburst.io/python-3-how-to-use-a-instance-non-static-method-as-static-a2cf21bfd5b4</li> <li>[46] https://www.boardinfinity.com/blog/class-and-static-method-in-python-differences/</li> <li>[47] https://www.reddit.com/r/AskProgramming/comments/120mulm/good_example_for_static_vs_nonstatic_methods/</li> <li>[48] https://realpython.com/instance-class-and-static-methods-demystified/</li> <li>[49] https://www.tutorialspoint.com/python/python_constructors.htm</li> <li>[50] https://wiingy.com/learn/python/constructors-in-python/</li> <li>[51] https://codedamn.com/news/python/explaining-constructor-in-python-with-an-example</li> <li>[52] https://www.shiksha.com/online-courses/articles/constructors-in-python-definition-types-and-rules/</li> <li>[53] https://www.youtube.com/watch?v=neVmG4ljQiE</li> <li>[54] https://hostman.com/tutorials/how-to-use-the-str-and-repr-methods-in-python/</li> <li>[55] https://www.python-engineer.com/posts/difference-between-str-and-repr/</li> <li>[56] https://stackoverflow.com/questions/1436703/what-is-the-difference-between-str-and-repr</li> <li>[57] https://www.digitalocean.com/community/tutorials/python-str-repr-functions</li> <li>[58] https://how.dev/answers/what-is-the-difference-between-str-and-repr</li> <li>[59] https://www.reddit.com/r/learnprogramming/comments/dgbnnf/python_whats_the_difference_between_str_and_repr/</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/","title":"3. Single Inheritance","text":"<p>Single inheritance in Python and Java allows a class to inherit properties and methods from a single parent class. However, there are some key differences in how these languages implement single inheritance:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/#python-single-inheritance","title":"Python Single Inheritance","text":"<p>In Python, single inheritance is implemented as follows:</p> <pre><code>class ParentClass:\n\n\n# Parent class attributes and methods\n\nclass ChildClass(ParentClass):\n# Child class attributes and methods\n</code></pre> <p>Key features of Python\u2019s single inheritance:</p> <ol> <li> <p>Syntax simplicity: The child class is defined by specifying the parent class name in parentheses after the child    class name.</p> </li> <li> <p>Dynamic typing: Python\u2019s dynamic typing allows for more flexible attribute and method inheritance.</p> </li> <li> <p>Method resolution: Python uses the Method Resolution Order (MRO) to determine which method to call when there are    methods with the same name in different classes.</p> </li> <li> <p><code>super()</code> function: Used to call methods from the parent class, allowing the child class to extend functionality    rather than completely replacing it.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/#java-single-inheritance","title":"Java Single Inheritance","text":"<p>Java implements single inheritance like this:</p> <pre><code>class ParentClass {\n    // Parent class attributes and methods\n}\n\nclass ChildClass extends ParentClass {\n    // Child class attributes and methods\n}\n</code></pre> <p>Key features of Java\u2019s single inheritance:</p> <ol> <li> <p><code>extends</code> keyword: Java uses the <code>extends</code> keyword to indicate inheritance.</p> </li> <li> <p>Static typing: Java\u2019s static typing system requires explicit type declarations for inherited members.</p> </li> <li> <p>Access modifiers: Java provides strict access control with public, private, and protected modifiers.</p> </li> <li> <p><code>super</code> keyword: Used to call the parent class constructor or methods.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/#comparison","title":"Comparison","text":"<ol> <li> <p>Syntax: Python\u2019s syntax is more concise, while Java\u2019s is more explicit with the <code>extends</code> keyword.</p> </li> <li> <p>Multiple inheritance: Python supports multiple inheritance, while Java only allows single inheritance for classes (    though it supports multiple interface implementation).</p> </li> <li> <p>Type system: Python\u2019s dynamic typing offers more flexibility, while Java\u2019s static typing provides compile-time type    checking.</p> </li> <li> <p>Method overriding: Both languages support method overriding, but Python uses the <code>super()</code> function while Java uses    the <code>super</code> keyword.</p> </li> <li> <p>Constructor chaining: In Python, you explicitly call the parent constructor using <code>super().__init__()</code>, while in    Java, the parent constructor is implicitly called unless specified otherwise.</p> </li> <li> <p>Access control: Java has stricter access control with explicit modifiers, while Python uses naming conventions (e.g.,    underscores for private members).</p> </li> </ol> <p>In both languages, single inheritance promotes code reuse and allows for the creation of hierarchical relationships between classes. However, Python\u2019s implementation is generally more flexible and concise, while Java\u2019s offers more structure and compile-time safety.</p> References <ul> <li>[1] https://www.scientecheasy.com/2023/09/single-inheritance-in-python.html/</li> <li>[2] https://www.scholarhat.com/tutorial/java/single-inheritance-in-java</li> <li>[3] https://beginnersbook.com/2013/05/java-inheritance-types/</li> <li>[4] https://www.shiksha.com/online-courses/articles/single-inheritance-in-java-blogId-159513</li> <li>[5] https://geekpython.in/class-inheritance-in-python</li> <li>[6] https://www.geekster.in/articles/java-inheritance/</li> <li>[7] https://www.tutorialspoint.com/java/java_inheritance.htm</li> <li>[8] https://www.simplilearn.com/tutorials/java-tutorial/inheritence-in-java</li> <li>[9] https://www.wscubetech.com/resources/python/inheritance</li> <li>[10] https://realpython.com/inheritance-composition-python/</li> <li>[11] https://labex.io/tutorials/python-how-to-use-single-inheritance-in-python-398272</li> <li>[12] https://www.codechef.com/learn/course/oops-concepts-in-python/CPOPPY03/problems/ADVPPY25</li> <li>[13] https://www.tutorialspoint.com/python/python_inheritance.htm</li> <li>[14] https://www.w3schools.com/python/python_inheritance.asp</li> <li>[15] https://www.linkedin.com/pulse/in-depth-exploration-inheritance-java-nitin-singh</li> <li>[16] https://www.tpointtech.com/inheritance-in-java</li> <li>[17] https://www.ccbp.in/blog/articles/single-inheritance-in-java</li> <li>[18] https://www.w3schools.com/java/java_inheritance.asp</li> <li>[19] https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html</li> <li>[20] https://www.studysmarter.co.uk/explanations/computer-science/computer-programming/java-inheritance/</li> <li>[21] https://files.codingninjas.in/article_images/single-inheritance-in-java-17217.webp?sa=X&amp;ved=2ahUKEwiQs_Pug72MAxXqma8BHTQQClAQ_B16BAgBEAI</li> <li>[22] https://www.scaler.com/topics/python/inheritance-in-python/</li> <li>[23] https://www.tutorjoes.in/python_programming_tutorial/single_inheritance_in_python</li> <li>[24] https://www.datacamp.com/tutorial/python-inheritance</li> <li>[25] https://www.scholarhat.com/tutorial/python/inheritance-in-python</li> <li>[26] https://www.programiz.com/python-programming/inheritance</li> <li>[27] https://wiingy.com/learn/python/inheritance-in-python/</li> <li>[28] https://www.programiz.com/java-programming/inheritance</li> <li>[29] https://timespro.com/blog/inheritance-in-java-understand-with-examples</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/","title":"4. Polymorphism","text":"<p>Polymorphism in Python operates quite differently from Java, primarily due to Python\u2019s dynamic typing system and its emphasis on behavior over explicit type declarations.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#polymorphism-in-python","title":"Polymorphism in Python","text":"<p>Polymorphism in Python is the ability of different objects to respond to the same method or function call in different ways. Python implements polymorphism through several mechanisms:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#duck-typing","title":"Duck Typing","text":"<p>Python\u2019s most distinctive approach to polymorphism is duck typing, which follows the principle: \u201cIf it walks like a  duck and quacks like a duck, then it must be a duck.\u201d This means Python focuses on an object\u2019s behavior (methods and attributes) rather than its specific type[4][7].</p> <p>For example:</p> <pre><code>def make_it_sound(obj):\n    obj.sound()\n\n\nclass Duck:\n    def sound(self):\n        print(\"Quack!\")\n\n\nclass Person:\n    def sound(self):\n        print(\"I'm quacking like a duck!\")\n\n\n# Both objects work with the same function\nduck = Duck()\nperson = Person()\nmake_it_sound(duck)  # Output: Quack!\nmake_it_sound(person)  # Output: I'm quacking like a duck!\n</code></pre> <p>The <code>make_it_sound</code> function doesn\u2019t care about the object\u2019s type; it only cares that the object has a <code>sound()</code> method[4].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#function-polymorphism","title":"Function Polymorphism","text":"<p>Python\u2019s built-in functions often exhibit polymorphic behavior. The <code>len()</code> function is a prime example:</p> <pre><code>print(len(\"Hello\"))  # 5 (string)\nprint(len([1, 2, 3, 4]))  # 4 (list)\nprint(len({\"a\": 1, \"b\": 2}))  # 2 (dictionary)\n</code></pre> <p>The same function behaves differently based on the input type[2].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#operator-overloading","title":"Operator Overloading","text":"<p>Python supports operator overloading through special methods like <code>__add__</code>, <code>__mul__</code>, etc.:</p> <pre><code># + operator with integers\na = 10 + 15  # 25\n\n# + operator with strings\nb = 'A' + 'B'  # 'AB'\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#polymorphism-in-java-vs-python","title":"Polymorphism in Java vs. Python","text":"<p>The key differences in how polymorphism works in these languages include:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#method-overloading","title":"Method Overloading","text":"<p>Java supports compile-time (static) polymorphism through method overloading:</p> <pre><code>public static int add(int a, int b) {\n    return a + b;\n}\n\npublic static int add(int a, int b, int c) {\n    return a + b + c;\n}\n</code></pre> <p>Python doesn\u2019t support true method overloading. When you define multiple methods with the same name, only the last one is considered[5]. Instead, Python typically uses default parameters:</p> <pre><code>def add(a, b, c=None):\n    if c is None:\n        return a + b\n    else:\n        return a + b + c\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#type-checking","title":"Type Checking","text":"<p>Java implements polymorphism through strict inheritance hierarchies and interfaces. It relies on static typing and type checking at compile time.</p> <p>Python uses duck typing, focusing on what an object can do rather than what it is. It doesn\u2019t require explicit inheritance relationships for polymorphic behavior[3][6].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#implementation-approach","title":"Implementation Approach","text":"<p>Java\u2019s polymorphism is explicit and requires formal class relationships:</p> <pre><code>@Override\npublic void makeSound() {\n    System.out.println(\"Dog barks\");\n}\n</code></pre> <p>Python\u2019s polymorphism is implicit and more flexible:</p> <pre><code>class Bird:\n    def fly(self):\n        pass\n\n\nclass Airplane:\n    def fly(self):\n        print(\"Airplane flies\")\n\n\n# Both can be used interchangeably despite no inheritance relationship\ndef perform_flight(flying_object):\n    flying_object.fly()\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#duck-typing-in-detail","title":"Duck Typing in Detail","text":"<p>Duck typing is a core concept in Python that emphasizes an object\u2019s behavior over its type. The principle states that \u201d if it walks like a duck and quacks like a duck, then it must be a duck\u201d[4][6][7].</p> <p>This approach offers several advantages:</p> <ul> <li>Creates more flexible and reusable code</li> <li>Supports polymorphism without rigid type hierarchies</li> <li>Results in simpler, more concise code</li> </ul> <p>However, it also has disadvantages:</p> <ul> <li>Can lead to runtime errors if expected methods are missing</li> <li>May make code harder to understand without type hints</li> </ul> <p>Duck typing is particularly powerful when creating generic functions that can work with any object that implements a specific interface:</p> <pre><code>class Duck:\n    def quack(self):\n        print(\"Quack!\")\n\n\nclass Car:\n    def quack(self):\n        print(\"I can quack, too!\")\n\n\ndef quacks(obj):\n    obj.quack()\n\n\n# Both work despite being completely different classes\nquacks(Duck(\"Donald\"))\nquacks(Car(\"Tesla\"))\n</code></pre> <p>This flexibility is a fundamental aspect of Python\u2019s design philosophy, allowing developers to focus more on what objects can do rather than what they are.</p> References <ul> <li>[1] https://codedamn.com/news/python/polymorphism-in-python-with-an-example</li> <li>[2] https://www.almabetter.com/bytes/tutorials/python/python-inheritance-and-polymorphism</li> <li>[3] https://www.datacamp.com/blog/python-vs-java</li> <li>[4] https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing</li> <li>[5] https://stackoverflow.com/questions/61138173/polymorphism-in-python-vs-polymorphism-in-java</li> <li>[6] https://builtin.com/articles/python-duck-typing</li> <li>[7] https://realpython.com/duck-typing-python/</li> <li>[8] https://realpython.com/python3-object-oriented-programming/</li> <li>[9] https://www.reddit.com/r/learnpython/comments/13sdpoq/anyone_have_a_solid_understanding_in_polymorphism/</li> <li>[10] https://www.youtube.com/watch?v=tHN8I_4FIt8</li> <li>[11] https://www.w3schools.com/python/python_polymorphism.asp</li> <li>[12] https://herovired.com/learning-hub/blogs/java-vs-python/</li> <li>[13] https://www.reddit.com/r/javahelp/comments/13qow9l/are_javas_oop_concepts_much_different_than_pythons/</li> <li>[14] https://edbennett.github.io/python-oop-novice/06-duck/index.html</li> <li>[15] https://en.wikipedia.org/wiki/Duck_typing</li> <li>[16] https://stackoverflow.com/questions/4205130/what-is-duck-typing</li> <li>[17] https://www.reddit.com/r/learnpython/comments/14p49ua/confusion_about_duck_typing/</li> <li>[18] https://www.youtube.com/watch?v=rIWQ4584Uqk</li> <li>[19] https://www.simplilearn.com/polymorphism-in-python-article</li> <li>[20] https://www.edureka.co/blog/polymorphism-in-python/</li> <li>[21] https://www.programiz.com/python-programming/polymorphism</li> <li>[22] https://discuss.python.org/t/polymorphism-in-python/25178</li> <li>[23] https://www.activestate.com/blog/java-versus-python-key-programming-differences-in-2021/</li> <li>[24] https://www.rose-hulman.edu/class/cs/csse220/201130/Resources/Python_vs_Java.html</li> <li>[25] https://realpython.com/oop-in-python-vs-java/</li> <li>[26] https://www.youtube.com/watch?v=Qe03kCuTMoU</li> <li>[27] https://ioflood.com/blog/duck-typing/</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/","title":"5. Multiple Inheritance","text":"<p>Multiple inheritance in Python is a powerful feature that allows a class to inherit attributes and methods from more than one parent class. This is a significant difference from Java, which only supports single inheritance for classes (though Java does allow implementing multiple interfaces).</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#how-multiple-inheritance-works-in-python","title":"How Multiple Inheritance Works in Python","text":"<p>In Python, multiple inheritance is implemented by listing all parent classes in the class definition, separated by commas:</p> <pre><code>class Parent1:\n    def method1(self):\n        print(\"Method from Parent1\")\n\n\nclass Parent2:\n    def method2(self):\n        print(\"Method from Parent2\")\n\n\nclass Child(Parent1, Parent2):\n    pass\n\n\n# Creating an instance\nchild = Child()\nchild.method1()  # Output: Method from Parent1\nchild.method2()  # Output: Method from Parent2\n</code></pre> <p>In this example, the <code>Child</code> class inherits methods from both <code>Parent1</code> and <code>Parent2</code>, allowing it to use both <code>method1()</code> and <code>method2()</code>.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#practical-example-the-mythical-unicorn","title":"Practical Example: The Mythical Unicorn","text":"<p>Let\u2019s consider a more concrete example using a mythical creature:</p> <pre><code>class Horse:\n    def __init__(self, name):\n        self.name = name\n\n    def run(self):\n        return f\"{self.name} is running.\"\n\n    def eat_hay(self):\n        return f\"{self.name} is eating hay.\"\n\n\nclass Narwhal:\n    def swim(self):\n        return f\"{self.name} is swimming.\"\n\n    def has_horn(self):\n        return True\n\n\nclass Unicorn(Horse, Narwhal):\n    def magic_powers(self):\n        return f\"{self.name} is using magical powers!\"\n</code></pre> <p>Here, <code>Unicorn</code> inherits characteristics from both <code>Horse</code> (running, eating hay) and <code>Narwhal</code> (swimming, having a horn), plus adds its own unique ability.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#method-resolution-order-mro","title":"Method Resolution Order (MRO)","text":"<p>When a method is called on an instance, Python needs to determine which implementation to use, especially if multiple parent classes define the same method. Python uses the C3 linearization algorithm to establish a Method Resolution Order (MRO):</p> <pre><code>class A:\n    def greet(self):\n        return \"Hello from A\"\n\n\nclass B:\n    def greet(self):\n        return \"Hello from B\"\n\n\nclass C(A, B):\n    pass\n\n\nc = C()\nprint(c.greet())  # Output: Hello from A\nprint(C.__mro__)  # Shows the method resolution order\n</code></pre> <p>The method from the first parent class in the inheritance list (<code>A</code> in this case) is used.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#advantages-of-multiple-inheritance","title":"Advantages of Multiple Inheritance","text":"<ol> <li> <p>Code Reusability: Allows combining functionalities from different classes, reducing code duplication.</p> </li> <li> <p>Flexibility in Class Design: Enables creating complex class structures by inheriting from multiple base classes.</p> </li> <li> <p>Modularity: Supports creating mixins (specialized classes providing specific functionality) that can be combined    with various classes.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#disadvantages-of-multiple-inheritance","title":"Disadvantages of Multiple Inheritance","text":"<ol> <li> <p>Ambiguity and Name Clashes: When multiple parent classes define methods with the same name, it can lead to    confusion.</p> </li> <li> <p>Complexity and Maintenance: As the inheritance hierarchy grows, understanding and maintaining the relationships    between classes becomes more challenging.</p> </li> <li> <p>Diamond Problem: When a class inherits from two classes that have a common ancestor, ambiguity can arise about    which implementation to use.</p> </li> <li> <p>Tight Coupling: Changes in one base class may have unintended effects on derived classes.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#the-diamond-problem","title":"The Diamond Problem","text":"<p>The diamond problem is a specific challenge in multiple inheritance:</p> <pre><code>class A:\n    def method(self):\n        print(\"Method from A\")\n\n\nclass B(A):\n    def method(self):\n        print(\"Method from B\")\n\n\nclass C(A):\n    def method(self):\n        print(\"Method from C\")\n\n\nclass D(B, C):\n    pass\n\n\nd = D()\nd.method()  # Which method gets called?\n</code></pre> <p>Python\u2019s MRO resolves this by following a specific order, but it\u2019s still a complexity to be aware of.</p> <p>Multiple inheritance is a powerful tool in Python, but it should be used judiciously. When used appropriately, it can lead to elegant, modular code. When overused, it can create maintenance challenges.</p> References <ul> <li>[1] https://dev.to/gayathridevi_manojkumar_d/understanding-multiple-inheritance-in-python-and-java-1ig</li> <li>[2] https://realpython.com/lessons/multiple-inheritance-python/</li> <li>[3] https://www.digitalocean.com/community/tutorials/understanding-class-inheritance-in-python-3</li> <li>[4] https://www.scientecheasy.com/2023/09/multiple-inheritance-in-python.html/</li> <li>[5] https://blog.stackademic.com/python-classes-and-the-power-of-multiple-inheritance-5a551e124603</li> <li>[6] https://python.plainenglish.io/multiple-inheritance-in-python-a-basic-guide-with-examples-124ee08e7f62</li> <li>[7] https://python-course.eu/oop/multiple-inheritance.php</li> <li>[8] https://www.programiz.com/python-programming/multiple-inheritance</li> <li>[9] https://pythonflood.com/python-multiple-inheritance-concept-of-mixins-39897e1fe363</li> <li>[10] https://realpython.com/oop-in-python-vs-java/</li> <li>[11] https://softwareengineering.stackexchange.com/questions/100993/multiple-inheritance-use-cases</li> <li>[12] https://en.wikipedia.org/wiki/Multiple_inheritance</li> <li>[13] https://stackoverflow.com/questions/3277367/how-does-pythons-super-work-with-multiple-inheritance</li> <li>[14] https://stackoverflow.com/questions/7371765/overview-of-differences-between-inheritance-in-python-and-java</li> <li>[15] https://www.youtube.com/watch?v=1-JBFJ8Xar0</li> <li>[16] https://docs.python.org/3/tutorial/classes.html</li> <li>[17] https://softwareengineering.stackexchange.com/questions/441290/what-is-the-use-of-multiple-inheritance-in-languages-like-c-and-python</li> <li>[18] https://realpython.com/inheritance-composition-python/</li> <li>[19] https://www.w3schools.com/python/python_inheritance.asp</li> <li>[20] https://coderanch.com/t/776418/languages/multiple-inheritance-Python-diamond-Java</li> <li>[21] https://www.datacamp.com/tutorial/python-inheritance</li> <li>[22] https://stackoverflow.com/questions/31478542/when-does-multiple-inheritance-come-in-handy</li> <li>[23] https://www.youtube.com/watch?v=Q8YlYHjksLo</li> <li>[24] https://www.reddit.com/r/learnpython/comments/j3ji6h/is_inheritance_really_bad_practice/</li> <li>[25] https://www.krayonnz.com/user/doubts/detail/61cecb93cecf1c00406d04b3/what-are-the-advantages-and-disadvantages-of-multiple-inheritance</li> <li>[26] https://stackoverflow.com/questions/766441/what-are-the-pros-and-cons-of-having-multiple-inheritance</li> <li>[27] https://stackoverflow.com/questions/66038465/multiple-inheritance-python-issue</li> <li>[28] https://30dayscoding.com/blog/advantages-and-disadvantages-of-inheritance</li> <li>[29] https://www.datacamp.com/tutorial/super-multiple-inheritance-diamond-problem</li> <li>[30] https://trainings.internshala.com/blog/python-inheritance/</li> <li>[31] https://softwareengineering.stackexchange.com/questions/218458/is-there-any-real-reason-multiple-inheritance-is-hated</li> <li>[32] https://d3kfrrhrj36vzx.cloudfront.net/images/1647972785374_xtwhyoqe.jpg?sa=X&amp;ved=2ahUKEwjAt9auhr2MAxXhdPUHHS99OoYQ_B16BAgMEAI</li> <li>[33] https://www.digitalocean.com/community/tutorials/multiple-inheritance-in-java</li> <li>[34] https://www.scaler.com/topics/multiple-inheritance-in-python/</li> <li>[35] https://how.dev/answers/what-is-multiple-inheritance-in-python</li> <li>[36] https://towardsai.net/p/l/python-inheritance-common-practices-and-pitfalls-diamond-problem-mixins-and-others</li> <li>[37] https://data-flair.training/blogs/python-multiple-inheritance/</li> <li>[38] https://openstax.org/books/introduction-python-programming/pages/13-5-multiple-inheritance-and-mixin-classes</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#how-super-works-with-multiple-inheritance-in-python","title":"How <code>super()</code> Works with Multiple Inheritance in Python","text":"<p>When a Python class inherits from two or more classes, the behavior of <code>super()</code> is determined by the method resolution order (MRO), as discussed above.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#which-class-does-super-refer-to","title":"Which Class Does <code>super()</code> Refer To?","text":"<p>In a class that inherits from multiple parent classes, <code>super()</code> refers to the next class in the MRO, not necessarily the first parent listed in the class definition. For example:</p> <pre><code>class A:\n    def __init__(self):\n        print(\"A initialized\")\n\n\nclass B:\n    def __init__(self):\n        print(\"B initialized\")\n\n\nclass C(A, B):\n    def __init__(self):\n        super().__init__()\n        print(\"Child initialized\")\n\n\nchild = C()\n</code></pre> <p>Output:</p> <pre><code>A initialized\nC initialized\n</code></pre> <p>Here, <code>super().__init__()</code> in <code>Child</code> calls <code>A.__init__()</code> because <code>A</code> is the next class in the MRO after <code>C</code>[5][6]. The MRO for <code>C</code> is <code>[C, A, B, object]</code>.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#how-to-refer-to-the-other-parent-class","title":"How to Refer to the Other Parent Class?","text":"<p>If you want to explicitly call a method from a specific parent class (not just the next in the MRO), you can do so by directly referencing the class:</p> <pre><code>class C(A, B):\n    def __init__(self):\n        super().__init__()  # Calls A.__init__()\n        B.__init__(self)  # Explicitly calls B.__init__()\n        print(\"C initialized\")\n</code></pre> <p>This way, both parent initializers are called, but be cautious-if both parent classes call <code>super()</code>, you may end up calling the same method multiple times, depending on the MRO and class design[1][5].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#advanced-use-customizing-super","title":"Advanced Use: Customizing <code>super()</code>","text":"<p>You can also customize where <code>super()</code> starts its search by passing arguments:</p> <pre><code>super(B, self).__init__()\n</code></pre> <p>This tells Python to start looking for the method after <code>Parent2</code> in the MRO of <code>self</code>[7]. This is rarely needed in typical class designs, but it can be useful in advanced multiple inheritance scenarios.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#summary-table","title":"Summary Table","text":"Scenario What <code>super()</code> Calls How to Call the Other Parent Multiple inheritance <code>C(A, B)</code> Next class in MRO after current Explicitly: <code>B.method(self, ...)</code> Customizing <code>super()</code> After specified class in MRO Use <code>super(C, self).method()</code>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#key-points","title":"Key Points","text":"<ul> <li><code>super()</code> always refers to the next class in the MRO, not necessarily the first parent in the class definition[6][5].</li> <li>To call a specific parent class\u2019s method, use the parent class name directly.</li> <li>Be careful with multiple inheritance and <code>super()</code> to avoid duplicate calls or missed initializations.</li> </ul> <p>For most cases, stick to using <code>super()</code> consistently and design your classes to cooperate with it, especially when building frameworks or mixins[6][7].</p> References <ul> <li>[1] https://stackoverflow.com/questions/3277367/how-does-pythons-super-work-with-multiple-inheritance</li> <li>[2] https://docs.vultr.com/python/built-in/super</li> <li>[3] https://www.datacamp.com/tutorial/super-multiple-inheritance-diamond-problem</li> <li>[4] https://www.digitalocean.com/community/tutorials/python-super</li> <li>[5] https://www.geeksforgeeks.org/python-multiple-inheritance-with-super-function/</li> <li>[6] https://realpython.com/lessons/multiple-inheritance-python/</li> <li>[7] https://realpython.com/python-super/</li> <li>[8] https://www.programiz.com/python-programming/multiple-inheritance</li> <li>[9] https://www.geeksforgeeks.org/multiple-inheritance-in-python/</li> <li>[10] https://www.sololearn.com/en/Discuss/1934244/super-with-multiple-inheritance</li> <li>[11] https://www.reddit.com/r/learnpython/comments/z9e00j/what_is_the_point_of_the_super_function_in_python/</li> <li>[12] https://aviadr1.github.io/learn-advanced-python/06_multiple_inheritance_and_super/multiple_inheritance_and_super.html</li> <li>[13] https://stackoverflow.com/questions/14206015/pythons-multiple-inheritance-picking-which-super-to-call</li> <li>[14] https://www.youtube.com/watch?v=PA3Lnkqz1Ww</li> <li>[15] https://blog.hubspot.com/website/python-super</li> <li>[16] https://www.w3schools.com/python/python_inheritance.asp</li> <li>[17] https://discuss.python.org/t/make-super-work-in-a-class-definition/48845</li> <li>[18] https://www.reddit.com/r/learnpython/comments/ndyce5/a_question_about_super_and_multiple_inheritance/</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#example-with-the-diamond-problem","title":"Example with the diamond problem","text":"<pre><code>class Alpha:\n    def __init__(self):\n        print(\"Alpha initialized\")\n\n\nclass A(Alpha):\n    def __init__(self):\n        super().__init__()\n        print(\"A initialized\")\n\n\nclass B(Alpha):\n    def __init__(self):\n        super().__init__()\n        print(\"B initialized\")\n\n\nclass C(A, B):\n    def __init__(self):\n        super().__init__()  # Calls A.__init__()\n        B.__init__(self)  # Explicitly calls B.__init__()\n        print(\"C initialized\")\n\n\nchild = C()\nprint(C.__mro__)\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#output","title":"Output","text":"<pre><code>Alpha initialized\nB initialized\nA initialized\nAlpha initialized\nB initialized\nC initialized\n(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.Alpha'&gt;, &lt;class 'object'&gt;)\n</code></pre> <p>Why do we get multiple calls to the exact same <code>__init__</code> methods ?</p> <p>Let\u2019s break down why this happens step-by-step:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#key-explanation","title":"Key Explanation","text":"<p>The output occurs because of two factors:</p> <ol> <li>Method Resolution Order (MRO) in multiple inheritance</li> <li>Explicit call to <code>B.__init__</code> in class <code>C</code></li> </ol> <p>Here\u2019s how the code executes:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#execution-flow","title":"Execution Flow","text":"<ol> <li><code>C()</code> is created \u2192 Calls <code>C.__init__</code></li> <li><code>super().__init__()</code> in <code>C</code> \u2192 Follows MRO to call <code>A.__init__</code></li> <li><code>A.__init__</code> runs:<ul> <li><code>super().__init__()</code> \u2192 Next in MRO is <code>B</code> (not <code>Alpha</code>!), so <code>B.__init__</code> runs</li> <li><code>B.__init__</code> \u2192 <code>super().__init__()</code> calls <code>Alpha.__init__</code> (prints \u201cAlpha initialized\u201d)</li> <li><code>B.__init__</code> completes (prints \u201cB initialized\u201d)</li> <li>Back to <code>A.__init__</code> (prints \u201cA initialized\u201d)</li> </ul> </li> <li>Explicit <code>B.__init__(self)</code> in <code>C</code> \u2192 Directly calls <code>B.__init__</code> again:<ul> <li><code>super().__init__()</code> \u2192 Calls <code>Alpha.__init__</code> again (prints \u201cAlpha initialized\u201d)</li> <li><code>B.__init__</code> completes again (prints \u201cB initialized\u201d)</li> </ul> </li> <li><code>C.__init__</code> finishes (prints \u201cC initialized\u201d)</li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#why-mro-matters","title":"Why MRO Matters","text":"<p>The MRO for <code>C</code> is <code>C \u2192 A \u2192 B \u2192 Alpha \u2192 object</code> (visible in the output). This means:</p> <ul> <li>When <code>super()</code> is called in <code>A</code>, it looks for the next class in the MRO chain (<code>B</code>), not <code>A</code>\u2019s direct parent (   <code>Alpha</code>).</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#why-alpha-appears-twice","title":"Why \u201cAlpha\u201d Appears Twice?","text":"<ol> <li>First \u201cAlpha\u201d comes from the <code>A \u2192 B \u2192 Alpha</code> chain via <code>super()</code> in <code>C</code></li> <li>Second \u201cAlpha\u201d comes from the explicit <code>B.__init__</code> call in <code>C</code>, which triggers <code>B \u2192 Alpha</code> again</li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#how-to-fix-this-if-needed","title":"How to Fix This (If Needed)","text":"<p>If you want to avoid duplicate initializations:</p> <pre><code>class C(A, B):\n    def __init__(self):\n        # Let MRO handle all parent initializations\n        super().__init__()  # Follows C\u2192A\u2192B\u2192Alpha chain\n        print(\"C initialized\")\n</code></pre> <p>Output with this fix:</p> <pre><code>Alpha initialized\nB initialized\nA initialized\nC initialized\n(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.Alpha'&gt;, &lt;class 'object'&gt;) \n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>MRO determines <code>super()</code> behavior, not just parent classes</li> <li>Explicit parent calls (<code>B.__init__</code>) bypass MRO and can cause duplicates</li> <li>Consistent <code>super()</code> usage is safer in complex inheritance</li> </ol> <p>Don\u2019t forget to run <code>print(C.__mro__)</code> to see the exact method resolution order.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate   explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the   author.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/06-abc/","title":"6. Abstract Base Classes (ABC)","text":"<p>ABC in Python stands for Abstract Base Class, which is a class that cannot be instantiated on its own and serves as a blueprint for other classes. ABCs are designed to define a common interface for a group of related classes, ensuring that derived classes implement particular methods from the base class.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/06-abc/#using-abcs-in-python","title":"Using ABCs in Python","text":"<p>To create an abstract base class in Python, you need to:</p> <ol> <li> <p>Import the necessary components from the <code>abc</code> module:    <pre><code>from abc import ABC, abstractmethod\n</code></pre></p> </li> <li> <p>Create a class that inherits from <code>ABC</code>:    <pre><code>class Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n    @abstractmethod\n    def perimeter(self):\n        pass\n</code></pre></p> </li> <li> <p>Use the <code>@abstractmethod</code> decorator to mark methods that must be implemented by subclasses.</p> </li> </ol> <p>Attempting to instantiate an abstract class or a subclass that hasn\u2019t implemented all abstract methods will raise a <code>TypeError</code>.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/06-abc/#abcs-with-single-inheritance","title":"ABCs with Single Inheritance","text":"<p>In single inheritance, a class inherits from one abstract base class:</p> <pre><code>class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14159 * self.radius ** 2\n\n    def perimeter(self):\n        return 2 * 3.14159 * self.radius\n</code></pre> <p>The concrete class <code>Circle</code> must implement all abstract methods defined in the <code>Shape</code> ABC. If any abstract method is not implemented, Python will raise a <code>TypeError</code> when you try to instantiate the class.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/06-abc/#abcs-with-multiple-inheritance","title":"ABCs with Multiple Inheritance","text":"<p>Python supports multiple inheritance, allowing a class to inherit from multiple parent classes, including abstract base classes:</p> <pre><code>class Drawable(ABC):\n    @abstractmethod\n    def draw(self):\n        pass\n\n\nclass Printable(ABC):\n    @abstractmethod\n    def print_info(self):\n        pass\n\n\nclass Square(Shape, Drawable):\n    def __init__(self, side):\n        self.side = side\n\n    def area(self):\n        return self.side ** 2\n\n    def perimeter(self):\n        return 4 * self.side\n\n    def draw(self):\n        print(\"Drawing a square\")\n</code></pre> <p>When using multiple inheritance with ABCs:</p> <ol> <li>The derived class must implement all abstract methods from all parent ABCs.</li> <li>Python uses Method Resolution Order (MRO) to determine which method to call when there are methods with the same name    in different parent classes.</li> <li>You can check the MRO using <code>ClassName.__mro__</code> or <code>ClassName.mro()</code>.</li> </ol> <p>ABCs are particularly useful for:</p> <ul> <li>Enforcing that derived classes implement particular methods</li> <li>Designing frameworks or libraries where specific behavior needs to be enforced</li> <li>Implementing consistent APIs across classes</li> <li>Providing a foundational framework for a class hierarchy</li> </ul> <p>Remember that ABCs are meant to be inherited from, not instantiated directly, making them an excellent tool for defining interfaces and ensuring consistent implementation across related classes.</p> References <ul> <li>[1] https://realpython.com/ref/glossary/abstract-base-class/</li> <li>[2] https://dbader.org/blog/abstract-base-classes-in-python</li> <li>[3] https://realpython.com/inheritance-composition-python/</li> <li>[4] https://www.scholarhat.com/tutorial/python/inheritance-in-python</li> <li>[5] https://edube.org/learn/python-advanced-1/abstract-classes-vs-method-overriding-multiple-inheritance</li> <li>[6] https://www.programiz.com/python-programming/multiple-inheritance</li> <li>[7] https://www.digitalocean.com/community/tutorials/understanding-class-inheritance-in-python-3</li> <li>[8] https://www.datacamp.com/tutorial/python-abstract-classes</li> <li>[9] https://www.datacamp.com/tutorial/python-inheritance</li> <li>[10] https://realpython.com/lessons/multiple-inheritance-python/</li> <li>[11] https://30dayscoding.com/blog/abc-import-abc-abstractmethod-python</li> <li>[12] https://geekpython.in/abc-in-python</li> <li>[13] https://www.youtube.com/watch?v=97V7ICVeTJc</li> <li>[14] https://stackoverflow.com/questions/3570796/why-use-abstract-base-classes-in-python</li> <li>[15] https://blog.teclado.com/python-abc-abstract-base-classes/</li> <li>[16] https://www.youtube.com/watch?v=kaZceE16m5A</li> <li>[17] https://python-course.eu/oop/the-abc-of-abstract-base-classes.php</li> <li>[18] https://docs.python.org/3/library/collections.abc.html</li> <li>[19] https://stackoverflow.com/questions/76283254/inheriting-from-an-abstract-class-and-defining-an-abstract-method-to-be-an-exist</li> <li>[20] https://softwareengineering.stackexchange.com/questions/445327/abstract-base-classes-and-mix-ins-in-python</li> <li>[21] https://www.w3schools.com/python/python_inheritance.asp</li> <li>[22] https://python.plainenglish.io/python-tutorial-21-python-inheritance-single-multiple-multilevel-5eca0f4ae257</li> <li>[23] https://docs.python.org/3/tutorial/classes.html</li> <li>[24] https://stackoverflow.com/questions/28799089/python-abc-multiple-inheritance</li> <li>[25] https://docs.python.org/3/library/abc.html</li> <li>[26] https://pybit.es/articles/elevate-your-python-harnessing-the-power-of-abstract-base-classes-abcs/</li> <li>[27] https://earthly.dev/blog/abstract-base-classes-python/</li> <li>[28] https://dev.to/dollardhingra/understanding-the-abstract-base-class-in-python-k7h</li> <li>[29] https://stackoverflow.com/questions/56008847/when-should-one-inherit-from-abc</li> <li>[30] https://www.cs.unb.ca/~bremner/teaching/cs2613/books/python3-doc/library/abc.html</li> <li>[31] https://www.youtube.com/watch?v=mRIeUXhIAxg</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"2.%20PyQt/01-getting-started/","title":"1. Getting Started","text":""},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/","title":"1. Hello World!","text":""},{"location":"2.%20PyQt/B.%20Signals/01-button-click/","title":"1. Button Click","text":""},{"location":"2.%20PyQt/C.%20Architecture/01-overview/","title":"1. Overview","text":""},{"location":"2.%20PyQt/D.%20Background%20Tasks/01-responsive/","title":"1. Responsive","text":""},{"location":"3.%20Managing%20Data/A.%20Files/01-overview/","title":"1. Overview","text":""},{"location":"3.%20Managing%20Data/B.%20Localization/01-overview/","title":"1. Overview","text":""},{"location":"3.%20Managing%20Data/C.%20External%20Data%20Sources/01-overview/","title":"1. Overview","text":""},{"location":"3.%20Managing%20Data/D.%20Graphics/01-overview/","title":"1. Overview","text":""}]}