{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Application Development 1","text":"<p>Author : Denis Rinfret</p>"},{"location":"#ressources","title":"Ressources","text":"<ol> <li>Python Documentation</li> <li>Github repo for these lecture notes</li> </ol>"},{"location":"#software","title":"Software","text":"<ol> <li>Python<ul> <li>Download and install the latest stable version available</li> </ul> </li> <li>PyCharm Professional Edition<ul> <li>It is recommended to download and install the professional version,</li> <li>and apply for a Jetbrains education account.</li> <li>The facilitate installing and updating Jetbrains application, you can install the   Toolbox application</li> </ul> </li> </ol>"},{"location":"#other-resources","title":"Other resources","text":"<p>For students with prior Java OOP experience and web development knowledge, here are targeted Python tutorials:</p>"},{"location":"#comprehensive-courses","title":"Comprehensive Courses","text":"<ul> <li> <p>From Java to Python OOP: Bridge the Gap for Java Developers - LinkedIn Learning course by Deepa Muralidhar specifically designed for Java developers transitioning to Python OOP (1h7m)[1]</p> </li> <li> <p>Python Crash Course for Java Developers - GitHub   repository by blu3r4y with interactive Jupyter notebooks and   slides specifically for Java developers[3]</p> </li> </ul>"},{"location":"#oop-focused-resources","title":"OOP-Focused Resources","text":"<ul> <li> <p>Python OOP Tutorial by Tech With Tim - YouTube video series   covering everything beginners need to know about   classes and objects in Python[11]</p> </li> <li> <p>Python\u2019s Official Tutorial: Classes - Refined documentation on   Python\u2019s OOP implementation from Python.org[10]</p> </li> </ul>"},{"location":"#practice-platforms","title":"Practice Platforms","text":"<ul> <li> <p>Exercism\u2019s Python Track - 17 concept modules and 140 exercises with   optional mentoring from experienced   programmers[5]</p> </li> <li> <p>LeetCode - Popular platform with algorithm challenges and interview questions   that can be solved in Python[5]</p> </li> </ul>"},{"location":"#design-patterns-advanced-concepts","title":"Design Patterns &amp; Advanced Concepts","text":"<ul> <li> <p>Python-Patterns Repository - GitHub collection of common OOP design   patterns implemented in Python[10]</p> </li> <li> <p>Python Design Patterns - Tutorial explaining how classic   design patterns are implemented in Python, often more   simply than in Java[10]</p> </li> <li> <p>DataCamp\u2019s Python OOP Tutorial - Explains OOP concepts   with practical examples including a finance application   case study[2]</p> </li> </ul> <p>These resources focus on bridging the gap between Java and Python, emphasizing the differences in OOP implementation while building on existing programming knowledge.</p> References <ul> <li>[1] https://www.linkedin.com/learning/from-java-to-python-oop-bridge-the-gap-for-java-developers</li> <li>[2] https://www.datacamp.com/tutorial/python-oop-tutorial</li> <li>[3] https://github.com/blu3r4y/python-for-java-developers</li> <li>[5] https://www.kdnuggets.com/7-best-platforms-to-practice-python</li> <li>[6] https://realpython.com/learning-paths/object-oriented-programming-oop-python/</li> <li>[7] https://realpython.com/python3-object-oriented-programming/</li> <li>[8] https://www.datacamp.com/category/python</li> <li>[9] https://www.bitdegree.org/tutorials/best-place-to-learn-python</li> <li>[10] https://snaye.hashnode.dev/object-oriented-programming-in-python-the-best-resources</li> <li>[11] https://www.youtube.com/watch?v=JeznW_7DlB0</li> <li>[12] https://www.reddit.com/r/learnpython/comments/xlxsw2/complete_beginner_looking_for_interactive_site_to/</li> <li>[13] https://www.w3schools.com/python/python_classes.asp</li> <li>[14] https://www.youtube.com/watch?v=Ej_02ICOIgs</li> <li>[15] https://www.programiz.com/python-programming/object-oriented-programming</li> <li>[16] https://www.reddit.com/r/learnpython/comments/s3a25c/any_good_resources_for_an_experienced_java/</li> <li>[17] https://www.reddit.com/r/learnprogramming/comments/nkvict/learning_java_with_background_in_python/</li> <li>[18] https://www.learnpython.org</li> <li>[19] https://www.youtube.com/watch?v=PCsCAMfwvos</li> <li>[20] https://www.coursera.org/specializations/programming-python-java</li> <li>[21] https://realpython.com/python-classes/</li> <li>[22] https://www.linkedin.com/pulse/10-best-courses-learn-python-3-depth-soma-sharma-yq1qc</li> <li>[23] https://www.youtube.com/watch?v=xEZkR9BFXOI</li> <li>[24] https://www.youtube.com/watch?v=ZDa-Z5JzLYM</li> <li>[25] https://www.youtube.com/watch?v=5qWPP_SRnZ0</li> <li>[26] https://www.youtube.com/watch?v=q2SGW2VgwAM</li> <li>[27] https://www.youtube.com/watch?v=-pEs-Bss8Wc</li> <li>[28] https://www.youtube.com/watch?v=MikphENIrOo</li> <li>[29] https://www.youtube.com/watch?v=JM279KD0DZ0</li> <li>[30] https://www.youtube.com/watch?v=xLovcfIugy8</li> <li>[31] https://www.youtube.com/watch?v=Vyd_1qy5ErQ</li> <li>[32] https://www.youtube.com/watch?v=VMXoPc6_8pw</li> <li>[33] https://www.reddit.com/r/learnpython/comments/z7wi79/good_sites_to_learn_python_that_are_not_crazy/</li> <li>[34] https://developers.google.com/edu/python</li> <li>[35] https://www.codecademy.com/learn/learn-python</li> <li>[36] https://www.youtube.com/watch?v=PMFd95RgIwE</li> <li>[37] https://www.codecademy.com/catalog/language/python</li> <li>[38] https://www.python.org</li> <li>[39] https://www.reddit.com/r/learnpython/comments/18xj44p/looking_for_good_resources_to_learn_oop_concepts/</li> <li>[40] https://www.coursera.org/courses?query=python</li> <li>[41] https://codecombat.com</li> <li>[42] https://kinsta.com/blog/python-object-oriented-programming/</li> <li>[43] https://realpython.com/java-vs-python/</li> <li>[44] https://www.aryaboudaie.com/java/python/technical/educational/2017/11/13/python-for-java-programmers.html</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/","title":"Getting Started","text":""},{"location":"1.%20Intro%20to%20Python/01-getting_started/#installing-python","title":"Installing Python","text":"<p>To get started with Python, you\u2019ll need to install it on your system. Here\u2019s how to do it on different platforms:</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#windows","title":"Windows","text":"<ol> <li>Visit python.org and download the latest version for Windows.</li> <li>Run the installer and make sure to check \u201cAdd Python to PATH\u201d[1].</li> <li>Follow the installation wizard to complete the process.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#macos","title":"macOS","text":"<ol> <li>Go to python.org and download the macOS installer.</li> <li>Open the .pkg file and follow the installation instructions[2].</li> <li>Python will be installed in the Applications folder.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#linux","title":"Linux","text":"<p>Most Linux distributions come with Python pre-installed. If not:</p> <ol> <li>Use your distribution\u2019s package manager (e.g., apt for Ubuntu)[3].</li> <li>For example, on Ubuntu: <code>sudo apt-get install python3</code></li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#installing-jetbrains-toolbox-and-pycharm-professional","title":"Installing JetBrains Toolbox and PyCharm Professional","text":""},{"location":"1.%20Intro%20to%20Python/01-getting_started/#jetbrains-toolbox","title":"JetBrains Toolbox","text":"<ol> <li>Visit the JetBrains Toolbox App web page and download the appropriate version for your OS[4].</li> <li>Run the installer and follow the on-screen instructions.</li> <li>Once installed, launch the Toolbox App.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#getting-an-education-license","title":"Getting an Education License","text":"<ol> <li>Go to the JetBrains website and apply for a free educational license[5].</li> <li>Verify your student or teacher status with your academic email.</li> <li>Once approved, you\u2019ll receive instructions to activate your license.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#installing-pycharm-professional","title":"Installing PyCharm Professional","text":"<ol> <li>Open JetBrains Toolbox.</li> <li>Search for \u201cPyCharm\u201d and select \u201cPyCharm Professional\u201d[4].</li> <li>Click the \u201cInstall\u201d button next to PyCharm Professional.</li> <li>The Toolbox App will download and install PyCharm automatically.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#creating-a-new-pure-python-project","title":"Creating a New Pure Python Project","text":"<ol> <li>Launch PyCharm Professional.</li> <li>Click \u201cNew Project\u201d on the welcome screen or go to <code>File &gt; New Project</code>.</li> <li>In the New Project dialog:<ul> <li>Specify the project location.</li> <li>Select \u201cCreate Git repository\u201d if desired.</li> <li>Check \u201cCreate a main.py welcome script\u201d[6].</li> </ul> </li> <li>Choose your Python interpreter or create a new virtual environment.</li> <li>Click \u201cCreate\u201d to set up your new project.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#running-the-welcome-script","title":"Running the Welcome Script","text":"<ol> <li>In the project explorer, locate the <code>main.py</code> file.</li> <li>Right-click on <code>main.py</code> and select \u201cRun \u2018main\u2019\u201c[10].</li> <li>Alternatively, click the green play button next to the <code>if __name__ == '__main__':</code> block[10].</li> <li>The script will execute, and you\u2019ll see the output in the Run tool window.</li> </ol> References <ul> <li>[1] https://docs.python.org/3/using/windows.html</li> <li>[2] https://docs.python.org/3.12/using/mac.html</li> <li>[3] https://docs.python.org/3/using/unix.html</li> <li>[4] https://www.jetbrains.com/help/rider/Installation_guide.html</li> <li>[5] https://www.jetbrains.com/lp/leaflets-gdc/students/</li> <li>[6] https://ultahost.com/knowledge-base/install-pycharm-windows/</li> <li>[7] https://www.jetbrains.com/help/pycharm/creating-empty-project.html</li> <li>[8] https://stackoverflow.com/questions/79331078/is-it-possible-to-edit-modify-the-welcome-scriptmain-py-in-pycharm-for-python</li> <li>[9] https://stackoverflow.com/questions/68537979/how-do-you-disable-this-sample-program-in-pycharm</li> <li>[10] https://www.jetbrains.com/guide/python/tutorials/getting-started-pycharm/run-python-using-a-run-configuration/</li> <li>[11] https://www.python.org/downloads/windows/</li> <li>[12] https://www.python.org/downloads/</li> <li>[13] https://docs.python.org/3/using/mac.html</li> <li>[14] https://discuss.python.org/t/install-python-3-11-9-on-ubuntu/51093</li> <li>[15] https://www.python.org/download/releases/2.5/msi/</li> <li>[16] https://www.python.org/downloads/macos/</li> <li>[17] https://discuss.python.org/t/publish-linux-installer-on-python-org/53760</li> <li>[18] https://discuss.python.org/t/trying-to-download-python-3-12-3-on-windows-11/52897</li> <li>[19] https://discuss.python.org/t/on-macos-14-pip-install-throws-error-externally-managed-environment/50352</li> <li>[20] https://docs.python.org/3/installing/index.html</li> <li>[21] https://discuss.python.org/t/python-installation/40571</li> <li>[22] https://discuss.python.org/t/help-needed-to-install-python-on-mac-os-i-get-the-installation-failed-message-everytime-i-install/22142</li> <li>[23] https://blog.jetbrains.com/toolbox-app/</li> <li>[24] https://www.jetbrains.com/toolbox-app/</li> <li>[25] https://askubuntu.com/questions/1410885/how-to-install-jetbrains-toolbox-in-ubuntu-22-04-lts</li> <li>[26] https://toolbox-support.jetbrains.com/hc/en-us/community/posts/360000394239-Automating-Toolbox-Setup</li> <li>[27] https://www.jetbrains.com/toolbox-app/download/other.html</li> <li>[28] https://youtrack.jetbrains.com/issue/TBX-9167/choose-install-location-on-for-toolbox-app-and-the-downloaded-apps</li> <li>[29] https://www.reddit.com/r/Jetbrains/comments/1cu41no/jetbrains_toolbox_app_still_broken/</li> <li>[30] https://toolbox-support.jetbrains.com/hc/en-us/community/posts/360009528659-Portable-toolbox</li> <li>[31] https://www.jetbrains.com/products/</li> <li>[32] https://blog.jetbrains.com/toolbox-app/2023/08/toolbox-app-2-0-overhauls-installations-and-updates/</li> <li>[33] https://www.jetbrains.com/toolbox-app/faq/</li> <li>[34] https://www.reddit.com/r/programming/comments/9pal3i/jetbrains_offer_their_entire_suite_of_tools_for/</li> <li>[35] https://www.jetbrains.com/store/</li> <li>[36] https://www.jetbrains.com/rider/buy/</li> <li>[37] https://www.jetbrains.com/edu-products/download/</li> <li>[38] https://www.reddit.com/r/Jetbrains/comments/1g7qgcw/jetbrains_is_it_worth_it/</li> <li>[39] https://www.jetbrains.com/pycharm/download/</li> <li>[40] https://www.jetbrains.com/pycharm/buy/</li> <li>[41] https://flathub.org/en/apps/com.jetbrains.PyCharm-Professional</li> <li>[42] https://resources.jetbrains.com/help/img/idea/2024.3/py_toolbox_app.png?sa=X&amp;ved=2ahUKEwiVma7t1ryMAxXSKLkGHZuYFu4Q_B16BAgLEAI</li> <li>[43] https://www.jetbrains.com/lp/toolbox/</li> <li>[44] https://www.jetbrains.com/help/pycharm/quick-start-guide.html</li> <li>[45] https://www.liquidweb.com/blog/how-to-install-pycharm-on-ubuntu/</li> <li>[46] https://resources.jetbrains.com/help/img/idea/2024.3/py_toolbox_app.png?sa=X&amp;ved=2ahUKEwjouK7t1ryMAxVFe_UHHTPbPMwQ_B16BAgMEAI</li> <li>[47] https://www.jetbrains.com/guide/python/tutorials/cloud-code-pycharm/project-setup/</li> <li>[48] https://www.jetbrains.com/help/pycharm/setting-up-your-project.html</li> <li>[49] https://www.youtube.com/watch?v=j37FLOh-NnU</li> <li>[50] https://www.reddit.com/r/pycharm/comments/1eoourr/how_could_i_setup_my_project_in_pycharm/</li> <li>[51] https://www.jetbrains.com/help/pycharm/getting-started.html</li> <li>[52] https://www.youtube.com/watch?v=W5p8v4yhxjk</li> <li>[53] https://docs.anaconda.com/working-with-conda/ide-tutorials/pycharm/</li> <li>[54] https://www.jetbrains.com/help/pycharm/using-consoles.html</li> <li>[55] https://discuss.python.org/t/install-python-3-10-in-windows/40014</li> <li>[56] https://legacy.python.org/download/mac/</li> <li>[57] https://wiki.python.org/moin/BeginnersGuide/Download</li> <li>[58] https://docs.python.org/3.10/using/mac.html</li> <li>[59] https://devguide.python.org/getting-started/setup-building/</li> <li>[60] https://dev.to/jorgecastro/install-jetbrains-toolbox-on-linux-596n</li> <li>[61] https://www.jetbrains.com/help/idea/installation-guide.html</li> <li>[62] https://www.youtube.com/watch?v=gM7SBQyKCY0</li> <li>[63] https://toolbox-support.jetbrains.com/hc/en-us/articles/20567925512850-Silent-installation-of-JetBrains-Toolbox-App-on-Windows</li> <li>[64] https://winget.run/pkg/JetBrains/Toolbox</li> <li>[65] https://sales.jetbrains.com/hc/en-gb</li> <li>[66] https://www.jetbrains.com/legal/docs/toolbox/license_educational/</li> <li>[67] https://sales.jetbrains.com/hc/en-gb/articles/11558649766674-How-do-I-apply-for-a-free-educational-license</li> <li>[68] https://www.jetbrains.com/community/education/</li> <li>[69] https://www.reddit.com/r/programming/comments/2h8l2x/jetbrains_makes_its_products_free_for_students/</li> <li>[70] https://www.jetbrains.com/store/comparison.html</li> <li>[71] https://www.reddit.com/r/webdev/comments/5zsgdb/am_i_allowed_to_use_my_student_jetbrains_license/</li> <li>[72] https://www.youtube.com/watch?v=6YYjtUAtfS8</li> <li>[73] https://www.reddit.com/r/archlinux/comments/ndf3qm/pycharm_professional_package_install_help/</li> <li>[74] https://askubuntu.com/questions/701618/pycharm-by-jetbrains-installation</li> <li>[75] https://www.digitalocean.com/community/tutorials/install-pycharm-on-linux</li> <li>[76] https://www.youtube.com/watch?v=2y2F7x2TPPA</li> <li>[77] https://www.youtube.com/watch?v=a0OUkzNMj2A</li> <li>[78] https://www.jetbrains.com/guide/python/tutorials/getting-started-pycharm/your-first-project/</li> <li>[79] https://dev.to/scofieldidehen/how-to-use-pycharm-as-a-python-developer-2hek</li> <li>[80] https://www.jetbrains.com/help/pycharm/creating-and-running-your-first-python-project.html</li> <li>[81] https://www.dataquest.io/blog/how-to-set-up-pycharm-community-edition/</li> <li>[82] https://www.youtube.com/watch?v=56bPIGf4us0</li> <li>[83] https://www.youtube.com/watch?v=HHcZbXsZtm0</li> <li>[84] https://www.jetbrains.com/help/pycharm/welcome-screen.html</li> <li>[85] https://stackoverflow.com/questions/42846803/how-to-run-code-in-pycharm</li> <li>[86] https://www.youtube.com/watch?v=FOdQa364sLM</li> <li>[87] https://www.reddit.com/r/pycharm/comments/k7pv7y/how_to_run_code_on_pycharm/</li> <li>[88] https://www.jetbrains.com/help/pycharm/code-running-assistance-tutorial.html</li> </ul>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#hello-world","title":"Hello, World!","text":"<pre><code># This is a sample Python script.\n\n# Press Maj+F10 to execute it or replace it with your code.\n# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.\n\n\ndef print_hi(name):\n    # Use a breakpoint in the code line below to debug your script.\n    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.\n\n\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    print_hi('PyCharm')\n\n# See PyCharm help at https://www.jetbrains.com/help/pycharm/\n</code></pre> <p>The default script generated by PyCharm is a simple \u201cHello, World!\u201d style program with some additional comments explaining PyCharm features. Let\u2019s break it down:</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#script-structure","title":"Script Structure","text":""},{"location":"1.%20Intro%20to%20Python/01-getting_started/#function-definition","title":"Function Definition","text":"<pre><code>def print_hi(name):\n    print(f'Hi, {name}')\n</code></pre> <p>This defines a function called <code>print_hi</code> that takes a <code>name</code> parameter. It uses an f-string to print a greeting with the provided name[2].</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#main-block","title":"Main Block","text":"<pre><code>if __name__ == '__main__':\n    print_hi('PyCharm')\n</code></pre> <p>This is the main block of the script. It checks if the script is being run directly (not imported as a module) and calls the <code>print_hi</code> function with \u2018PyCharm\u2019 as the argument[4].</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#pycharm-features","title":"PyCharm Features","text":"<p>The script includes comments highlighting some PyCharm features:</p> <ol> <li>Execution shortcut: \u201cPress Maj+F10 to execute it or replace it with your code.\u201d</li> <li>Search functionality: \u201cPress Double Shift to search everywhere for classes, files, tool windows, actions, and settings.\u201d</li> <li>Debugging: \u201cUse a breakpoint in the code line below to debug your script.\u201d and \u201cPress Ctrl+F8 to toggle the breakpoint.\u201d</li> <li>Run button: \u201cPress the green button in the gutter to run the script.\u201d</li> </ol> <p>These comments serve as quick reminders for new users about PyCharm\u2019s key features[1][3].</p>"},{"location":"1.%20Intro%20to%20Python/01-getting_started/#purpose","title":"Purpose","text":"<p>This default script serves several purposes:</p> <ol> <li>It provides a working example of a simple Python program.</li> <li>It demonstrates basic Python syntax, including function definition and the main block.</li> <li>It introduces users to PyCharm-specific features and shortcuts.</li> <li>It gives new users a starting point for their own projects.</li> </ol> <p>By running this script, you should see the output: \u201cHi, PyCharm\u201d in the console[6][15].</p> References <ul> <li>[1] https://www.jetbrains.com/help/pycharm/creating-and-running-your-first-python-project.html</li> <li>[2] https://web.stanford.edu/class/archive/cs/cs106a/cs106a.1204/handouts/py-fn.html</li> <li>[3] https://www.youtube.com/watch?v=56bPIGf4us0</li> <li>[4] https://python.land/introduction-to-python/functions</li> <li>[5] https://www.jetbrains.com/help/pycharm/run-debug-configuration-python.html</li> <li>[6] https://book.pythontips.com/en/latest/decorators.html</li> <li>[7] https://stackoverflow.com/questions/19679150/how-to-set-default-pycharm-interpreter</li> <li>[8] https://stackoverflow.com/questions/52606101/decorator-function-syntax-python</li> <li>[9] https://www.youtube.com/watch?v=OajNS-WHiUI</li> <li>[10] https://realpython.com/python-print/</li> <li>[11] https://www.jetbrains.com/help/pycharm/quick-start-guide.html</li> <li>[12] https://andreask.cs.illinois.edu/cs357-s15/public/demos/00-intro/Python%205:%20Functions.html</li> <li>[13] https://www.jetbrains.com/help/pycharm/configuring-python-interpreter.html</li> <li>[14] https://teamtreehouse.com/community/python-basics-print-hi-what-doesnt-this-code-fulfill-from-the-problem</li> <li>[15] https://www.jetbrains.com/help/pycharm/using-consoles.html</li> <li>[16] https://programming-23.mooc.fi/part-3/4-defining-functions/</li> <li>[17] https://stackoverflow.com/questions/10322424/how-to-select-python-version-in-pycharm</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate   explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the   author.</p>"},{"location":"1.%20Intro%20to%20Python/02-history-use/","title":"History and Usage","text":"<p>Python was developed by Dutch programmer Guido van Rossum in 1991 after he became frustrated with the limitations of the ABC programming language[1][2]. Van Rossum began developing Python in December 1989 while working at the Centrum Wiskunde &amp; Informatica (CWI) in the Netherlands[2]. The language was named after the British comedy series \u201cMonty Python\u2019s Flying Circus\u201d[1][2].</p> <p>Python was first released publicly in February 1991 with version 0.9.0[2]. The language has gone through three major evolutions: Python 1.0 (released in 1994), Python 2.0 (2000), and Python 3.0 (2008), with Python 3.0 not being backward-compatible with earlier versions[1].</p>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#popularity-and-rankings","title":"Popularity and Rankings","text":"<p>Python has seen a dramatic rise in popularity over the years:</p> <ul> <li>It currently ranks #1 on the Pluralsight\u2019s 2025 programming language rankings[3]</li> <li>Python has held the top position on the Tiobe programming language index since October 2021[4]</li> <li>As of March 2024, the gap between Python and other programming languages has widened significantly according to the   Tiobe Index[4]</li> <li>In 2024, Python became the most popular language on GitHub, surpassing JavaScript[2]</li> </ul> <p>This is particularly impressive considering Python was only in eighth place a decade ago[4].</p>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#applications-and-use-cases","title":"Applications and Use Cases","text":"<p>Python is widely used across numerous industries and applications:</p>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#data-science-and-analysis","title":"Data Science and Analysis","text":"<ul> <li>Data analysis using libraries like pandas and NumPy[5]</li> <li>Data visualization with matplotlib, seaborn, Plotly, and other libraries[5]</li> <li>Machine learning and AI applications[5][7]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#web-development","title":"Web Development","text":"<ul> <li>Backend development using frameworks like Django and Flask[5][8]</li> <li>API development with FastAPI[5]</li> <li>Major websites like Google, Facebook, Instagram, YouTube, Dropbox, and Reddit use Python[5]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#software-development","title":"Software Development","text":"<ul> <li>Used at all stages of software development including build control, testing, and maintenance[5]</li> <li>Automation and scripting for repetitive tasks[5]</li> <li>DevOps and Infrastructure as Code with libraries like Ansible and Terraform[5]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#scientific-and-numeric-computing","title":"Scientific and Numeric Computing","text":"<ul> <li>Scientific research with specialized libraries like NumPy, SciPy[8]</li> <li>Domain-specific applications in astronomy (Astropy), biology (Biopython), neuroscience (Psychopy)[7]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#business-applications","title":"Business Applications","text":"<ul> <li>Enterprise Resource Planning (ERP) systems[8]</li> <li>Financial technology and banking applications[7]</li> <li>Business intelligence and data mining[7]</li> </ul>"},{"location":"1.%20Intro%20to%20Python/02-history-use/#other-applications","title":"Other Applications","text":"<ul> <li>Internet of Things (IoT) development[10]</li> <li>Game development[10]</li> <li>Image processing and computer vision[7]</li> <li>Desktop GUI applications[8]</li> <li>Education and teaching programming[8]</li> </ul> <p>Python\u2019s widespread adoption is attributed to its easy-to-understand syntax, readability (using indentation instead of braces), extensive libraries, and versatility across different domains[2][5].</p> References <ul> <li>[1] https://www.britannica.com/technology/Python-computer-language</li> <li>[2] https://www.allstarsit.com/blog/how-python-became-a-top-programming-language</li> <li>[3] https://www.pluralsight.com/resources/blog/upskilling/top-programming-languages-2025</li> <li>[4] https://www.itpro.com/software/development/python-stretches-its-lead-as-the-most-popular-programming-language-but-why-does-it-have-such-widespread-appeal</li> <li>[5] https://www.datacamp.com/blog/what-is-python-used-for</li> <li>[6] https://www.coursera.org/articles/what-is-python-used-for-a-beginners-guide-to-using-python</li> <li>[7] https://www.linkedin.com/pulse/how-industries-using-python-sonal-jaiswal</li> <li>[8] https://www.python.org/about/apps/</li> <li>[9] https://www.nobledesktop.com/learn/python/industries-and-professions</li> <li>[10] https://www.linkedin.com/pulse/what-top-10-python-use-cases-applications-real-world</li> <li>[11] https://docs.python.org/3/faq/general.html</li> <li>[12] https://codefinity.com/blog/The-Evolution-of-Python</li> <li>[13] https://en.wikipedia.org/wiki/History_of_Python</li> <li>[14] https://www.aclti.com/en/cutting-edge-technologies/the-evolution-of-python-a-language-shaping-the-digital-world</li> <li>[15] https://pythoninstitute.org/about-python</li> <li>[16] https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1200px-Python-logo-notext.svg.png?sa=X&amp;ved=2ahUKEwiisrHN8ryMAxXhFLkGHcCbK6UQ_B16BAgBEAI</li> <li>[17] https://chem.libretexts.org/Courses/University_of_Arkansas_Little_Rock/IOST_Library/05:_Python_Book/01:_Introduction/01:_History_of_Python</li> <li>[18] https://learnpython.com/blog/history-of-python/</li> <li>[19] https://www.w3schools.com/python/python_intro.asp</li> <li>[20] https://www.wscubetech.com/resources/python/history</li> <li>[21] https://www.youtube.com/watch?v=NClmyC6olC0</li> <li>[22] https://www.bairesdev.com/blog/top-programming-languages/</li> <li>[23] https://www.reddit.com/r/codingbootcamp/comments/1hrq91y/its_2025_should_i_start_with_javascript_or_python/</li> <li>[24] https://www.crossover.com/blog/top-10-in-demand-programming-languages-for-2025-updated</li> <li>[25] https://www.index.dev/blog/most-popular-programming-languages-</li> <li>[26] https://github.blog/developer-skills/programming-languages-and-frameworks/why-python-keeps-growing-explained/</li> <li>[27] https://pypl.github.io</li> <li>[28] https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/</li> <li>[29] https://statisticstimes.com/tech/top-computer-languages.php</li> <li>[30] https://stackoverflow.blog/2023/01/26/comparing-tag-trends-with-our-most-loved-programming-languages/</li> <li>[31] https://www.linkedin.com/pulse/programming-language-trends-2025-which-performs-best-circleci-temhc</li> <li>[32] https://en.wikipedia.org/wiki/Python_(programming_language)</li> <li>[33] https://www.futurelearn.com/info/blog/what-is-python-used-for</li> <li>[34] https://www.reddit.com/r/learnpython/comments/10w01cs/practical_uses_for_python_for_an_average_user/</li> <li>[35] https://academy.nit-institute.com/where-is-python-used-real-world/</li> <li>[36] https://brainstation.io/career-guides/who-uses-python-today</li> <li>[37] https://inoxoft.com/blog/top-23-applications-made-with-python/</li> <li>[38] https://www.altamira.ai/blog/industries-using-python-2/</li> <li>[39] https://www.stxnext.com/blog/top-python-apps</li> <li>[40] https://www.youtube.com/watch?v=Y8Tko2YC5hA</li> <li>[41] https://www.reddit.com/r/learnprogramming/comments/zw30rz/industry_uses_of_python/</li> <li>[42] https://www.simplilearn.com/what-is-python-used-for-article</li> <li>[43] https://dev.to/souvikdcoder/the-origins-of-python-a-journey-through-its-history-and-evolution-24m2</li> <li>[44] https://www.linkedin.com/pulse/evolution-python-from-humble-beginnings-powerful-snsct-auto</li> <li>[45] https://www.tutorialspoint.com/python/python_history.htm</li> <li>[46] https://www.datasciencesociety.net/the-evolution-and-impact-of-python-in-modern-programming/</li> <li>[47] https://www.bocasay.com/history-python-programming/</li> <li>[48] https://www.tiobe.com/tiobe-index/</li> <li>[49] https://newsletter.techworld-with-milan.com/p/trends-6-python-is-the-most-popular</li> <li>[50] https://www.techrepublic.com/article/tiobe-index-language-rankings/</li> <li>[51] https://flatironschool.com/blog/python-popularity-the-rise-of-a-global-programming-language/</li> <li>[52] https://www.datacamp.com/blog/top-programming-languages-for-data-scientists-in-2022</li> <li>[53] https://github.blog/news-insights/octoverse/octoverse-2024/</li> <li>[54] https://www.reddit.com/r/learnpython/comments/15ane9q/what_can_i_use_python_for/</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/01-python-tutorial/","title":"1. Recommended readings","text":"<p>Python tutorial</p> <ol> <li>Basic Python</li> </ol> <ul> <li>Part 1: Chapters 1, 2, 3, 4</li> <li>Part 2: Chapters 5, 7, 8 (skip chapter 6 for now)</li> </ul> <ol> <li>OOP</li> </ol> <ul> <li>Chapter 9</li> </ul>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/","title":"2. Python vs. Java","text":"<p>Python and Java are both popular programming languages with distinct characteristics in syntax and style. Here\u2019s a comparison of their key differences:</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#syntax-differences","title":"Syntax Differences","text":""},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#code-structure","title":"Code Structure","text":"<p>Python uses indentation to define code blocks, making the code cleaner and more readable. Java, on the other hand, uses curly braces to denote code blocks and requires semicolons at the end of statements[2][7].</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#type-system","title":"Type System","text":"<p>Python is dynamically typed, meaning variable types are inferred at runtime and don\u2019t need to be explicitly declared. Java is statically typed, requiring explicit type declarations for all variables, method parameters, and return values[1][3].</p> <pre><code># Python example\nx = 10\nx = \"hello\"  # Valid in Python\n</code></pre> <pre><code>// Java example\nint x = 10;\nx = \"hello\";  // Error in Java\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#verbosity","title":"Verbosity","text":"<p>Python code is typically more concise. For example, reading a text file in Python might take only 4 lines of code, while Java could require 18 lines for the same operation[1]. This difference stems from Java\u2019s strict type system and syntax requirements[5].</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#performance-and-execution","title":"Performance and Execution","text":"<p>Python is an interpreted language that compiles to bytecode at runtime, while Java compiles in advance. This fundamental difference makes Java generally faster in execution, though Python has improved significantly with Python 3[3][4].</p> <p>Java uses a Just-in-Time (JIT) compiler, which improves efficiency by compiling bytecode into machine code in near real-time[3][5].</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#object-oriented-programming","title":"Object-Oriented Programming","text":"<p>Both languages support object-oriented programming, but with different approaches:</p> <ul> <li>Class Definition: Python uses the <code>class</code> keyword with <code>__init__</code> as the constructor, while Java requires classes   in separate files with constructors named after the class[1].</li> <li>Inheritance: Python supports multiple inheritance, while Java only allows single inheritance with multiple   interface implementation[1].</li> <li>Encapsulation: Python uses a convention-based privacy system with underscores, while Java enforces strict access   modifiers (public, private, protected)[1].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/02-python-vs-java/#learning-curve","title":"Learning Curve","text":"<p>Python\u2019s simplified syntax and readability make it more beginner-friendly with a gentler learning curve. Java\u2019s stricter syntax and object-oriented nature may present a steeper learning curve for beginners[2][7].</p> <p>Python\u2019s design philosophy emphasizes code readability and simplicity, allowing developers to focus more on logic than syntax details[3].</p> <p>In summary, Python offers a more concise, readable syntax with dynamic typing, making it excellent for rapid development, while Java provides a more structured, verbose approach with static typing that catches errors at compile time.</p> References <ul> <li>[1] https://www.datacamp.com/blog/python-vs-java</li> <li>[2] https://www.skillreactor.io/blog/python-vs-java/</li> <li>[3] https://www.scoutapm.com/python-vs-java/</li> <li>[4] https://www.revelo.com/blog/python-vs-java</li> <li>[5] https://www.imaginarycloud.com/blog/python-vs-java</li> <li>[6] https://www.snaplogic.com/glossary/python-vs-java</li> <li>[7] https://raygun.com/blog/java-vs-python/</li> <li>[8] https://www.bmc.com/blogs/python-vs-java/</li> <li>[9] https://www.coursera.org/articles/python-vs-java</li> <li>[10] https://www.youtube.com/watch?v=HJ4TN5Obqag</li> <li>[11] https://s7280.pcdn.co/wp-content/uploads/2018/12/key-1024x309.png?sa=X&amp;ved=2ahUKEwiAx4aU3LyMAxVVcfUHHXg_E5gQ_B16BAgCEAI</li> <li>[12] https://math-cs.gordon.edu/courses/cps122/handouts-2014/From%20Python%20to%20Java%20Lecture/A%20Comparison%20of%20the%20Syntax%20of%20Python%20and%20Java.pdf</li> <li>[13] https://www.rose-hulman.edu/class/cs/csse220/201130/Resources/Python_vs_Java.html</li> <li>[14] https://radixweb.com/blog/python-vs-java</li> <li>[15] https://www.rose-hulman.edu/class/cs/csse220/200820/web/Resources/Python_vs_Java.html</li> <li>[16] https://www.reddit.com/r/learnprogramming/comments/tzyz28/main_differences_between_python_and_java/</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/","title":"3. Type System","text":"<p>Python\u2019s type system is a unique blend of dynamic and strong typing, with optional static type hints. Here\u2019s an overview of its key characteristics:</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#dynamic-typing","title":"Dynamic Typing","text":"<p>Python is primarily a dynamically typed language[2][5]. This means:</p> <ol> <li>Variable types are determined at runtime.</li> <li>You don\u2019t need to declare variable types explicitly.</li> <li>A variable can hold different types of data during its lifetime.</li> </ol> <p>For example:</p> <pre><code>x = 10  # x is an integer\nx = \"Hello\"  # now x is a string\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#strong-typing","title":"Strong Typing","text":"<p>Despite being dynamic, Python employs strong typing[2][5]:</p> <ol> <li>The type of a value doesn\u2019t change unexpectedly.</li> <li>Explicit type conversions are required for most type changes.</li> <li>Operations between incompatible types raise errors.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#type-hints-and-annotations","title":"Type Hints and Annotations","text":"<p>Python 3.5+ introduced optional static type hints[3][6]:</p> <ol> <li>They provide additional metadata about expected types.</li> <li>They don\u2019t affect runtime behavior but aid static analysis tools.</li> <li>They improve code readability and maintainability.</li> </ol> <p>Example of type hints:</p> <pre><code>def greet(name: str) -&gt; str:\n    return f\"Hello, {name}\"\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#gradual-typing","title":"Gradual Typing","text":"<p>Python supports gradual typing[1], allowing developers to:</p> <ol> <li>Add type annotations incrementally.</li> <li>Mix statically typed and dynamically typed code.</li> <li>Use the <code>Any</code> type for expressions with unknown types.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#type-checking","title":"Type Checking","text":"<p>While Python itself doesn\u2019t enforce type hints at runtime, external tools like mypy can perform static type checking[6][8]:</p> <ol> <li>These tools analyze code without executing it.</li> <li>They can catch type-related errors before runtime.</li> <li>They support gradual adoption of type hints.</li> </ol>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/03-type-system/#custom-types","title":"Custom Types","text":"<p>Python allows the creation of custom types using classes[5], providing flexibility in modeling domain-specific concepts.</p> <p>In summary, Python\u2019s type system offers a balance between the flexibility of dynamic typing and the safety of strong typing, with optional static type hints for improved code quality and tooling support.</p> References <ul> <li>[1] https://typing.python.org/en/latest/spec/concepts.html</li> <li>[2] https://stackoverflow.com/questions/11328920/is-python-strongly-typed</li> <li>[3] https://fastapi.tiangolo.com/python-types/</li> <li>[4] https://vickiboykis.com/2019/07/08/a-deep-dive-on-python-type-hints/</li> <li>[5] https://beecrowd.com/blog-posts/typing-in-python/</li> <li>[6] https://blog.logrocket.com/understanding-type-annotation-python/</li> <li>[7] https://typing.python.org/en/latest/spec/type-system.html</li> <li>[8] https://dagster.io/blog/python-type-hinting</li> <li>[9] https://peps.python.org/pep-0484/</li> <li>[10] https://cerfacs.fr/coop/python-typing</li> <li>[11] https://mypy.readthedocs.io/en/stable/dynamic_typing.html</li> <li>[12] https://runestone.academy/ns/books/published/fopp/Functions/TypeAnnotations.html</li> <li>[13] https://docs.python.org/3/library/typing.html</li> <li>[14] https://docs.python.org/3/library/types.html</li> <li>[15] https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html</li> <li>[16] https://auth0.com/blog/typing-in-python/</li> <li>[17] https://docs.python.org/3/library/stdtypes.html</li> <li>[18] https://stackoverflow.com/questions/59023552/in-python-are-type-annotations-and-type-hints-the-same-thing</li> <li>[19] https://weaviate.io/blog/typing-systems-in-python</li> <li>[20] https://www.futurelearn.com/info/courses/python-in-hpc/0/steps/65121</li> </ul>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/","title":"4. Type Hints","text":"<p>Python type hints provide a way to indicate the expected types of variables, function parameters, and return values. Let\u2019s explore this feature in depth with various examples.</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#basic-type-hints","title":"Basic Type Hints","text":"<p>Type hints use a simple syntax with colons to annotate variables and functions:</p> <pre><code># Variable annotations\nage: int = 30\nname: str = \"Alice\"\nis_active: bool = True\nprice: float = 19.99\n</code></pre> <p>For functions, you can annotate both parameters and return values:</p> <pre><code>def greet(name: str) -&gt; str:\n    return f\"Hello, {name}\"\n\n\ndef calculate_area(length: float, width: float) -&gt; float:\n    return length * width\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#built-in-collection-types","title":"Built-in Collection Types","text":"<p>Python\u2019s typing module provides ways to annotate collection types:</p> <pre><code>from typing import List, Dict, Tuple, Set\n\n# Lists\nnumbers: List[int] = [1, 2, 3, 4, 5]\nnames: List[str] = [\"Alice\", \"Bob\", \"Charlie\"]\n\n# Dictionaries\nuser_scores: Dict[str, int] = {\"Alice\": 95, \"Bob\": 87, \"Charlie\": 92}\nconfig: Dict[str, str] = {\"host\": \"localhost\", \"port\": \"8080\"}\n\n# Tuples\npoint: Tuple[int, int] = (10, 20)\nperson: Tuple[str, int, bool] = (\"Alice\", 30, True)\n\n# Sets\nunique_ids: Set[int] = {1, 2, 3, 4, 5}\nfruits: Set[str] = {\"apple\", \"banana\", \"orange\"}\n</code></pre> <p>In Python 3.9+, you can use the built-in collection types directly:</p> <pre><code># Python 3.9+ syntax\nnumbers: list[int] = [1, 2, 3, 4, 5]\nuser_scores: dict[str, int] = {\"Alice\": 95, \"Bob\": 87}\npoint: tuple[int, int] = (10, 20)\nunique_ids: set[int] = {1, 2, 3, 4, 5}\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#optional-and-union-types","title":"Optional and Union Types","text":"<p>For variables that might be None or have multiple possible types:</p> <pre><code>from typing import Optional, Union\n\n\n# Optional - can be a specific type or None\ndef find_user(user_id: int) -&gt; Optional[dict]:\n    # Implementation that might return None if user not found\n    pass\n\n\n# Union - can be one of several types\ndef process_input(data: Union[str, bytes, list]) -&gt; str:\n    # Implementation that handles different input types\n    pass\n</code></pre> <p>In Python 3.10+, you can use the pipe operator for unions:</p> <pre><code># Python 3.10+ syntax\ndef process_input(data: str | bytes | list) -&gt; str:\n    # Implementation\n    pass\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#type-aliases","title":"Type Aliases","text":"<p>You can create aliases for complex types:</p> <pre><code>from typing import Dict, List, Tuple\n\n# Type aliases\nUserID = int\nUsername = str\nUserRecord = Dict[str, Union[str, int, bool]]\nMatrix = List[List[float]]\nPoint = Tuple[float, float]\n\n\ndef get_user(user_id: UserID) -&gt; UserRecord:\n    # Implementation\n    pass\n\n\ndef transform_matrix(m: Matrix) -&gt; Matrix:\n    # Implementation\n    pass\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#callable-types","title":"Callable Types","text":"<p>For functions that accept other functions as arguments:</p> <pre><code>from typing import Callable\n\n\n# A function that takes a callback function\ndef process_data(data: list, callback: Callable[[int], str]) -&gt; list:\n    return [callback(item) for item in data]\n\n\n# Usage\ndef format_number(num: int) -&gt; str:\n    return f\"Number: {num}\"\n\n\nresult = process_data([1, 2, 3], format_number)\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#user-defined-classes","title":"User-Defined Classes","text":"<p>Classes work naturally with type hints:</p> <pre><code>class User:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n\n\ndef create_greeting(user: User) -&gt; str:\n    return f\"Hello, {user.name}!\"\n\n\n# Using Type for class references\nfrom typing import Type\n\n\ndef create_user(user_class: Type[User], name: str, age: int) -&gt; User:\n    return user_class(name, age)\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#generic-types","title":"Generic Types","text":"<p>For creating flexible, reusable components:</p> <pre><code>from typing import TypeVar, Generic, List\n\nT = TypeVar('T')\n\n\nclass Stack(Generic[T]):\n    def __init__(self) -&gt; None:\n        self.items: List[T] = []\n\n    def push(self, item: T) -&gt; None:\n        self.items.append(item)\n\n    def pop(self) -&gt; T:\n        return self.items.pop()\n\n    def is_empty(self) -&gt; bool:\n        return not self.items\n\n\n# Usage\nint_stack = Stack[int]()\nint_stack.push(1)\nint_stack.push(2)\n\nstr_stack = Stack[str]()\nstr_stack.push(\"hello\")\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/04-type-hints/#type-checking-with-mypy","title":"Type Checking with mypy","text":"<p>Type hints don\u2019t enforce types at runtime, but tools like mypy can check them statically:</p> <pre><code># example.py\ndef double(x: int) -&gt; int:\n    return x * 2\n\n\nresult = double(\"hello\")  # Type error!\n</code></pre> <p>Running mypy will catch this error:</p> <pre><code>$ mypy example.py\nexample.py:4: error: Argument 1 to \"double\" has incompatible type \"str\"; expected \"int\"\n</code></pre> <p>Type hints make your code more readable, maintainable, and help catch errors before runtime, especially when used with static analysis tools like mypy.</p> References <ul> <li>[1] https://realpython.com/lessons/type-hinting/ </li> <li>[2] https://realpython.com/python-type-hints-multiple-types/</li> <li>[3] https://dagster.io/blog/python-type-hinting</li> <li>[4] https://ryan.himmelwright.net/post/python-type-hinting-intro/</li> <li>[5] https://fastapi.tiangolo.com/python-types/</li> <li>[6] https://peps.python.org/pep-0484/</li> <li>[7] https://codefinity.com/blog/A-Comprehensive-Guide-to-Python-Type-Hints</li> <li>[8] https://www.youtube.com/watch?v=MaejDU6pelY</li> <li>[9] https://docs.python.org/3/library/typing.html</li> <li>[10] https://www.youtube.com/watch?v=79zeCq9raY0</li> <li>[11] https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html</li> <li>[12] https://dagster.io/posts/python-type-hinting/python-type-hinting-min.jpg?sa=X&amp;ved=2ahUKEwjck76X37yMAxVfHrkGHXoPAcgQ_B16BAgHEAI</li> <li>[13] https://www.youtube.com/watch?v=C1ANuCyniOw</li> <li>[14] https://stackoverflow.com/questions/37835179/how-can-i-specify-the-function-type-in-my-type-hints</li> <li>[15] https://www.reddit.com/r/Python/comments/10zdidm/why_type_hinting_sucks/</li> <li>[16] https://www.reddit.com/r/learnpython/comments/lgwdsd/whats_the_point_of_type_hints_in_python/</li> <li>[17] https://www.infoworld.com/article/2268917/get-started-with-python-type-hints.html</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/05-exercices/","title":"5. Exercises","text":"<p>Write a function for each of the following questions.</p>"},{"location":"1.%20Intro%20to%20Python/A.%20Overview/05-exercices/#practice-questions","title":"Practice Questions","text":"<ol> <li> <p>Calculate and display the absolute value of a number entered by the user.</p> </li> <li> <p>Determine if an integer entered by the user is even or odd.</p> </li> <li> <p>Read three numbers and print the smallest of these three numbers.</p> </li> <li> <p>Calculate the total salary of an employee. Read the hourly wage and the number of hours worked as input. If the employee worked more than 40 hours, overtime hours are paid at 1.5 times the hourly wage.</p> </li> <li> <p>Read three positive numbers representing the lengths of the sides of a triangle. Print:</p> </li> </ol> <ul> <li>\u201cScalene\u201d if all three sides are unequal</li> <li>\u201cIsosceles\u201d if two sides are equal</li> <li>\u201cEquilateral\u201d if all three sides are equal</li> </ul> <ol> <li> <p>A professor provides you with three grades calculated out of 100. Calculate the average and print \u201cfail\u201d if the final grade is less than 60/100. Otherwise, print the student\u2019s grade.</p> </li> <li> <p>Read a final course grade as input. If the grade is less than 0, or if the grade is greater than 100, then display \u201cThis grade is invalid\u201d and terminate the function. If the grade is valid, then display a letter corresponding to the grade according to the following conditions:</p> </li> </ol> <ul> <li>E: less than 60</li> <li>D: from 60 to less than 70</li> <li>C: from 70 to less than 80</li> <li>B: from 80 to less than 90</li> <li>A: 90 or more</li> </ul> <ol> <li>Read a number between 1 and 10 inclusive.</li> </ol> <ul> <li>If the number is not in this range, display \u201cinvalid\u201d.</li> <li>If the number is valid, display \u201cvalid\u201d.</li> </ul> <ol> <li>Read a number between 1 and 10 inclusive.</li> </ol> <ul> <li>If the number is not in this range, display \u201cinvalid\u201d and ask for the number again. You must ensure that the number is valid before continuing to the next step. There is no limit on the number of incorrect attempts.</li> <li>If the number is valid, display \u201cvalid\u201d.</li> </ul> <ol> <li> <p>Read a number between 1 and 10 inclusive.</p> <ul> <li>If the number is not in this range, display \u201cinvalid\u201d and ask for the number again. You must ensure that the number is valid before continuing to the next step. There is a limit of 3 incorrect attempts.</li> <li>If the maximum number of incorrect attempts has been reached, display \u201cMaximum number of attempts reached.\u201d and the method must terminate.</li> <li>If the number is valid, display \u201cvalid\u201d.</li> </ul> </li> <li> <p>Read an integer and display it in reverse. For example, if the user enters <code>123456</code>, the program displays <code>654321</code>. For this exercise, you cannot reverse a string representing the number; you must use an <code>int</code> and use division and modulo operations on this <code>int</code>.</p> </li> <li> <p>Read an integer and display a countdown from this number to 0. When the countdown is complete, display \u201cFinished!\u201d instead of the number 0. For example, if the entered number is 5, you should display:     <pre><code>5\n4\n3\n2\n1\nFinished!\n</code></pre></p> </li> <li> <p>For each of the following questions, define a list of integers containing approximately 10 values of your choice. The exact length of the list and the numbers it contains are up to you, but they should allow for good testing of the questions. Answer the questions in different functions. Using a <code>for</code> loop on the indices of the list:</p> <ol> <li>Find the sum and average of all numbers in the list.</li> <li>Display all even numbers contained in the list.</li> <li>Determine if all numbers in the list are positive or not. If all numbers are positive, display True, otherwise display False.</li> </ol> </li> <li> <p>Repeat the previous question, but using a <code>while</code> loop on the list.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/","title":"1. Python\u2019s OOP Model","text":"<p>Python\u2019s OOP model provides a flexible approach to object-oriented programming that balances simplicity with power. Let me describe Python\u2019s model first, then compare it to Java\u2019s approach.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#pythons-oop-model","title":"Python\u2019s OOP Model","text":"<p>Python implements object-oriented programming through classes and objects. In Python, a class serves as a blueprint that defines attributes (data) and methods (functions) that objects of that class will possess[1]. Everything in Python is an object, including numbers, strings, and functions[2].</p> <p>Python\u2019s OOP model is built on four fundamental pillars:</p> <ol> <li> <p>Encapsulation: Python uses a convention-based approach with underscores (e.g., <code>_private_var</code>) rather than strict    access modifiers[4].</p> </li> <li> <p>Inheritance: Python supports both single and multiple inheritance, allowing a class to inherit attributes and    methods from one or more parent classes[2][3].</p> </li> <li> <p>Polymorphism: This allows methods to be implemented differently in different classes, enabling objects of    different classes to respond to the same method call in class-specific ways[3].</p> </li> <li> <p>Abstraction: Python allows you to hide complex implementation details and show only the necessary features of an    object[2].</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#comparing-pythons-oop-to-javas-oop","title":"Comparing Python\u2019s OOP to Java\u2019s OOP","text":""},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#type-system","title":"Type System","text":"<ul> <li>Python: Uses dynamic typing where variable types are determined at runtime. Variables can change types throughout   program execution[4][5].</li> <li>Java: Uses static typing where all variables must be explicitly declared with their types before use[4][5].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#syntax-and-structure","title":"Syntax and Structure","text":"<ul> <li>Python: Uses indentation to define code blocks. Classes are defined with the <code>class</code> keyword and constructor with   <code>__init__</code>[4][6].</li> <li>Java: Uses curly braces to define code blocks. Classes are typically defined in separate files with constructors   named after the class[4][7].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#inheritance","title":"Inheritance","text":"<ul> <li>Python: Supports multiple inheritance, allowing a class to inherit from multiple parent classes[2][3].</li> <li>Java: Supports only single inheritance for classes but allows multiple interface implementation[4].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#encapsulation","title":"Encapsulation","text":"<ul> <li>Python: Doesn\u2019t have strict access modifiers. Uses naming conventions (underscores) to indicate private   attributes[4][8].</li> <li>Java: Enforces strict access modifiers (public, private, protected) to control access to class members[3][4].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#performance","title":"Performance","text":"<ul> <li>Python: Generally slower due to its interpreted nature and dynamic typing[5][9].</li> <li>Java: Typically faster due to compilation to bytecode and Just-In-Time (JIT) compilation[5][9].</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/01-oop-model/#design-philosophy","title":"Design Philosophy","text":"<ul> <li>Python: Supports OOP but doesn\u2019t force it. You can write procedural or functional code without classes[8].</li> <li>Java: Designed as a pure OOP language where everything must be within a class[8].</li> </ul> <p>In summary, while both languages implement the core principles of OOP, Python offers a more flexible, convention-based approach with dynamic typing, while Java provides a stricter, more structured approach with static typing and explicit access control.</p> References <ul> <li>[1] https://www.datacamp.com/tutorial/python-oop-tutorial</li> <li>[2] https://www.linkedin.com/pulse/python-four-pillars-object-oriented-programming-benjamin-b-phiri</li> <li>[3] https://www.tutorialspoint.com/python/python_oops_concepts.htm</li> <li>[4] https://www.datacamp.com/blog/python-vs-java</li> <li>[5] https://www.imaginarycloud.com/blog/python-vs-java</li> <li>[6] https://www.freecodecamp.org/news/how-to-use-oop-in-python/</li> <li>[7] https://www.youngwonks.com/blog/python-vs-java</li> <li>[8] https://www.activestate.com/blog/java-versus-python-key-programming-differences-in-2021/</li> <li>[9] https://raygun.com/blog/java-vs-python/</li> <li>[10] https://www.youtube.com/watch?v=q2SGW2VgwAM</li> <li>[11] https://www.freecodecamp.org/news/object-oriented-programming-in-python/</li> <li>[12] https://www.w3schools.com/python/python_classes.asp</li> <li>[13] https://www.programiz.com/python-programming/object-oriented-programming</li> <li>[14] https://www.wscubetech.com/resources/python/oops-concepts</li> <li>[15] https://docs.python.org/3/reference/datamodel.html</li> <li>[16] https://www.youtube.com/watch?v=ZVTuWsrjvyU</li> <li>[17] https://www.pythoncheatsheet.org/cheatsheet/oop-basics</li> <li>[18] https://www.freecodecamp.org/news/object-oriented-programming-python/</li> <li>[19] https://www.youtube.com/watch?v=Ej_02ICOIgs</li> <li>[20] https://files.realpython.com/media/Object-Oriented-Programming-OOP-in-Python-3_Watermarked.0d29780806d5.jpg?sa=X&amp;ved=2ahUKEwi8ks_097yMAxXuCLkGHZFBI9cQ_B16BAgHEAI</li> <li>[21] https://raygun.com/blog/images/java-vs-python/feature.png?sa=X&amp;ved=2ahUKEwifuZT297yMAxUdklYBHX65EI0Q_B16BAgMEAI</li> <li>[22] https://realpython.com/oop-in-python-vs-java/</li> <li>[23] https://www.reddit.com/r/javahelp/comments/13qow9l/are_javas_oop_concepts_much_different_than_pythons/</li> <li>[24] https://www.youtube.com/watch?v=dYLSFF2gjSs</li> <li>[25] https://www.coursera.org/articles/python-vs-java</li> <li>[26] https://dev.to/terrythreatt/the-four-principles-of-object-oriented-programming-in-python-1jbi</li> <li>[27] https://www.geekster.in/articles/oops-concepts-in-python/</li> <li>[28] https://realpython.com/python3-object-oriented-programming/</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/","title":"2. Classes","text":"<p>Python\u2019s class model provides a flexible and powerful way to implement object-oriented programming. Let\u2019s dive into the details of Python\u2019s class structure and its various components.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#class-definition","title":"Class Definition","text":"<p>To define a class in Python, you use the <code>class</code> keyword followed by the class name:</p> <pre><code>class MyClass:\n    pass\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#attributes","title":"Attributes","text":"<p>Attributes in Python classes can be instance attributes or class attributes.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#instance-attributes","title":"Instance Attributes","text":"<p>Instance attributes are unique to each instance of a class. They are typically defined within the constructor method:</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name  # instance attribute\n        self.age = age  # instance attribute\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#class-attributes","title":"Class Attributes","text":"<p>Class attributes are shared among all instances of a class. They are defined outside any method within the class:</p> <pre><code>class Person:\n    species = \"Homo sapiens\"  # class attribute\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#methods","title":"Methods","text":""},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#instance-methods","title":"Instance Methods","text":"<p>Instance methods are the most common type of methods in Python classes. They take <code>self</code> as the first parameter:</p> <pre><code>class Person:\n    def greet(self):\n        return f\"Hello, my name is {self.name}\"\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#static-methods","title":"Static Methods","text":"<p>Static methods don\u2019t have access to <code>cls</code> or <code>self</code>. They work like regular functions but belong to the class\u2019s namespace. They are defined using the <code>@staticmethod</code> decorator:</p> <pre><code>class MathOperations:\n    @staticmethod\n    def add(x, y):\n        return x + y\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#class-methods","title":"Class Methods","text":"<p>Class methods take <code>cls</code> as the first parameter and can access or modify class state. They are defined using the <code>@classmethod</code> decorator:</p> <pre><code>class Person:\n    count = 0\n\n    @classmethod\n    def increment_count(cls):\n        cls.count += 1\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#constructor","title":"Constructor","text":"<p>The constructor in Python is the <code>__init__</code> method. It\u2019s called when an object is created:</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#string-representation","title":"String Representation","text":"<p>Python provides two methods for string representation of objects:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#str","title":"str","text":"<p>The <code>__str__</code> method is used for creating a user-friendly string representation:</p> <pre><code>class Person:\n    def __str__(self):\n        return f\"Person named {self.name}\"\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#repr","title":"repr","text":"<p>The <code>__repr__</code> method is used for creating a detailed, unambiguous representation of the object, typically for debugging:</p> <pre><code>class Person:\n    def __repr__(self):\n        return f\"Person(name='{self.name}', age={self.age})\"\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#public-vs-private","title":"Public vs Private","text":"<p>Python doesn\u2019t have strict public/private distinctions, but it uses conventions:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#public","title":"Public","text":"<p>By default, all attributes and methods in Python are public:</p> <pre><code>class Person:\n    def public_method(self):\n        pass\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#private","title":"Private","text":"<p>To indicate that an attribute or method should be treated as private, prefix it with double underscores:</p> <pre><code>class Person:\n    def __init__(self):\n        self.__private_attr = 42\n\n    def __private_method(self):\n        pass\n</code></pre> <p>This triggers name mangling, making it harder (but not impossible) to access from outside the class[6][8].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/02-classes/#protected","title":"Protected","text":"<p>A single underscore prefix is used to indicate that an attribute or method should be treated as protected:</p> <pre><code>class Person:\n    def __init__(self):\n        self._protected_attr = 42\n\n    def _protected_method(self):\n        pass\n</code></pre> <p>This is just a convention and doesn\u2019t prevent access from outside the class[6][8].</p> <p>In summary, Python\u2019s class model provides a flexible system for creating object-oriented code. While it doesn\u2019t enforce strict access control like some other languages, it offers conventions that allow developers to communicate their intentions regarding the visibility and usage of class members.</p> References <ul> <li>[1] https://realpython.com/python-classes/</li> <li>[2] https://www.digitalocean.com/community/tutorials/python-static-method</li> <li>[3] https://pythonbasics.org/constructor/</li> <li>[4] https://codedamn.com/news/python/what-is-repr-in-python</li> <li>[5] https://hacktec.gitbooks.io/effective-python/content/en/Chapter3/item27.html</li> <li>[6] https://llego.dev/posts/access-modifiers-python/</li> <li>[7] https://www.tutorialsteacher.com/python/public-private-protected-modifiers</li> <li>[8] https://dev.to/ankitmalikg/python-how-to-define-public-private-and-protected-variables-in-a-class-4g9</li> <li>[9] https://jellis18.github.io/post/2022-01-15-access-modifiers-python/</li> <li>[10] https://www.youtube.com/watch?v=xY__sjI5yVU</li> <li>[11] https://www.datacamp.com/tutorial/python-private-methods-explained</li> <li>[12] https://www.youtube.com/watch?v=tQ1n-ySubAM</li> <li>[13] https://builtin.com/software-engineering-perspectives/python-attributes</li> <li>[14] https://images.prismic.io/turing/65981105531ac2845a2729c7_Importance_of_Python_class_attributes_6495667a2b.webp?auto=format%2Ccompress&amp;sa=X&amp;ved=2ahUKEwjn6PH2-7yMAxXUrokEHX32Kl4Q_B16BAgDEAI</li> <li>[15] https://www.turing.com/kb/introduction-to-python-class-attributes</li> <li>[16] https://docs.python.org/3/reference/datamodel.html</li> <li>[17] https://www.toptal.com/python/python-class-attributes-an-overly-thorough-guide</li> <li>[18] https://labex.io/tutorials/python-how-to-define-class-attributes-and-methods-at-runtime-398174</li> <li>[19] https://www.w3schools.com/python/python_classes.asp</li> <li>[20] https://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</li> <li>[21] https://stackoverflow.com/questions/2438473/what-is-the-purpose-of-static-methods-how-do-i-know-when-to-use-one</li> <li>[22] https://www.youtube.com/watch?v=-LevVCuAi2E</li> <li>[23] https://stackoverflow.com/questions/38280526/is-a-constructor-init-necessary-for-a-class-in-python</li> <li>[24] https://realpython.com/python-multiple-constructors/</li> <li>[25] https://www.digitalocean.com/community/tutorials/how-to-construct-classes-and-define-objects-in-python-3</li> <li>[26] https://docs.python.org/3/tutorial/classes.html</li> <li>[27] https://realpython.com/python-class-constructor/</li> <li>[28] https://www.reddit.com/r/learnprogramming/comments/83flwh/what_exactly_is_a_constructor_and_what_does_it_do/</li> <li>[29] https://www.wscubetech.com/resources/python/constructors</li> <li>[30] https://www.youtube.com/watch?v=uKmfhJA76Y4</li> <li>[31] https://www.reddit.com/r/learnpython/comments/izjrbp/a_beginners_guide_to_str_and_repr/</li> <li>[32] https://discuss.python.org/t/what-are-the-differences-between-str-and-repr-in-class-methods/44142</li> <li>[33] https://www.youtube.com/watch?v=-lz5kRcoU5Q</li> <li>[34] https://realpython.com/python-repr-vs-str/</li> <li>[35] https://stackoverflow.com/questions/1641219/does-python-have-private-variables-in-classes</li> <li>[36] https://www.reddit.com/r/learnpython/comments/pfkj1h/when_should_i_use_private_attributes_in_python/</li> <li>[37] https://profound.academy/python-mid/private-variables-in-classes-km0x40ery3suTthPk3MB</li> <li>[38] https://diveintopython.org/learn/classes/methods</li> <li>[39] https://www.techwithtim.net/tutorials/python-programming/classes-objects-in-python/private-and-public-classes</li> <li>[40] https://softwareengineering.stackexchange.com/questions/452995/should-private-attributes-or-public-attributes-be-the-default-in-python-classes</li> <li>[41] https://stackoverflow.com/questions/55525463/public-and-private-methods-in-python</li> <li>[42] https://stackoverflow.com/questions/46312470/difference-between-methods-and-attributes-in-python</li> <li>[43] https://www.almabetter.com/bytes/tutorials/python/methods-and-attributes-in-python</li> <li>[44] https://www.linkedin.com/pulse/exploring-differences-between-class-methods-static-python</li> <li>[45] https://codeburst.io/python-3-how-to-use-a-instance-non-static-method-as-static-a2cf21bfd5b4</li> <li>[46] https://www.boardinfinity.com/blog/class-and-static-method-in-python-differences/</li> <li>[47] https://www.reddit.com/r/AskProgramming/comments/120mulm/good_example_for_static_vs_nonstatic_methods/</li> <li>[48] https://realpython.com/instance-class-and-static-methods-demystified/</li> <li>[49] https://www.tutorialspoint.com/python/python_constructors.htm</li> <li>[50] https://wiingy.com/learn/python/constructors-in-python/</li> <li>[51] https://codedamn.com/news/python/explaining-constructor-in-python-with-an-example</li> <li>[52] https://www.shiksha.com/online-courses/articles/constructors-in-python-definition-types-and-rules/</li> <li>[53] https://www.youtube.com/watch?v=neVmG4ljQiE</li> <li>[54] https://hostman.com/tutorials/how-to-use-the-str-and-repr-methods-in-python/</li> <li>[55] https://www.python-engineer.com/posts/difference-between-str-and-repr/</li> <li>[56] https://stackoverflow.com/questions/1436703/what-is-the-difference-between-str-and-repr</li> <li>[57] https://www.digitalocean.com/community/tutorials/python-str-repr-functions</li> <li>[58] https://how.dev/answers/what-is-the-difference-between-str-and-repr</li> <li>[59] https://www.reddit.com/r/learnprogramming/comments/dgbnnf/python_whats_the_difference_between_str_and_repr/</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/","title":"3. Single Inheritance","text":"<p>Single inheritance in Python and Java allows a class to inherit properties and methods from a single parent class. However, there are some key differences in how these languages implement single inheritance:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/#python-single-inheritance","title":"Python Single Inheritance","text":"<p>In Python, single inheritance is implemented as follows:</p> <pre><code>class ParentClass:\n    # Parent class attributes and methods\n\nclass ChildClass(ParentClass):\n    # Child class attributes and methods\n</code></pre> <p>Key features of Python\u2019s single inheritance:</p> <ol> <li> <p>Syntax simplicity: The child class is defined by specifying the parent class name in parentheses after the child    class name.</p> </li> <li> <p>Dynamic typing: Python\u2019s dynamic typing allows for more flexible attribute and method inheritance.</p> </li> <li> <p>Method resolution: Python uses the Method Resolution Order (MRO) to determine which method to call when there are    methods with the same name in different classes.</p> </li> <li> <p><code>super()</code> function: Used to call methods from the parent class, allowing the child class to extend functionality    rather than completely replacing it.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/#java-single-inheritance","title":"Java Single Inheritance","text":"<p>Java implements single inheritance like this:</p> <pre><code>class ParentClass {\n    // Parent class attributes and methods\n}\n\nclass ChildClass extends ParentClass {\n    // Child class attributes and methods\n}\n</code></pre> <p>Key features of Java\u2019s single inheritance:</p> <ol> <li> <p><code>extends</code> keyword: Java uses the <code>extends</code> keyword to indicate inheritance.</p> </li> <li> <p>Static typing: Java\u2019s static typing system requires explicit type declarations for inherited members.</p> </li> <li> <p>Access modifiers: Java provides strict access control with public, private, and protected modifiers.</p> </li> <li> <p><code>super</code> keyword: Used to call the parent class constructor or methods.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/#comparison","title":"Comparison","text":"<ol> <li> <p>Syntax: Python\u2019s syntax is more concise, while Java\u2019s is more explicit with the <code>extends</code> keyword.</p> </li> <li> <p>Multiple inheritance: Python supports multiple inheritance, while Java only allows single inheritance for classes    (though it supports multiple interface implementation).</p> </li> <li> <p>Type system: Python\u2019s dynamic typing offers more flexibility, while Java\u2019s static typing provides compile-time type    checking.</p> </li> <li> <p>Method overriding: Both languages support method overriding, but Python uses the <code>super()</code> function while Java uses    the <code>super</code> keyword.</p> </li> <li> <p>Constructor chaining: In Python, you explicitly call the parent constructor using <code>super().__init__()</code>, while in    Java, the parent constructor is implicitly called unless specified otherwise.</p> </li> <li> <p>Access control: Java has stricter access control with explicit modifiers, while Python uses naming conventions (e.g.,    underscores for private members).</p> </li> </ol> <p>In both languages, single inheritance promotes code reuse and allows for the creation of hierarchical relationships between classes. However, Python\u2019s implementation is generally more flexible and concise, while Java\u2019s offers more structure and compile-time safety.</p> References <ul> <li>[1] https://www.scientecheasy.com/2023/09/single-inheritance-in-python.html/</li> <li>[2] https://www.scholarhat.com/tutorial/java/single-inheritance-in-java</li> <li>[3] https://beginnersbook.com/2013/05/java-inheritance-types/</li> <li>[4] https://www.shiksha.com/online-courses/articles/single-inheritance-in-java-blogId-159513</li> <li>[5] https://geekpython.in/class-inheritance-in-python</li> <li>[6] https://www.geekster.in/articles/java-inheritance/</li> <li>[7] https://www.tutorialspoint.com/java/java_inheritance.htm</li> <li>[8] https://www.simplilearn.com/tutorials/java-tutorial/inheritence-in-java</li> <li>[9] https://www.wscubetech.com/resources/python/inheritance</li> <li>[10] https://realpython.com/inheritance-composition-python/</li> <li>[11] https://labex.io/tutorials/python-how-to-use-single-inheritance-in-python-398272</li> <li>[12] https://www.codechef.com/learn/course/oops-concepts-in-python/CPOPPY03/problems/ADVPPY25</li> <li>[13] https://www.tutorialspoint.com/python/python_inheritance.htm</li> <li>[14] https://www.w3schools.com/python/python_inheritance.asp</li> <li>[15] https://www.linkedin.com/pulse/in-depth-exploration-inheritance-java-nitin-singh</li> <li>[16] https://www.tpointtech.com/inheritance-in-java</li> <li>[17] https://www.ccbp.in/blog/articles/single-inheritance-in-java</li> <li>[18] https://www.w3schools.com/java/java_inheritance.asp</li> <li>[19] https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html</li> <li>[20] https://www.studysmarter.co.uk/explanations/computer-science/computer-programming/java-inheritance/</li> <li>[21] https://files.codingninjas.in/article_images/single-inheritance-in-java-17217.webp?sa=X&amp;ved=2ahUKEwiQs_Pug72MAxXqma8BHTQQClAQ_B16BAgBEAI</li> <li>[22] https://www.scaler.com/topics/python/inheritance-in-python/</li> <li>[23] https://www.tutorjoes.in/python_programming_tutorial/single_inheritance_in_python</li> <li>[24] https://www.datacamp.com/tutorial/python-inheritance</li> <li>[25] https://www.scholarhat.com/tutorial/python/inheritance-in-python</li> <li>[26] https://www.programiz.com/python-programming/inheritance</li> <li>[27] https://wiingy.com/learn/python/inheritance-in-python/</li> <li>[28] https://www.programiz.com/java-programming/inheritance</li> <li>[29] https://timespro.com/blog/inheritance-in-java-understand-with-examples</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/#overloading-operators-and-isinstance","title":"Overloading operators and <code>isinstance</code>","text":"<p>To use <code>isinstance()</code> when overloading the <code>+</code> operator in a class, you typically check the type of the second operand to handle different addition scenarios. Here\u2019s an example with a <code>Vector</code> class that supports adding vectors or scalars:</p> <pre><code>class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        if isinstance(other, Vector):  # Vector + Vector\n            return Vector(self.x + other.x, self.y + other.y)\n        elif isinstance(other, (int, float)):  # Vector + scalar\n            return Vector(self.x + other, self.y + other)\n        else:\n            raise TypeError(f\"Unsupported type for +: 'Vector' and '{type(other).__name__}'\")\n\n    def __repr__(self):\n        return f\"Vector({self.x}, {self.y})\"\n</code></pre> <p>Key implementation details[2][4]:</p> <ol> <li>Type checking: <code>isinstance()</code> verifies if <code>other</code> is a <code>Vector</code> instance or numeric type</li> <li>Multiple type support: The tuple <code>(int, float)</code> allows scalar addition with either integers or floats</li> <li>Error handling: Raises <code>TypeError</code> for unsupported types</li> </ol> <p>Example usage: <pre><code>v1 = Vector(2, 3)\nv2 = Vector(1, 4)\nscalar = 5\n\nprint(v1 + v2)    # Vector(3, 7)\nprint(v1 + 5)     # Vector(7, 8)\nprint(v1 + \"str\") # TypeError: Unsupported type for +: 'Vector' and 'str'\n</code></pre></p> <p>This pattern ensures type safety while allowing flexible operations. The <code>isinstance()</code> check properly handles  inheritance hierarchies if you create subclasses of <code>Vector</code>[4]. For more complex scenarios, you might also implement <code>__radd__</code> to handle cases where the vector is on the right side of the <code>+</code> operator[5].</p> References <ul> <li>[1] https://www.w3schools.com/python/ref_func_isinstance.asp</li> <li>[2] https://gist.github.com/699fb6f7c43ae1eb6e06</li> <li>[3] https://stackoverflow.com/questions/69210526/new-to-python-use-add-method-for-more-than-2-instances</li> <li>[4] https://pynative.com/python-isinstance-explained-with-examples/</li> <li>[5] https://realpython.com/python-magic-methods/</li> <li>[6] https://glennrowe.net/programmingpages/2021/06/13/overloading-arithmetic-operators/</li> <li>[7] https://stackoverflow.com/questions/62115060/python-how-to-use-add-special-method-to-add-instances-of-the-same-class-tha</li> <li>[8] https://www.pythonmorsels.com/every-dunder-method/</li> <li>[9] https://stackoverflow.com/questions/66803769/different-return-types-overloading-add</li> <li>[10] https://docs.python.org/3/tutorial/classes.html</li> <li>[11] https://docs.python.org/3/library/functions.html</li> <li>[12] https://testdriven.io/tips/aca1254d-ef6d-4de3-b4ba-8607c5d51737/</li> <li>[13] https://www.reddit.com/r/learnpython/comments/a2sodz/how_does_this_code_work_classes_add_method/</li> <li>[14] https://www.wscubetech.com/resources/python/operator-overloading</li> <li>[15] https://realpython.com/operator-function-overloading/</li> <li>[16] https://docs.python.org/3/library/operator.html</li> <li>[17] https://openstax.org/books/introduction-python-programming/pages/11-4-overloading-operators</li> <li>[18] https://hyperskill.org/university/python/isinstance-in-python</li> <li>[19] https://www.codearmo.com/python-tutorial/object-orientated-programming-arithmetic-methods</li> <li>[20] https://discuss.python.org/t/how-to-overload-add-method-in-a-self-made-class-to-sum-multiple-objects-of-the-class/40543</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/03-single-inheritance/#table-of-operator-overloading-methods","title":"Table of operator overloading methods","text":"<p>Here is a table summarizing the main operators that can be overloaded in Python, along with their corresponding  special (magic/dunder) methods[2][3][4]:</p> Operator Symbol Operation Name Special Method + Addition <code>__add__</code> - Subtraction <code>__sub__</code> * Multiplication <code>__mul__</code> / True Division <code>__truediv__</code> // Floor Division <code>__floordiv__</code> % Modulo <code>__mod__</code> ** Power <code>__pow__</code> += In-place Addition <code>__iadd__</code> -= In-place Subtraction <code>__isub__</code> *= In-place Multiplication <code>__imul__</code> /= In-place True Division <code>__itruediv__</code> //= In-place Floor Division <code>__ifloordiv__</code> %= In-place Modulo <code>__imod__</code> **= In-place Power <code>__ipow__</code> - (unary) Negation <code>__neg__</code> + (unary) Unary Plus <code>__pos__</code> ~ Bitwise NOT <code>__invert__</code> Greater Than <code>__gt__</code> &gt;= Greater Than or Equal <code>__ge__</code> [] Indexing <code>__getitem__</code> []= Item Assignment <code>__setitem__</code> del [] Item Deletion <code>__delitem__</code> () Call <code>__call__</code> str() String Conversion <code>__str__</code> repr() Representation <code>__repr__</code> len() Length <code>__len__</code> hash() Hashing <code>__hash__</code> bool() Truth Value <code>__bool__</code> <p>This table covers the most commonly overloaded operators. There are additional magic methods for bitwise operations,  attribute access, context management, and more, but these are the core operators you will typically overload in custom  classes[2][3][4].</p> References <ul> <li>[1] https://www.programiz.com/python-programming/operator-overloading</li> <li>[2] https://wiingy.com/learn/python/operator-overloading-in-python/</li> <li>[3] https://docs.python.org/3/reference/datamodel.html</li> <li>[4] https://docs.python.org/3/library/operator.html</li> <li>[5] https://www.wscubetech.com/resources/python/operator-overloading</li> <li>[6] https://www.stat.berkeley.edu/~spector/extension/python/notes/node109.html</li> <li>[7] https://pythonflood.com/python-operator-overloading-a-comprehensive-guide-c96c22176646</li> <li>[8] https://peps.python.org/pep-0335/</li> <li>[9] https://www.pythonlikeyoumeanit.com/Module4_OOP/Special_Methods.html</li> <li>[10] https://www.w3schools.com/python/python_operators.asp</li> <li>[11] https://realpython.com/python-magic-methods/</li> <li>[12] https://www.teach.cs.toronto.edu/~csc110y/fall/notes/A-python-builtins/03-special-methods.html</li> <li>[13] https://openstax.org/books/introduction-python-programming/pages/11-4-overloading-operators</li> <li>[14] https://python-course.eu/oop/magic-methods.php</li> <li>[15] https://www.pythonmorsels.com/every-dunder-method/</li> <li>[16] https://github.com/milaan9/06_Python_Object_Class/blob/main/004_Python_Operator_Overloading.ipynb</li> <li>[17] https://stackoverflow.com/questions/64582940/table-of-python-operand-types</li> <li>[18] https://www.algorystcorner.com/operator-overloading-in-python/</li> <li>[19] https://stackoverflow.com/questions/2400635/comprehensive-guide-to-operator-overloading-in-python</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/","title":"4. Polymorphism","text":"<p>Polymorphism in Python operates quite differently from Java, primarily due to Python\u2019s dynamic typing system and its emphasis on behavior over explicit type declarations.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#polymorphism-in-python","title":"Polymorphism in Python","text":"<p>Polymorphism in Python is the ability of different objects to respond to the same method or function call in different ways. Python implements polymorphism through several mechanisms:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#duck-typing","title":"Duck Typing","text":"<p>Python\u2019s most distinctive approach to polymorphism is duck typing, which follows the principle: \u201cIf it walks like a  duck and quacks like a duck, then it must be a duck.\u201d This means Python focuses on an object\u2019s behavior (methods and attributes) rather than its specific type[4][7].</p> <p>For example:</p> <pre><code>def make_it_sound(obj):\n    obj.sound()\n\n\nclass Duck:\n    def sound(self):\n        print(\"Quack!\")\n\n\nclass Person:\n    def sound(self):\n        print(\"I'm quacking like a duck!\")\n\n\n# Both objects work with the same function\nduck = Duck()\nperson = Person()\nmake_it_sound(duck)  # Output: Quack!\nmake_it_sound(person)  # Output: I'm quacking like a duck!\n</code></pre> <p>The <code>make_it_sound</code> function doesn\u2019t care about the object\u2019s type; it only cares that the object has a <code>sound()</code> method[4].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#function-polymorphism","title":"Function Polymorphism","text":"<p>Python\u2019s built-in functions often exhibit polymorphic behavior. The <code>len()</code> function is a prime example:</p> <pre><code>print(len(\"Hello\"))  # 5 (string)\nprint(len([1, 2, 3, 4]))  # 4 (list)\nprint(len({\"a\": 1, \"b\": 2}))  # 2 (dictionary)\n</code></pre> <p>The same function behaves differently based on the input type[2].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#operator-overloading","title":"Operator Overloading","text":"<p>Python supports operator overloading through special methods like <code>__add__</code>, <code>__mul__</code>, etc.:</p> <pre><code># + operator with integers\na = 10 + 15  # 25\n\n# + operator with strings\nb = 'A' + 'B'  # 'AB'\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#polymorphism-in-java-vs-python","title":"Polymorphism in Java vs. Python","text":"<p>The key differences in how polymorphism works in these languages include:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#method-overloading","title":"Method Overloading","text":"<p>Java supports compile-time (static) polymorphism through method overloading:</p> <pre><code>public static int add(int a, int b) {\n    return a + b;\n}\n\npublic static int add(int a, int b, int c) {\n    return a + b + c;\n}\n</code></pre> <p>Python doesn\u2019t support true method overloading. When you define multiple methods with the same name, only the last one is considered[5]. Instead, Python typically uses default parameters:</p> <pre><code>def add(a, b, c=None):\n    if c is None:\n        return a + b\n    else:\n        return a + b + c\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#type-checking","title":"Type Checking","text":"<p>Java implements polymorphism through strict inheritance hierarchies and interfaces. It relies on static typing and type checking at compile time.</p> <p>Python uses duck typing, focusing on what an object can do rather than what it is. It doesn\u2019t require explicit inheritance relationships for polymorphic behavior[3][6].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#implementation-approach","title":"Implementation Approach","text":"<p>Java\u2019s polymorphism is explicit and requires formal class relationships:</p> <pre><code>@Override\npublic void makeSound() {\n    System.out.println(\"Dog barks\");\n}\n</code></pre> <p>Python\u2019s polymorphism is implicit and more flexible:</p> <pre><code>class Bird:\n    def fly(self):\n        pass\n\n\nclass Airplane:\n    def fly(self):\n        print(\"Airplane flies\")\n\n\n# Both can be used interchangeably despite no inheritance relationship\ndef perform_flight(flying_object):\n    flying_object.fly()\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/04-polymorphism/#duck-typing-in-detail","title":"Duck Typing in Detail","text":"<p>Duck typing is a core concept in Python that emphasizes an object\u2019s behavior over its type. The principle states that \u201d if it walks like a duck and quacks like a duck, then it must be a duck\u201d[4][6][7].</p> <p>This approach offers several advantages:</p> <ul> <li>Creates more flexible and reusable code</li> <li>Supports polymorphism without rigid type hierarchies</li> <li>Results in simpler, more concise code</li> </ul> <p>However, it also has disadvantages:</p> <ul> <li>Can lead to runtime errors if expected methods are missing</li> <li>May make code harder to understand without type hints</li> </ul> <p>Duck typing is particularly powerful when creating generic functions that can work with any object that implements a specific interface:</p> <pre><code>class Duck:\n    def quack(self):\n        print(\"Quack!\")\n\n\nclass Car:\n    def quack(self):\n        print(\"I can quack, too!\")\n\n\ndef quacks(obj):\n    obj.quack()\n\n\n# Both work despite being completely different classes\nquacks(Duck(\"Donald\"))\nquacks(Car(\"Tesla\"))\n</code></pre> <p>This flexibility is a fundamental aspect of Python\u2019s design philosophy, allowing developers to focus more on what objects can do rather than what they are.</p> References <ul> <li>[1] https://codedamn.com/news/python/polymorphism-in-python-with-an-example</li> <li>[2] https://www.almabetter.com/bytes/tutorials/python/python-inheritance-and-polymorphism</li> <li>[3] https://www.datacamp.com/blog/python-vs-java</li> <li>[4] https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing</li> <li>[5] https://stackoverflow.com/questions/61138173/polymorphism-in-python-vs-polymorphism-in-java</li> <li>[6] https://builtin.com/articles/python-duck-typing</li> <li>[7] https://realpython.com/duck-typing-python/</li> <li>[8] https://realpython.com/python3-object-oriented-programming/</li> <li>[9] https://www.reddit.com/r/learnpython/comments/13sdpoq/anyone_have_a_solid_understanding_in_polymorphism/</li> <li>[10] https://www.youtube.com/watch?v=tHN8I_4FIt8</li> <li>[11] https://www.w3schools.com/python/python_polymorphism.asp</li> <li>[12] https://herovired.com/learning-hub/blogs/java-vs-python/</li> <li>[13] https://www.reddit.com/r/javahelp/comments/13qow9l/are_javas_oop_concepts_much_different_than_pythons/</li> <li>[14] https://edbennett.github.io/python-oop-novice/06-duck/index.html</li> <li>[15] https://en.wikipedia.org/wiki/Duck_typing</li> <li>[16] https://stackoverflow.com/questions/4205130/what-is-duck-typing</li> <li>[17] https://www.reddit.com/r/learnpython/comments/14p49ua/confusion_about_duck_typing/</li> <li>[18] https://www.youtube.com/watch?v=rIWQ4584Uqk</li> <li>[19] https://www.simplilearn.com/polymorphism-in-python-article</li> <li>[20] https://www.edureka.co/blog/polymorphism-in-python/</li> <li>[21] https://www.programiz.com/python-programming/polymorphism</li> <li>[22] https://discuss.python.org/t/polymorphism-in-python/25178</li> <li>[23] https://www.activestate.com/blog/java-versus-python-key-programming-differences-in-2021/</li> <li>[24] https://www.rose-hulman.edu/class/cs/csse220/201130/Resources/Python_vs_Java.html</li> <li>[25] https://realpython.com/oop-in-python-vs-java/</li> <li>[26] https://www.youtube.com/watch?v=Qe03kCuTMoU</li> <li>[27] https://ioflood.com/blog/duck-typing/</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/","title":"5. Multiple Inheritance","text":"<p>Multiple inheritance in Python is a powerful feature that allows a class to inherit attributes and methods from more than one parent class. This is a significant difference from Java, which only supports single inheritance for classes (though Java does allow implementing multiple interfaces).</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#how-multiple-inheritance-works-in-python","title":"How Multiple Inheritance Works in Python","text":"<p>In Python, multiple inheritance is implemented by listing all parent classes in the class definition, separated by commas:</p> <pre><code>class Parent1:\n    def method1(self):\n        print(\"Method from Parent1\")\n\n\nclass Parent2:\n    def method2(self):\n        print(\"Method from Parent2\")\n\n\nclass Child(Parent1, Parent2):\n    pass\n\n\n# Creating an instance\nchild = Child()\nchild.method1()  # Output: Method from Parent1\nchild.method2()  # Output: Method from Parent2\n</code></pre> <p>In this example, the <code>Child</code> class inherits methods from both <code>Parent1</code> and <code>Parent2</code>, allowing it to use both <code>method1()</code> and <code>method2()</code>.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#practical-example-the-mythical-unicorn","title":"Practical Example: The Mythical Unicorn","text":"<p>Let\u2019s consider a more concrete example using a mythical creature:</p> <pre><code>class Horse:\n    def __init__(self, name):\n        self.name = name\n\n    def run(self):\n        return f\"{self.name} is running.\"\n\n    def eat_hay(self):\n        return f\"{self.name} is eating hay.\"\n\n\nclass Narwhal:\n    def swim(self):\n        return f\"{self.name} is swimming.\"\n\n    def has_horn(self):\n        return True\n\n\nclass Unicorn(Horse, Narwhal):\n    def magic_powers(self):\n        return f\"{self.name} is using magical powers!\"\n</code></pre> <p>Here, <code>Unicorn</code> inherits characteristics from both <code>Horse</code> (running, eating hay) and <code>Narwhal</code> (swimming, having a horn), plus adds its own unique ability.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#method-resolution-order-mro","title":"Method Resolution Order (MRO)","text":"<p>When a method is called on an instance, Python needs to determine which implementation to use, especially if multiple parent classes define the same method. Python uses the C3 linearization algorithm to establish a Method Resolution Order (MRO):</p> <pre><code>class A:\n    def greet(self):\n        return \"Hello from A\"\n\n\nclass B:\n    def greet(self):\n        return \"Hello from B\"\n\n\nclass C(A, B):\n    pass\n\n\nc = C()\nprint(c.greet())  # Output: Hello from A\nprint(C.__mro__)  # Shows the method resolution order\n</code></pre> <p>The method from the first parent class in the inheritance list (<code>A</code> in this case) is used.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#advantages-of-multiple-inheritance","title":"Advantages of Multiple Inheritance","text":"<ol> <li> <p>Code Reusability: Allows combining functionalities from different classes, reducing code duplication.</p> </li> <li> <p>Flexibility in Class Design: Enables creating complex class structures by inheriting from multiple base classes.</p> </li> <li> <p>Modularity: Supports creating mixins (specialized classes providing specific functionality) that can be combined    with various classes.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#disadvantages-of-multiple-inheritance","title":"Disadvantages of Multiple Inheritance","text":"<ol> <li> <p>Ambiguity and Name Clashes: When multiple parent classes define methods with the same name, it can lead to    confusion.</p> </li> <li> <p>Complexity and Maintenance: As the inheritance hierarchy grows, understanding and maintaining the relationships    between classes becomes more challenging.</p> </li> <li> <p>Diamond Problem: When a class inherits from two classes that have a common ancestor, ambiguity can arise about    which implementation to use.</p> </li> <li> <p>Tight Coupling: Changes in one base class may have unintended effects on derived classes.</p> </li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#the-diamond-problem","title":"The Diamond Problem","text":"<p>The diamond problem is a specific challenge in multiple inheritance:</p> <pre><code>class A:\n    def method(self):\n        print(\"Method from A\")\n\n\nclass B(A):\n    def method(self):\n        print(\"Method from B\")\n\n\nclass C(A):\n    def method(self):\n        print(\"Method from C\")\n\n\nclass D(B, C):\n    pass\n\n\nd = D()\nd.method()  # Which method gets called?\n</code></pre> <p>Python\u2019s MRO resolves this by following a specific order, but it\u2019s still a complexity to be aware of.</p> <p>Multiple inheritance is a powerful tool in Python, but it should be used judiciously. When used appropriately, it can lead to elegant, modular code. When overused, it can create maintenance challenges.</p> References <ul> <li>[1] https://dev.to/gayathridevi_manojkumar_d/understanding-multiple-inheritance-in-python-and-java-1ig</li> <li>[2] https://realpython.com/lessons/multiple-inheritance-python/</li> <li>[3] https://www.digitalocean.com/community/tutorials/understanding-class-inheritance-in-python-3</li> <li>[4] https://www.scientecheasy.com/2023/09/multiple-inheritance-in-python.html/</li> <li>[5] https://blog.stackademic.com/python-classes-and-the-power-of-multiple-inheritance-5a551e124603</li> <li>[6] https://python.plainenglish.io/multiple-inheritance-in-python-a-basic-guide-with-examples-124ee08e7f62</li> <li>[7] https://python-course.eu/oop/multiple-inheritance.php</li> <li>[8] https://www.programiz.com/python-programming/multiple-inheritance</li> <li>[9] https://pythonflood.com/python-multiple-inheritance-concept-of-mixins-39897e1fe363</li> <li>[10] https://realpython.com/oop-in-python-vs-java/</li> <li>[11] https://softwareengineering.stackexchange.com/questions/100993/multiple-inheritance-use-cases</li> <li>[12] https://en.wikipedia.org/wiki/Multiple_inheritance</li> <li>[13] https://stackoverflow.com/questions/3277367/how-does-pythons-super-work-with-multiple-inheritance</li> <li>[14] https://stackoverflow.com/questions/7371765/overview-of-differences-between-inheritance-in-python-and-java</li> <li>[15] https://www.youtube.com/watch?v=1-JBFJ8Xar0</li> <li>[16] https://docs.python.org/3/tutorial/classes.html</li> <li>[17] https://softwareengineering.stackexchange.com/questions/441290/what-is-the-use-of-multiple-inheritance-in-languages-like-c-and-python</li> <li>[18] https://realpython.com/inheritance-composition-python/</li> <li>[19] https://www.w3schools.com/python/python_inheritance.asp</li> <li>[20] https://coderanch.com/t/776418/languages/multiple-inheritance-Python-diamond-Java</li> <li>[21] https://www.datacamp.com/tutorial/python-inheritance</li> <li>[22] https://stackoverflow.com/questions/31478542/when-does-multiple-inheritance-come-in-handy</li> <li>[23] https://www.youtube.com/watch?v=Q8YlYHjksLo</li> <li>[24] https://www.reddit.com/r/learnpython/comments/j3ji6h/is_inheritance_really_bad_practice/</li> <li>[25] https://www.krayonnz.com/user/doubts/detail/61cecb93cecf1c00406d04b3/what-are-the-advantages-and-disadvantages-of-multiple-inheritance</li> <li>[26] https://stackoverflow.com/questions/766441/what-are-the-pros-and-cons-of-having-multiple-inheritance</li> <li>[27] https://stackoverflow.com/questions/66038465/multiple-inheritance-python-issue</li> <li>[28] https://30dayscoding.com/blog/advantages-and-disadvantages-of-inheritance</li> <li>[29] https://www.datacamp.com/tutorial/super-multiple-inheritance-diamond-problem</li> <li>[30] https://trainings.internshala.com/blog/python-inheritance/</li> <li>[31] https://softwareengineering.stackexchange.com/questions/218458/is-there-any-real-reason-multiple-inheritance-is-hated</li> <li>[32] https://d3kfrrhrj36vzx.cloudfront.net/images/1647972785374_xtwhyoqe.jpg?sa=X&amp;ved=2ahUKEwjAt9auhr2MAxXhdPUHHS99OoYQ_B16BAgMEAI</li> <li>[33] https://www.digitalocean.com/community/tutorials/multiple-inheritance-in-java</li> <li>[34] https://www.scaler.com/topics/multiple-inheritance-in-python/</li> <li>[35] https://how.dev/answers/what-is-multiple-inheritance-in-python</li> <li>[36] https://towardsai.net/p/l/python-inheritance-common-practices-and-pitfalls-diamond-problem-mixins-and-others</li> <li>[37] https://data-flair.training/blogs/python-multiple-inheritance/</li> <li>[38] https://openstax.org/books/introduction-python-programming/pages/13-5-multiple-inheritance-and-mixin-classes</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#how-super-works-with-multiple-inheritance-in-python","title":"How <code>super()</code> Works with Multiple Inheritance in Python","text":"<p>When a Python class inherits from two or more classes, the behavior of <code>super()</code> is determined by the method resolution order (MRO), as discussed above.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#which-class-does-super-refer-to","title":"Which Class Does <code>super()</code> Refer To?","text":"<p>In a class that inherits from multiple parent classes, <code>super()</code> refers to the next class in the MRO, not necessarily the first parent listed in the class definition. For example:</p> <pre><code>class A:\n    def __init__(self):\n        print(\"A initialized\")\n\n\nclass B:\n    def __init__(self):\n        print(\"B initialized\")\n\n\nclass C(A, B):\n    def __init__(self):\n        super().__init__()\n        print(\"Child initialized\")\n\n\nchild = C()\n</code></pre> <p>Output:</p> <pre><code>A initialized\nC initialized\n</code></pre> <p>Here, <code>super().__init__()</code> in <code>Child</code> calls <code>A.__init__()</code> because <code>A</code> is the next class in the MRO after <code>C</code>[5][6]. The MRO for <code>C</code> is <code>[C, A, B, object]</code>.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#how-to-refer-to-the-other-parent-class","title":"How to Refer to the Other Parent Class?","text":"<p>If you want to explicitly call a method from a specific parent class (not just the next in the MRO), you can do so by directly referencing the class:</p> <pre><code>class C(A, B):\n    def __init__(self):\n        super().__init__()  # Calls A.__init__()\n        B.__init__(self)  # Explicitly calls B.__init__()\n        print(\"C initialized\")\n</code></pre> <p>This way, both parent initializers are called, but be cautious-if both parent classes call <code>super()</code>, you may end up calling the same method multiple times, depending on the MRO and class design[1][5].</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#advanced-use-customizing-super","title":"Advanced Use: Customizing <code>super()</code>","text":"<p>You can also customize where <code>super()</code> starts its search by passing arguments:</p> <pre><code>super(B, self).__init__()\n</code></pre> <p>This tells Python to start looking for the method after <code>Parent2</code> in the MRO of <code>self</code>[7]. This is rarely needed in typical class designs, but it can be useful in advanced multiple inheritance scenarios.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#summary-table","title":"Summary Table","text":"Scenario What <code>super()</code> Calls How to Call the Other Parent Multiple inheritance <code>C(A, B)</code> Next class in MRO after current Explicitly: <code>B.method(self, ...)</code> Customizing <code>super()</code> After specified class in MRO Use <code>super(C, self).method()</code>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#key-points","title":"Key Points","text":"<ul> <li><code>super()</code> always refers to the next class in the MRO, not necessarily the first parent in the class definition[6][5].</li> <li>To call a specific parent class\u2019s method, use the parent class name directly.</li> <li>Be careful with multiple inheritance and <code>super()</code> to avoid duplicate calls or missed initializations.</li> </ul> <p>For most cases, stick to using <code>super()</code> consistently and design your classes to cooperate with it, especially when building frameworks or mixins[6][7].</p> References <ul> <li>[1] https://stackoverflow.com/questions/3277367/how-does-pythons-super-work-with-multiple-inheritance</li> <li>[2] https://docs.vultr.com/python/built-in/super</li> <li>[3] https://www.datacamp.com/tutorial/super-multiple-inheritance-diamond-problem</li> <li>[4] https://www.digitalocean.com/community/tutorials/python-super</li> <li>[5] https://www.geeksforgeeks.org/python-multiple-inheritance-with-super-function/</li> <li>[6] https://realpython.com/lessons/multiple-inheritance-python/</li> <li>[7] https://realpython.com/python-super/</li> <li>[8] https://www.programiz.com/python-programming/multiple-inheritance</li> <li>[9] https://www.geeksforgeeks.org/multiple-inheritance-in-python/</li> <li>[10] https://www.sololearn.com/en/Discuss/1934244/super-with-multiple-inheritance</li> <li>[11] https://www.reddit.com/r/learnpython/comments/z9e00j/what_is_the_point_of_the_super_function_in_python/</li> <li>[12] https://aviadr1.github.io/learn-advanced-python/06_multiple_inheritance_and_super/multiple_inheritance_and_super.html</li> <li>[13] https://stackoverflow.com/questions/14206015/pythons-multiple-inheritance-picking-which-super-to-call</li> <li>[14] https://www.youtube.com/watch?v=PA3Lnkqz1Ww</li> <li>[15] https://blog.hubspot.com/website/python-super</li> <li>[16] https://www.w3schools.com/python/python_inheritance.asp</li> <li>[17] https://discuss.python.org/t/make-super-work-in-a-class-definition/48845</li> <li>[18] https://www.reddit.com/r/learnpython/comments/ndyce5/a_question_about_super_and_multiple_inheritance/</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#example-with-the-diamond-problem","title":"Example with the diamond problem","text":"<pre><code>class Alpha:\n    def __init__(self):\n        print(\"Alpha initialized\")\n\n\nclass A(Alpha):\n    def __init__(self):\n        super().__init__()\n        print(\"A initialized\")\n\n\nclass B(Alpha):\n    def __init__(self):\n        super().__init__()\n        print(\"B initialized\")\n\n\nclass C(A, B):\n    def __init__(self):\n        super().__init__()  # Calls A.__init__()\n        B.__init__(self)  # Explicitly calls B.__init__()\n        print(\"C initialized\")\n\n\nchild = C()\nprint(C.__mro__)\n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#output","title":"Output","text":"<pre><code>Alpha initialized\nB initialized\nA initialized\nAlpha initialized\nB initialized\nC initialized\n(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.Alpha'&gt;, &lt;class 'object'&gt;)\n</code></pre> <p>Why do we get multiple calls to the exact same <code>__init__</code> methods ?</p> <p>Let\u2019s break down why this happens step-by-step:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#key-explanation","title":"Key Explanation","text":"<p>The output occurs because of two factors:</p> <ol> <li>Method Resolution Order (MRO) in multiple inheritance</li> <li>Explicit call to <code>B.__init__</code> in class <code>C</code></li> </ol> <p>Here\u2019s how the code executes:</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#execution-flow","title":"Execution Flow","text":"<ol> <li><code>C()</code> is created \u2192 Calls <code>C.__init__</code></li> <li><code>super().__init__()</code> in <code>C</code> \u2192 Follows MRO to call <code>A.__init__</code></li> <li><code>A.__init__</code> runs:<ul> <li><code>super().__init__()</code> \u2192 Next in MRO is <code>B</code> (not <code>Alpha</code>!), so <code>B.__init__</code> runs</li> <li><code>B.__init__</code> \u2192 <code>super().__init__()</code> calls <code>Alpha.__init__</code> (prints \u201cAlpha initialized\u201d)</li> <li><code>B.__init__</code> completes (prints \u201cB initialized\u201d)</li> <li>Back to <code>A.__init__</code> (prints \u201cA initialized\u201d)</li> </ul> </li> <li>Explicit <code>B.__init__(self)</code> in <code>C</code> \u2192 Directly calls <code>B.__init__</code> again:<ul> <li><code>super().__init__()</code> \u2192 Calls <code>Alpha.__init__</code> again (prints \u201cAlpha initialized\u201d)</li> <li><code>B.__init__</code> completes again (prints \u201cB initialized\u201d)</li> </ul> </li> <li><code>C.__init__</code> finishes (prints \u201cC initialized\u201d)</li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#why-mro-matters","title":"Why MRO Matters","text":"<p>The MRO for <code>C</code> is <code>C \u2192 A \u2192 B \u2192 Alpha \u2192 object</code> (visible in the output). This means:</p> <ul> <li>When <code>super()</code> is called in <code>A</code>, it looks for the next class in the MRO chain (<code>B</code>), not <code>A</code>\u2019s direct parent (   <code>Alpha</code>).</li> </ul>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#why-alpha-appears-twice","title":"Why \u201cAlpha\u201d Appears Twice?","text":"<ol> <li>First \u201cAlpha\u201d comes from the <code>A \u2192 B \u2192 Alpha</code> chain via <code>super()</code> in <code>C</code></li> <li>Second \u201cAlpha\u201d comes from the explicit <code>B.__init__</code> call in <code>C</code>, which triggers <code>B \u2192 Alpha</code> again</li> </ol>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#how-to-fix-this-if-needed","title":"How to Fix This (If Needed)","text":"<p>If you want to avoid duplicate initializations:</p> <pre><code>class C(A, B):\n    def __init__(self):\n        # Let MRO handle all parent initializations\n        super().__init__()  # Follows C\u2192A\u2192B\u2192Alpha chain\n        print(\"C initialized\")\n</code></pre> <p>Output with this fix:</p> <pre><code>Alpha initialized\nB initialized\nA initialized\nC initialized\n(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.Alpha'&gt;, &lt;class 'object'&gt;) \n</code></pre>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/05-multiple-inheritance/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>MRO determines <code>super()</code> behavior, not just parent classes</li> <li>Explicit parent calls (<code>B.__init__</code>) bypass MRO and can cause duplicates</li> <li>Consistent <code>super()</code> usage is safer in complex inheritance</li> </ol> <p>Don\u2019t forget to run <code>print(C.__mro__)</code> to see the exact method resolution order.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate   explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the   author.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/06-abc/","title":"6. Abstract Base Classes (ABC)","text":"<p>ABC in Python stands for Abstract Base Class, which is a class that cannot be instantiated on its own and serves as a blueprint for other classes. ABCs are designed to define a common interface for a group of related classes, ensuring that derived classes implement particular methods from the base class.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/06-abc/#using-abcs-in-python","title":"Using ABCs in Python","text":"<p>To create an abstract base class in Python, you need to:</p> <ol> <li> <p>Import the necessary components from the <code>abc</code> module:    <pre><code>from abc import ABC, abstractmethod\n</code></pre></p> </li> <li> <p>Create a class that inherits from <code>ABC</code>:    <pre><code>class Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n    @abstractmethod\n    def perimeter(self):\n        pass\n</code></pre></p> </li> <li> <p>Use the <code>@abstractmethod</code> decorator to mark methods that must be implemented by subclasses.</p> </li> </ol> <p>Attempting to instantiate an abstract class or a subclass that hasn\u2019t implemented all abstract methods will raise a <code>TypeError</code>.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/06-abc/#abcs-with-single-inheritance","title":"ABCs with Single Inheritance","text":"<p>In single inheritance, a class inherits from one abstract base class:</p> <pre><code>class Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14159 * self.radius ** 2\n\n    def perimeter(self):\n        return 2 * 3.14159 * self.radius\n</code></pre> <p>The concrete class <code>Circle</code> must implement all abstract methods defined in the <code>Shape</code> ABC. If any abstract method is not implemented, Python will raise a <code>TypeError</code> when you try to instantiate the class.</p>"},{"location":"1.%20Intro%20to%20Python/B.%20OOP%20in%20Python/06-abc/#abcs-with-multiple-inheritance","title":"ABCs with Multiple Inheritance","text":"<p>Python supports multiple inheritance, allowing a class to inherit from multiple parent classes, including abstract base classes:</p> <pre><code>class Drawable(ABC):\n    @abstractmethod\n    def draw(self):\n        pass\n\n\nclass Printable(ABC):\n    @abstractmethod\n    def print_info(self):\n        pass\n\n\nclass Square(Shape, Drawable):\n    def __init__(self, side):\n        self.side = side\n\n    def area(self):\n        return self.side ** 2\n\n    def perimeter(self):\n        return 4 * self.side\n\n    def draw(self):\n        print(\"Drawing a square\")\n</code></pre> <p>When using multiple inheritance with ABCs:</p> <ol> <li>The derived class must implement all abstract methods from all parent ABCs.</li> <li>Python uses Method Resolution Order (MRO) to determine which method to call when there are methods with the same name    in different parent classes.</li> <li>You can check the MRO using <code>ClassName.__mro__</code> or <code>ClassName.mro()</code>.</li> </ol> <p>ABCs are particularly useful for:</p> <ul> <li>Enforcing that derived classes implement particular methods</li> <li>Designing frameworks or libraries where specific behavior needs to be enforced</li> <li>Implementing consistent APIs across classes</li> <li>Providing a foundational framework for a class hierarchy</li> </ul> <p>Remember that ABCs are meant to be inherited from, not instantiated directly, making them an excellent tool for defining interfaces and ensuring consistent implementation across related classes.</p> References <ul> <li>[1] https://realpython.com/ref/glossary/abstract-base-class/</li> <li>[2] https://dbader.org/blog/abstract-base-classes-in-python</li> <li>[3] https://realpython.com/inheritance-composition-python/</li> <li>[4] https://www.scholarhat.com/tutorial/python/inheritance-in-python</li> <li>[5] https://edube.org/learn/python-advanced-1/abstract-classes-vs-method-overriding-multiple-inheritance</li> <li>[6] https://www.programiz.com/python-programming/multiple-inheritance</li> <li>[7] https://www.digitalocean.com/community/tutorials/understanding-class-inheritance-in-python-3</li> <li>[8] https://www.datacamp.com/tutorial/python-abstract-classes</li> <li>[9] https://www.datacamp.com/tutorial/python-inheritance</li> <li>[10] https://realpython.com/lessons/multiple-inheritance-python/</li> <li>[11] https://30dayscoding.com/blog/abc-import-abc-abstractmethod-python</li> <li>[12] https://geekpython.in/abc-in-python</li> <li>[13] https://www.youtube.com/watch?v=97V7ICVeTJc</li> <li>[14] https://stackoverflow.com/questions/3570796/why-use-abstract-base-classes-in-python</li> <li>[15] https://blog.teclado.com/python-abc-abstract-base-classes/</li> <li>[16] https://www.youtube.com/watch?v=kaZceE16m5A</li> <li>[17] https://python-course.eu/oop/the-abc-of-abstract-base-classes.php</li> <li>[18] https://docs.python.org/3/library/collections.abc.html</li> <li>[19] https://stackoverflow.com/questions/76283254/inheriting-from-an-abstract-class-and-defining-an-abstract-method-to-be-an-exist</li> <li>[20] https://softwareengineering.stackexchange.com/questions/445327/abstract-base-classes-and-mix-ins-in-python</li> <li>[21] https://www.w3schools.com/python/python_inheritance.asp</li> <li>[22] https://python.plainenglish.io/python-tutorial-21-python-inheritance-single-multiple-multilevel-5eca0f4ae257</li> <li>[23] https://docs.python.org/3/tutorial/classes.html</li> <li>[24] https://stackoverflow.com/questions/28799089/python-abc-multiple-inheritance</li> <li>[25] https://docs.python.org/3/library/abc.html</li> <li>[26] https://pybit.es/articles/elevate-your-python-harnessing-the-power-of-abstract-base-classes-abcs/</li> <li>[27] https://earthly.dev/blog/abstract-base-classes-python/</li> <li>[28] https://dev.to/dollardhingra/understanding-the-abstract-base-class-in-python-k7h</li> <li>[29] https://stackoverflow.com/questions/56008847/when-should-one-inherit-from-abc</li> <li>[30] https://www.cs.unb.ca/~bremner/teaching/cs2613/books/python3-doc/library/abc.html</li> <li>[31] https://www.youtube.com/watch?v=mRIeUXhIAxg</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/","title":"1. Creating Your First GUI Application","text":"<p>PyQt6 is a powerful toolkit for developing cross-platform graphical user interface (GUI) applications using  Python. It provides Python bindings for the Qt framework, allowing developers to create professional-looking desktop applications that run on Windows, macOS, and Linux platforms. This guide will introduce you to PyQt6 with a simple Hello World application and cover installation procedures.</p>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#installing-pyqt6","title":"Installing PyQt6","text":"<p>PyQt6 can be installed either through the command line using <code>pip</code> or through the PyCharm IDE interface. Here are instructions for both methods:</p>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#command-line-installation","title":"Command Line Installation","text":"<p>Installing PyQt6 is straightforward using <code>pip</code>, Python\u2019s package installer. Open your command prompt or terminal  and run the following command:</p> <pre><code>pip install PyQt6\n</code></pre> <p>For Mac users, you might need to use <code>pip3</code> instead:</p> <pre><code>pip3 install PyQt6\n</code></pre> <p>You can verify the installation by checking the version:</p> <pre><code>pyuic6 --version\n</code></pre> <p>If the command displays version information, PyQt6 is successfully installed[5].</p>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#installing-pyqt6-through-pycharm","title":"Installing PyQt6 through PyCharm","text":"<p>If you\u2019re using PyCharm IDE, you can install PyQt6 through its built-in package manager:</p> <ol> <li>Open your Python project in PyCharm</li> <li>Go to <code>File &gt; New Project Setup &gt; Settings</code> (or <code>File &gt; Settings</code> for existing projects)</li> <li>Navigate to <code>Python Interpreter</code> section</li> <li>Select the appropriate Python interpreter for your project</li> <li>Click the <code>+</code> icon to add a new package</li> <li>Search for <code>PyQt6</code> in the search box</li> <li>Select <code>PyQt6</code> and click <code>Install Package</code></li> <li>Once completed, you\u2019ll see a success message: <code>Package PyQt6 installed successfully</code>[3]</li> </ol> <p>Alternatively, you can use the Python Packages tool window to install PyQt6. Here\u2019s how you can do it:</p> <ol> <li> <p>Open PyCharm and Your Project    Launch PyCharm and open the project where you want to install PyQt6.</p> </li> <li> <p>Locate the Python Packages Tool Window </p> </li> </ol> <ul> <li>Look at the bottom or side panel of the PyCharm interface for the Python Packages tool window.  </li> <li>If you don\u2019t see it, you can open it from the sidebar or via <code>View &gt; Tool Windows &gt; Python Packages</code>[3][5].</li> </ul> <ol> <li>Search for PyQt6 </li> </ol> <ul> <li>In the search bar at the top of the Python Packages window, type <code>PyQt6</code>[3][5].</li> <li>PyCharm will show you the PyQt6 package (and possibly related packages).</li> </ul> <ol> <li>Install PyQt6 </li> </ol> <ul> <li>Click on <code>PyQt6</code> in the search results.</li> <li>You\u2019ll see an Install button next to the package name. Click it to start the installation[3][5].</li> <li>Optionally, you can select a specific version before installing[2][5].</li> </ul> <ol> <li>Verify Installation </li> </ol> <ul> <li>After installation, <code>PyQt6</code> should appear in your list of installed packages in the same window[3].</li> <li>You can now import and use PyQt6 in your project.</li> </ul> <p>Tips</p> <ul> <li>The Python Packages tool window also allows you to view package documentation, upgrade, or uninstall packages    easily[3][4][5].</li> <li>Always make sure you have the correct Python interpreter selected for your project to avoid installation issues[1][2].</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#your-first-pyqt6-application-hello-world","title":"Your First PyQt6 Application: Hello World","text":"<p>Let\u2019s create a simple PyQt6 application that displays a \u201cHello World\u201d message in a centered label. This basic example will introduce you to the fundamental concepts of PyQt6 programming.</p> <pre><code>import sys\nfrom PyQt6.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout\nfrom PyQt6.QtCore import Qt\n\n\nclass MainWindow(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        # Set window properties\n        self.setWindowTitle(\"PyQt6 Hello World\")\n        self.setGeometry(100, 100, 400, 200)  # x, y, width, height\n\n        # Create a label with text\n        label = QLabel(\"Hello World!\")\n\n        # Set font size for better visibility\n        font = label.font()\n        font.setPointSize(20)\n        label.setFont(font)\n\n        # Create layout and add label\n        layout = QVBoxLayout()\n        layout.addWidget(label)\n\n        # Center the label in the layout\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        # Apply layout to the window\n        self.setLayout(layout)\n\n\nif __name__ == '__main__':\n    # Create the application\n    app = QApplication(sys.argv)\n\n    # Create and show the main window\n    window = MainWindow()\n    window.show()\n\n    # Start the event loop\n    sys.exit(app.exec())\n</code></pre> <p></p>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#understanding-the-code","title":"Understanding the Code","text":"<p>Let\u2019s break down the Hello World example to understand how PyQt6 works:</p>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#basic-structure-and-imports","title":"Basic Structure and Imports","text":"<pre><code>import sys\nfrom PyQt6.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout\nfrom PyQt6.QtCore import Qt\n</code></pre> <p>These lines import the necessary modules from PyQt6:</p> <ul> <li><code>QApplication</code>: The foundation for any PyQt application</li> <li><code>QWidget</code>: The base class for all UI objects</li> <li><code>QLabel</code>: Widget for displaying text</li> <li><code>QVBoxLayout</code>: Vertical layout manager</li> <li><code>Qt</code>: Contains various constants and enumerations[4][8]</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#creating-the-application","title":"Creating the Application","text":"<pre><code>app = QApplication(sys.argv)\n</code></pre> <p>This creates a QApplication instance. Every PyQt application must have exactly one QApplication object, which manages the application\u2019s control flow and main settings. The <code>sys.argv</code> parameter allows the application to accept command-line arguments, though it\u2019s not necessary for simple applications[4].</p>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#defining-the-main-window","title":"Defining the Main Window","text":"<p>We create a custom class <code>MainWindow</code> that inherits from <code>QWidget</code>. In the constructor:</p> <ol> <li>We set the window title and dimensions with <code>setWindowTitle()</code> and <code>setGeometry()</code></li> <li>We create a <code>QLabel</code> widget with the text \u201cHello World!\u201d</li> <li>We increase the font size for better visibility</li> <li>We create a vertical layout (<code>QVBoxLayout</code>) and add our label to it</li> <li>We center the label using <code>setAlignment()</code></li> <li>We apply the layout to our window with <code>setLayout()</code>[8]</li> </ol>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#starting-the-application","title":"Starting the Application","text":"<pre><code>window = MainWindow()\nwindow.show()\nsys.exit(app.exec())\n</code></pre> <p>These lines create an instance of our MainWindow, display it on screen with <code>show()</code>, and start the application\u2019s event loop with <code>app.exec()</code>. The event loop is responsible for processing user interactions and updating the UI[4].</p>"},{"location":"2.%20PyQt/A.%20Introduction/01-hello-world/#conclusion","title":"Conclusion","text":"<p>This introduction has covered the basics of PyQt6: installation, creating a simple window, and adding a centered label. The \u201cHello World\u201d example demonstrates the fundamental structure of a PyQt6 application, including:</p> <ol> <li>Creating an application object</li> <li>Setting up a window</li> <li>Adding widgets (in this case, a label)</li> <li>Arranging widgets using layouts</li> <li>Running the application\u2019s event loop</li> </ol> <p>As you continue learning PyQt6, you\u2019ll discover many more widgets and features that allow you to create sophisticated desktop applications. You can build on this foundation to add buttons, input fields, menus, dialogs, and much more.</p> <p>For beginners just starting with GUI programming, PyQt6 offers a good balance between ease of use and powerful features, making it an excellent choice for Python developers looking to create desktop applications.</p> References <ul> <li>[1] https://wiki.qt.io/Qt_for_Python_Tutorial_HelloWorld</li> <li>[2] https://discuss.python.org/t/pyqt6-module-not-found/67372</li> <li>[3] https://www.youtube.com/watch?v=JXRWwYzeDLc</li> <li>[4] https://doc.qt.io/qtforpython-6/tutorials/basictutorial/widgets.html</li> <li>[5] https://abhinavtej.hashnode.dev/installing-pyqt6-and-pyside6-on-windows-and-mac</li> <li>[6] https://pythonpyqt.com/how-to-install-pyqt5-in-pycharm/</li> <li>[7] https://pythonbasics.org/pyqt-hello-world/</li> <li>[8] https://www.pythontutorial.net/pyqt/pyqt-qlabel/</li> <li>[9] https://www.pythonguis.com/tutorials/pyqt6-creating-your-first-window/</li> <li>[10] https://python-qt-tutorial.readthedocs.io/en/latest/1.hello.html</li> <li>[11] https://www.youtube.com/watch?v=FoD7MOm4KY4</li> <li>[12] https://www.youtube.com/watch?v=NU3DQwMKz00</li> <li>[13] https://stackoverflow.com/questions/71491747/pycharm-support-for-pyqt6-on-m1</li> <li>[14] https://www.tutorialspoint.com/pyqt/pyqt_qlabel_widget.htm</li> <li>[15] https://www.pythonguis.com/installation/install-pyqt6-mac/</li> <li>[16] https://discuss.python.org/t/solved-module-pyqt6-not-found/33554</li> <li>[17] https://www.pythonguis.com/tutorials/pyqt6-widgets/</li> <li>[18] https://pypi.org/project/PyQt6/</li> <li>[19] https://youtrack.jetbrains.com/issue/PY-51291/PyQt6-support</li> <li>[20] https://stackoverflow.com/questions/21538615/hello-world-in-pyqt</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited, and completed \nby the author.\n</code></pre>"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/","title":"2. Layouts Overview","text":"<p>PyQt6 provides several layout managers that automatically arrange widgets within windows, ensuring your GUI adapts well to resizing and different screen sizes. Here\u2019s an overview of the main layouts available:</p>"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/#1-qvboxlayout","title":"1. QVBoxLayout","text":"<ul> <li>Arranges widgets vertically, from top to bottom.</li> <li>Each widget is placed below the previous one.</li> <li>Commonly used for stacking elements in a column.</li> <li>Example: A settings panel with labels and input fields stacked vertically[1][2][5][6].</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/#2-qhboxlayout","title":"2. QHBoxLayout","text":"<ul> <li>Arranges widgets horizontally, from left to right.</li> <li>Each widget is placed to the right of the previous one.</li> <li>Useful for toolbars, button rows, or any horizontal grouping[1][2][3][5][6].</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/#3-qgridlayout","title":"3. QGridLayout","text":"<ul> <li>Arranges widgets in a two-dimensional grid (rows and columns).</li> <li>Widgets can span multiple rows or columns.</li> <li>Ideal for forms, calculators, or any layout requiring tabular alignment[1][2][5][6].</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/#4-qformlayout","title":"4. QFormLayout","text":"<ul> <li>Specifically designed for forms: pairs labels and fields in two columns.</li> <li>Left column: labels; right column: input widgets (e.g., text fields, combo boxes).</li> <li>Simpler and more readable than QGridLayout when you only need two columns[4][6][7].</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/#5-qstackedlayout","title":"5. QStackedLayout","text":"<ul> <li>Stacks widgets on top of each other; only one widget is visible at a time.</li> <li>Useful for implementing tabbed interfaces or wizards where you switch between different views[1].</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/#6-qsplitter","title":"6. QSplitter","text":"<ul> <li>Not a layout, but a container widget that arranges child widgets horizontally or vertically with adjustable dividers.</li> <li>Allows the user to resize panels interactively[4].</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/#summary-table","title":"Summary Table","text":"Layout Arrangement Typical Use Case QVBoxLayout Vertical (top-down) Stacked widgets, forms, settings panels QHBoxLayout Horizontal (left-right) Toolbars, button rows QGridLayout Grid (rows/columns) Calculators, complex forms QFormLayout Label-field pairs Data entry forms QStackedLayout Stacked (one visible at a time) Wizards, tabbed interfaces QSplitter Resizable panels Split views (file explorers, editors)"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/#nesting-layouts","title":"Nesting Layouts","text":"<p>You can nest layouts inside each other to create complex, responsive interfaces. For example, a horizontal layout might contain several vertical layouts, each managing a column of widgets[1][2].</p>"},{"location":"2.%20PyQt/A.%20Introduction/02-layouts/#choosing-a-layout","title":"Choosing a Layout","text":"<ul> <li>Use QVBoxLayout or QHBoxLayout for simple linear arrangements.</li> <li>Use QGridLayout for tabular or matrix-like layouts.</li> <li>Use QFormLayout for clean, two-column forms.</li> <li>Use QStackedLayout when you need to swap between multiple views in the same space.</li> <li>Use QSplitter for resizable panels.</li> </ul> <p>These layout managers ensure your application looks professional and adapts gracefully to window resizing[6][7].</p> References <ul> <li>[1] https://www.pythonguis.com/tutorials/pyqt6-layouts/</li> <li>[2] https://www.youtube.com/watch?v=Cc_zaUbF4LM</li> <li>[3] https://realpython.com/python-pyqt-layout/</li> <li>[4] https://www.pythonguis.com/tutorials/pyqt6-qt-designer-gui-layout/</li> <li>[5] https://zetcode.com/pyqt6/layout/</li> <li>[6] https://doc.qt.io/qt-6/layout.html</li> <li>[7] https://doc.qt.io/qt-6/qtwidgets-layouts-basiclayouts-example.html</li> <li>[8] https://doc.qt.io/qtforpython-6/overviews/qtquicklayouts-overview.html</li> <li>[9] https://doc.qt.io/qt-6/qlayout.html</li> <li>[10] https://www.youtube.com/live/trpI4ezSnlQ</li> <li>[11] https://www.reddit.com/r/learnpython/comments/1f4xidk/really_confused_with_pyqt6_layout_management/</li> <li>[12] https://www.youtube.com/watch?v=_16NK5LZPes</li> <li>[13] https://stackoverflow.com/questions/75924821/how-to-keep-layouts-in-a-horizontal-layout-the-same-size-pyqt</li> <li>[14] https://www.youtube.com/watch?v=cLoeJ7UVNno</li> <li>[15] https://www.youtube.com/watch?v=trpI4ezSnlQ</li> <li>[16] https://stackoverflow.com/questions/67307726/pyqt6-confused-about-nesting-layouts-or-widgets</li> <li>[17] https://doc.qt.io/qtforpython-6.5/overviews/layout.html</li> </ul> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/","title":"3. Widgets Overview","text":"<p>PyQt6 offers a wide range of widgets to build interactive and user-friendly GUI applications. Here are some of the most commonly used widgets:</p>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#1-qlabel","title":"1. QLabel","text":"<ul> <li>Displays text or images.</li> <li>Often used for labels, instructions, or displaying information.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#2-qpushbutton","title":"2. QPushButton","text":"<ul> <li>A clickable button.</li> <li>Used to trigger actions or events.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#3-qlineedit","title":"3. QLineEdit","text":"<ul> <li>Single-line text input field.</li> <li>Used for user input such as names, passwords, or search queries.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#4-qtextedit","title":"4. QTextEdit","text":"<ul> <li>Multi-line text input and display.</li> <li>Suitable for larger text input or rich text display.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#5-qcheckbox","title":"5. QCheckBox","text":"<ul> <li>A box that can be checked or unchecked.</li> <li>Used for binary options or toggles.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#6-qradiobutton","title":"6. QRadioButton","text":"<ul> <li>A button in a group where only one can be selected.</li> <li>Used for mutually exclusive options.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#7-qcombobox","title":"7. QComboBox","text":"<ul> <li>A drop-down list.</li> <li>Allows selection from multiple options.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#8-qlistwidget","title":"8. QListWidget","text":"<ul> <li>Displays a list of items.</li> <li>Supports selection and interaction with list elements.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#9-qslider","title":"9. QSlider","text":"<ul> <li>A slider control for selecting a value from a range.</li> <li>Useful for volume control, brightness, or other continuous values.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#10-qprogressbar","title":"10. QProgressBar","text":"<ul> <li>Displays progress of a task.</li> <li>Useful for showing completion status.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#11-qspinbox","title":"11. QSpinBox","text":"<ul> <li>A numeric input with up/down arrows.</li> <li>Used for integer input within a range.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#12-qdial","title":"12. QDial","text":"<ul> <li>A round dial control.</li> <li>Alternative to sliders for selecting values.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#13-qtabwidget","title":"13. QTabWidget","text":"<ul> <li>Provides tabbed navigation.</li> <li>Useful for organizing content in tabs.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#14-qtablewidget","title":"14. QTableWidget","text":"<ul> <li>Displays data in a table format.</li> <li>Supports editing, sorting, and selection.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#15-qtreewidget","title":"15. QTreeWidget","text":"<ul> <li>Displays hierarchical data in a tree structure.</li> <li>Useful for file explorers or nested data.</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#summary-table","title":"Summary Table","text":"Widget Description Typical Use Case QLabel Displays text or images Labels, instructions QPushButton Clickable button Triggering actions QLineEdit Single-line text input User input fields QTextEdit Multi-line text input/display Larger text input or display QCheckBox Checkable box Binary options QRadioButton Exclusive selection button Mutually exclusive options QComboBox Drop-down list Selecting from options QListWidget List of items Item selection and interaction QSlider Slider control Selecting values continuously QProgressBar Progress indicator Task progress display QSpinBox Numeric input with arrows Integer input within range QDial Round dial control Alternative to sliders QTabWidget Tabbed navigation Organizing content in tabs QTableWidget Table display Data display and editing QTreeWidget Hierarchical tree display Nested data visualization"},{"location":"2.%20PyQt/A.%20Introduction/03-widgets/#using-widgets","title":"Using Widgets","text":"<p>Widgets can be combined and arranged using layouts to create functional and visually appealing interfaces. Each widget has properties and signals that allow customization and interaction handling. This overview provides a foundation for exploring PyQt6 widgets and building GUI applications.</p> Use of AI <pre><code>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate\nexplanations, examples and/or structure suggestions. All information has been verified, edited and completed by the\nauthor.\n</code></pre>"},{"location":"2.%20PyQt/A.%20Introduction/04-box-layouts-examples/","title":"4. Box Layouts Examples","text":""},{"location":"2.%20PyQt/A.%20Introduction/04-box-layouts-examples/#qvboxlayout-example","title":"<code>QVBoxLayout</code> Example","text":"<p>Here is a simple example of using a <code>QVBoxLayout</code> in PyQt6 to arrange multiple widgets-<code>QLabel</code>, <code>QPushButton</code>, <code>QLineEdit</code>, <code>QCheckBox</code>, and <code>QRadioButton</code>-vertically in a window. This example does not connect any event functions; the widgets are for display only.</p> <pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout,\n    QLabel, QPushButton, QLineEdit, QCheckBox, QRadioButton\n)\n\n\nclass MainWindow(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"VBox Layout Example\")\n\n        # Create the layout\n        layout = QVBoxLayout()\n\n        # Create widgets\n        label = QLabel(\"This is a QLabel\")\n        button = QPushButton(\"This is a QPushButton\")\n        line_edit = QLineEdit(\"This is a QLineEdit\")\n        checkbox = QCheckBox(\"This is a QCheckBox\")\n        radio_button = QRadioButton(\"This is a QRadioButton\")\n\n        # Add widgets to the layout (top to bottom)\n        layout.addWidget(label)\n        layout.addWidget(button)\n        layout.addWidget(line_edit)\n        layout.addWidget(checkbox)\n        layout.addWidget(radio_button)\n\n        # Set the layout on the main window\n        self.setLayout(layout)\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p></p>"},{"location":"2.%20PyQt/A.%20Introduction/04-box-layouts-examples/#how-it-works","title":"How it works","text":"<ul> <li>A <code>QVBoxLayout</code> is created and assigned to the window.</li> <li>Each widget is created and added to the layout using <code>addWidget</code>, so they appear stacked vertically in the order   added.</li> <li>No event handlers are connected; the widgets are static for now.</li> </ul> <p>This pattern is the standard approach for arranging widgets vertically in PyQt6 and can be easily extended or modified as your application grows[2][4][5].</p> References <ul> <li>[1] https://stackoverflow.com/questions/52692943/pyqt5-trying-to-use-qgridlayout-to-organise-my-qlabel-qlineedit-qpushbutton-a</li> <li>[2] https://www.pythonguis.com/tutorials/pyqt6-layouts/</li> <li>[3] https://realpython.com/python-pyqt-gui-calculator/</li> <li>[4] https://www.pythontutorial.net/pyqt/pyqt-qvboxlayout/</li> <li>[5] https://python-qt-tutorial.readthedocs.io/en/latest/3.layout.html</li> <li>[6] https://www.pythonguis.com/tutorials/pyqt6-widgets/</li> <li>[7] https://www.pythonguis.com/tutorials/pyqt-basic-widgets/</li> <li>[8] https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QVBoxLayout.html</li> <li>[9] https://github.com/pyqt/examples/blob/_/src/02%20PyQt%20Widgets/main.py</li> <li>[10] https://realpython.com/python-pyqt-layout/</li> <li>[11] https://stackabuse.com/working-with-pythons-pyqt-framework/</li> <li>[12] https://stackoverflow.com/questions/75810922/how-to-add-repeat-the-same-widget-on-qvboxlayout</li> <li>[13] https://www.pythonguis.com/tutorials/pyqt6-signals-slots-events/</li> <li>[14] https://doc.qt.io/qt-6/qpushbutton.html</li> <li>[15] https://forum.qt.io/topic/96888/making-widgets-touch-stick-together-in-a-layout</li> <li>[16] https://stackoverflow.com/questions/78165786/pyqt6-custom-signals-and-slots-connection</li> <li>[17] https://build-system.fman.io/pyqt5-tutorial</li> <li>[18] https://stackoverflow.com/questions/26614310/works-with-qgridlayout-not-with-qvboxlayout</li> <li>[19] https://www.pythontutorial.net/pyqt/pyqt-qradiobutton/</li> <li>[20] https://forum.qt.io/topic/138719/how-can-attributes-of-a-widget-that-triggered-a-clicked-connect-function-call-be-accessed</li> </ul>"},{"location":"2.%20PyQt/A.%20Introduction/04-box-layouts-examples/#setting-a-light-theme","title":"Setting a light theme","text":"<p>One issue with the previous example is that with the default dark theme used by the operating system on which these  notes and examples are written, the checkboxes and the radio buttons are not clearly visible. A more complete coverage of themes will come in a later section, but for now, here is a simple way to set a light theme for an application.</p> <ol> <li>Install the <code>pyqtdarktheme</code> package with the command <code>pip install pyqtdarktheme</code>, or through the IDE\u2019s package     manager.</li> <li>Import the package at the top of the file with <code>import qdarktheme</code>.</li> <li>Set the application\u2019s stylesheet this way: <pre><code>if __name__ == '__main__':\n    app = QApplication(sys.argv)\n    app.setStyleSheet(qdarktheme.load_stylesheet(\"light\"))\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec())\n</code></pre></li> </ol> <p>And you get:</p> <p></p>"},{"location":"2.%20PyQt/A.%20Introduction/04-box-layouts-examples/#qvboxlayout-example_1","title":"<code>QVBoxLayout</code> Example","text":"<p>Here is a simple PyQt6 example using a <code>QHBoxLayout</code> to arrange a <code>QComboBox</code>, <code>QListWidget</code>, <code>QSlider</code>, <code>QSpinBox</code>, and <code>QDial</code> horizontally in a window. This example does not connect any event handlers; the widgets are just displayed side by side:</p> <pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QWidget, QHBoxLayout,\n    QComboBox, QListWidget, QSlider, QSpinBox, QDial\n)\nfrom PyQt6.QtCore import Qt\n\n\nclass MainWindow(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"HBox Layout Example\")\n\n        # Create the layout\n        layout = QHBoxLayout()\n\n        # Create widgets\n        combo = QComboBox()\n        combo.addItems([\"Option 1\", \"Option 2\", \"Option 3\"])\n\n        list_widget = QListWidget()\n        list_widget.addItems([\"Item A\", \"Item B\", \"Item C\"])\n\n        slider = QSlider(Qt.Orientation.Horizontal)\n        slider.setMinimum(0)\n        slider.setMaximum(100)\n        slider.setValue(50)\n\n        spinbox = QSpinBox()\n        spinbox.setMinimum(0)\n        spinbox.setMaximum(100)\n        spinbox.setValue(10)\n\n        dial = QDial()\n        dial.setMinimum(0)\n        dial.setMaximum(100)\n        dial.setValue(25)\n\n        # Add widgets to the layout (left to right)\n        layout.addWidget(combo)\n        layout.addWidget(list_widget)\n        layout.addWidget(slider)\n        layout.addWidget(spinbox)\n        layout.addWidget(dial)\n\n        # Set the layout on the main window\n        self.setLayout(layout)\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p></p>"},{"location":"2.%20PyQt/A.%20Introduction/04-box-layouts-examples/#how-it-works_1","title":"How it works","text":"<ul> <li>A <code>QHBoxLayout</code> is created and set as the window\u2019s layout.</li> <li>Each widget is created and configured with some example data.</li> <li>The widgets are added to the layout in the order: <code>QComboBox</code>, <code>QListWidget</code>, <code>QSlider</code>, <code>QSpinBox</code>, <code>QDial</code>.</li> <li>The result is a window with all five widgets arranged horizontally, side by side[2][3][5][9].</li> </ul> <p>This is a standard approach for arranging widgets horizontally in PyQt6.</p> References <ul> <li>[1] https://www.pythonguis.com/tutorials/pyqt6-layouts/</li> <li>[2] https://www.pythontutorial.net/pyqt/pyqt-qhboxlayout/</li> <li>[3] https://doc.qt.io/qt-6/qhboxlayout.html</li> <li>[4] https://zetcode.com/pyqt6/layout/</li> <li>[5] https://www.tutorialspoint.com/pyqt/pyqt_qhboxlayout.htm</li> <li>[6] https://www.pythontutorial.net/pyqt/pyqt-qcombobox/</li> <li>[7] https://doc.qt.io/qt-6/qtwidgets-layouts-basiclayouts-example.html</li> <li>[8] https://doc.qt.io/qt-6/qcombobox.html</li> <li>[9] https://realpython.com/python-pyqt-layout/</li> <li>[10] https://www.pythonguis.com/tutorials/pyqt6-widgets/</li> <li>[11] https://www.youtube.com/watch?v=Cc_zaUbF4LM</li> <li>[12] https://www.pythonguis.com/tutorials/pyqt-basic-widgets/</li> <li>[13] https://www.pythonguis.com/tutorials/pyqt6-qt-designer-gui-layout/</li> <li>[14] https://doc.qt.io/qt-6/stylesheet-examples.html</li> <li>[15] https://stackoverflow.com/questions/77107483/change-qhboxlayout-border-color-when-widget-clicked</li> <li>[16] https://forum.qt.io/topic/158910/pyqt6-selecting-multiple-items-from-a-qcombobox</li> <li>[17] https://www.youtube.com/live/WnHkx-AvTBA</li> <li>[18] https://doc.qt.io/qt-6/qslider.html</li> <li>[19] https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QSlider.html</li> <li>[20] https://stackoverflow.com/questions/67086226/qtable-get-qspinbox-qcombobox-value</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/A.%20Introduction/05-grid-layout-example/","title":"5. Grid Layout Examples","text":""},{"location":"2.%20PyQt/A.%20Introduction/05-grid-layout-example/#example-1","title":"Example 1","text":"<p>Here\u2019s how you can create a 3 by 5 grid (3 rows and 5 columns) using <code>QGridLayout</code> and <code>QLabel</code> widgets in PyQt6. Each label will indicate its cell\u2019s row and column:</p> <pre><code>import sys\nfrom PyQt6.QtWidgets import QApplication, QWidget, QLabel, QGridLayout\n\n\nclass MainWindow(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"QGridLayout 3x5 Example\")\n\n        # Create a QGridLayout instance\n        layout = QGridLayout()\n\n        # Add QLabel widgets to the 3x5 grid\n        for row in range(3):\n            for col in range(5):\n                label = QLabel(f\"Row {row}, Col {col}\")\n                layout.addWidget(label, row, col)\n\n        # Set the layout on the main window\n        self.setLayout(layout)\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p></p>"},{"location":"2.%20PyQt/A.%20Introduction/05-grid-layout-example/#how-it-works","title":"How it works","text":"<ul> <li>The outer loop runs for 3 rows (<code>range(3)</code>)</li> <li>The inner loop runs for 5 columns (<code>range(5)</code>)</li> <li>Each cell of the grid is filled with a <code>QLabel</code> indicating its row and column position</li> </ul> <p>This will display a window with a 3 by 5 grid of labels.</p>"},{"location":"2.%20PyQt/A.%20Introduction/05-grid-layout-example/#example-2","title":"Example 2","text":"<p>It is possible for a widget in a <code>QGridLayout</code> to occupy more than one row and/or column. You can achieve this by  using the <code>addWidget()</code> method with additional arguments specifying the row span and column span[1][2][3][5].</p> <p>Below is a practical example:  </p> <ul> <li>A <code>QTextEdit</code> spans two rows and two columns (top-left of the grid).</li> <li>A <code>QListWidget</code> spans one row and two columns (top-right).</li> <li>A <code>QPushButton</code> spans two rows and one column (bottom-left).</li> <li>A <code>QLabel</code> occupies a single cell (bottom-right).</li> </ul> <pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QWidget, QGridLayout,\n    QTextEdit, QListWidget, QPushButton, QLabel\n)\nfrom PyQt6.QtGui import QPalette, QColor\n\nclass ColorWidget(QWidget):\n    def __init__(self, color):\n        super().__init__()\n        palette = self.palette()\n        palette.setColor(self.backgroundRole(), QColor(color))\n        self.setAutoFillBackground(True)\n        self.setPalette(palette)\n        self.setMinimumHeight(24)  # Set minimum height to ensure visibility\n\n\nclass MainWindow(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"QGridLayout with Spanning and Highlights\")\n\n        layout = QGridLayout()\n\n        # QTextEdit spanning 2 rows and 2 columns (top-left)\n        text_edit = QTextEdit(\"QTextEdit\\n(2 rows x 2 cols)\")\n        layout.addWidget(text_edit, 0, 0, 2, 2)\n\n        # QListWidget spanning 1 row and 2 columns (top-right)\n        list_widget = QListWidget()\n        list_widget.addItems([\"Item 1\", \"Item 2\", \"Item 3\"])\n        layout.addWidget(list_widget, 0, 2, 1, 2)\n\n        # Fill the cell under the QListWidget (row 1, cols 2 and 3) with colored widgets\n        layout.addWidget(ColorWidget(\"lightblue\"), 1, 2)\n        layout.addWidget(ColorWidget(\"lightgreen\"), 1, 3)\n\n        # QPushButton spanning 2 rows and 1 column (bottom-left)\n        button = QPushButton(\"Spanning Button\\n(2 rows x 1 col)\")\n        layout.addWidget(button, 2, 0, 2, 1)\n\n        # Fill the cell to the right of the button (row 2, col 1)\n        layout.addWidget(ColorWidget(\"yellow\"), 2, 1)\n\n        # QLabel in a single cell (row 2, col 2)\n        label = QLabel(\"Single Cell Label\")\n        layout.addWidget(label, 2, 2)\n\n        # Fill the remaining cells in row 2\n        layout.addWidget(ColorWidget(\"orange\"), 2, 3)\n\n        # Fill the last row (row 3, cols 1-3) with colored widgets\n        layout.addWidget(ColorWidget(\"pink\"), 3, 1)\n        layout.addWidget(ColorWidget(\"violet\"), 3, 2)\n        layout.addWidget(ColorWidget(\"lightgray\"), 3, 3)\n\n        self.setLayout(layout)\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p></p>"},{"location":"2.%20PyQt/A.%20Introduction/05-grid-layout-example/#explanation","title":"Explanation","text":"<ul> <li>The <code>addWidget()</code> method can take <code>row</code>, <code>column</code>, <code>rowSpan</code>, and <code>columnSpan</code> arguments, allowing widgets to    cover multiple grid cells[1][2][3][5].</li> <li>This approach is useful for creating flexible, complex layouts where some widgets need more space than others.</li> <li>The <code>ColorWidget</code> class uses the palette to set the background color and calls <code>setAutoFillBackground(True)</code> to ensure    the color is visible.</li> <li>The <code>ColorWidget</code>s are used to help see what would otherwise be non-visible empty cells, and to clearly see that    some other widgets span more than one row and/or more than one column. </li> </ul> <p>You can adjust the spans and positions to fit your application\u2019s needs.</p> References <ul> <li>[1] https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QGridLayout.html</li> <li>[2] https://doc.qt.io/qt-6/qgridlayout.html</li> <li>[3] https://www.pythontutorial.net/pyqt/pyqt-qgridlayout/</li> <li>[4] https://doc.qt.io/qt-6/qtwidgets-layouts-basiclayouts-example.html</li> <li>[5] https://www.tutorialspoint.com/pyqt/pyqt_qgridlayout_class.htm</li> <li>[6] https://forum.qt.io/topic/90710/making-qpushbuttons-span-multiple-columns-in-qgridlayout</li> <li>[7] https://stackoverflow.com/questions/14277184/a-widget-contained-in-more-than-one-cell-in-a-qgridlayout-is-not-centered</li> <li>[8] https://stackoverflow.com/questions/13039858/rowspan-of-qgridlayout-not-working-as-expected</li> <li>[9] https://pyside.github.io/docs/pyside/PySide/QtGui/QGridLayout.html</li> <li>[10] https://zetcode.com/pyqt6/layout/</li> <li>[11] https://devlog42.github.io/qtgrid/tutorial/</li> <li>[12] https://www.sololearn.com/en/Discuss/3289245/qt-column-occupied-issue-with-add-widgets</li> <li>[13] https://realpython.com/python-pyqt-layout/</li> <li>[14] https://python-forum.io/thread-38375.html</li> <li>[15] https://www.klayout.de/doc/code/class_QGridLayout.html</li> <li>[16] https://www.youtube.com/watch?v=Cc_zaUbF4LM</li> <li>[17] https://forum.pythonguis.com/t/spaning-widgets-over-two-columns-in-a-gridlayout/1375</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/A.%20Introduction/06-form/","title":"6. Form Layout","text":"<p>Here is a complete example of a PyQt6 form for entering a new \u201cPerson\u201d object, using <code>QFormLayout</code> and including fields for first name, last name, email, date of birth, student status (checkbox), and several other attributes. This example follows best practices as described here[2][4]:</p> <pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QWidget, QFormLayout, QLineEdit,\n    QDateEdit, QCheckBox, QComboBox, QSpinBox, QPushButton\n)\nfrom PyQt6.QtCore import QDate\n\n\nclass PersonForm(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"New Person Entry Form\")\n\n        # Create the form layout\n        layout = QFormLayout()\n\n        # First name\n        self.first_name_edit = QLineEdit()\n        layout.addRow(\"First Name:\", self.first_name_edit)\n\n        # Last name\n        self.last_name_edit = QLineEdit()\n        layout.addRow(\"Last Name:\", self.last_name_edit)\n\n        # Email\n        self.email_edit = QLineEdit()\n        layout.addRow(\"Email:\", self.email_edit)\n\n        # Date of Birth\n        self.dob_edit = QDateEdit()\n        self.dob_edit.setCalendarPopup(True)\n        self.dob_edit.setDate(QDate.currentDate())\n        layout.addRow(\"Date of Birth:\", self.dob_edit)\n\n        # Student (checkbox)\n        self.student_checkbox = QCheckBox(\"Is a student\")\n        layout.addRow(\"Student:\", self.student_checkbox)\n\n        # Gender (combobox)\n        self.gender_combo = QComboBox()\n        self.gender_combo.addItems([\"Select...\", \"Female\", \"Male\", \"Other\"])\n        layout.addRow(\"Gender:\", self.gender_combo)\n\n        # Age (spinbox)\n        self.age_spin = QSpinBox()\n        self.age_spin.setRange(0, 120)\n        layout.addRow(\"Age:\", self.age_spin)\n\n        # Country (combobox)\n        self.country_combo = QComboBox()\n        self.country_combo.addItems([\"Select...\", \"Canada\", \"USA\", \"Other\"])\n        layout.addRow(\"Country:\", self.country_combo)\n\n        # Add a submit button at the end\n        self.submit_button = QPushButton(\"Submit\")\n        layout.addRow(self.submit_button)\n\n        self.setLayout(layout)\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = PersonForm()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p></p>"},{"location":"2.%20PyQt/A.%20Introduction/06-form/#features","title":"Features","text":"<ul> <li>Uses <code>QFormLayout</code> for a clean, two-column form[2][4].</li> <li>Each row pairs a label with an input widget.</li> <li>Includes line edits, date picker, checkbox, combo boxes, and spin box for a realistic \u201cPerson\u201d entry form.</li> <li>A submit button is provided at the bottom.</li> </ul> <p>You can easily add or remove attributes by following the same pattern with <code>layout.addRow(label, widget)</code>. This form is responsive and follows platform look-and-feel standards[2][4].</p> References <ul> <li>[1] https://www.youtube.com/watch?v=cLoeJ7UVNno</li> <li>[2] https://www.pythontutorial.net/pyqt/pyqt-qformlayout/</li> <li>[3] https://www.youtube.com/watch?v=DM8Ryoot7MI</li> <li>[4] https://www.tutorialspoint.com/pyqt/pyqt_qformlayout_class.htm</li> <li>[5] https://www.youtube.com/watch?v=Cc_zaUbF4LM</li> <li>[6] https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QFormLayout.html</li> <li>[7] https://doc.qt.io/qt-6/qformlayout.html</li> <li>[8] https://realpython.com/python-pyqt-layout/</li> <li>[9] https://doc-snapshots.qt.io/qtforpython-6.8/PySide6/QtWidgets/QFormLayout.html</li> <li>[10] https://www.pythonguis.com/tutorials/pyqt6-widgets/</li> <li>[11] https://www.pythonguis.com/tutorials/pyqt6-qt-designer-gui-layout/</li> <li>[12] https://forum.qt.io/topic/4750/how-to-properly-handle-user-input-with-multiple-fields</li> <li>[13] https://stackoverflow.com/questions/5219946/how-do-i-create-a-tree-view-with-checkbox-inside-a-combo-box-pyqt/5291844</li> <li>[14] https://realpython.com/python-pyqt-gui-calculator/</li> <li>[15] https://www.qtcentre.org/threads/8247-Suggestions-for-checkbox-form-layout</li> <li>[16] https://www.pythonguis.com/tutorials/pyqt6-layouts/</li> <li>[17] https://www.youtube.com/watch?v=h-gpcoiEVe4</li> <li>[18] https://stackoverflow.com/questions/59418762/hwo-to-implement-qformlayout-with-multiple-rows-and-columns</li> <li>[19] https://stackoverflow.com/questions/72665404/checkbox-in-qtableview-pyqt6</li> <li>[20] https://stackoverflow.com/questions/26552108/setting-up-the-form-layout-in-correct-way-qgridlayout-addlayoutqlayout-int-i</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/B.%20Signals/01-button-click/","title":"1. Introduction to Event Handling","text":"<p>Event handling is central to creating interactive GUI applications. In PyQt, events, such as button clicks, mouse movements, or key presses, are managed using a powerful mechanism called signals and slots. This system allows  you to respond to user actions in a clean and decoupled way[1][4][5].</p> <ul> <li>Signal: An event notification emitted by a widget (e.g., a button emits a signal when clicked).</li> <li>Slot: A Python function or method that is called in response to a signal.</li> </ul> <p>When a signal is emitted (for example, when a button is clicked), any connected slot is executed. This is the core of event-driven programming in PyQt[1][4][5].</p>"},{"location":"2.%20PyQt/B.%20Signals/01-button-click/#events-implemented-using-signals-in-qt","title":"Events Implemented Using Signals in Qt","text":"<p>In Qt (and therefore PyQt), most user actions (events) are implemented as signals. Widgets emit signals when something happens (like a button being clicked), and you connect these signals to slots (functions) to define what should happen in response[1][4][5]. </p> <p>This is not exactly the same as the  Observer-Observable pattern, but signals and slots play a similar role. In a sense, widgets are observables, and slots are observers, and the signals are used by the observers (widgets) to contact (or execute)  the observables (slots).</p>"},{"location":"2.%20PyQt/B.%20Signals/01-button-click/#example-button-click-displays-a-random-number","title":"Example: Button Click Displays a Random Number","text":"<p>Below is a minimal PyQt6 example with a button and a label. When the button is clicked, a random integer between 1 and 100 (inclusive) is displayed in the label.</p> <pre><code>import sys\nimport random\nfrom PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel\n\n\nclass RandomNumberApp(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n\n    def init_ui(self):\n        self.layout = QVBoxLayout()\n\n        self.label = QLabel(\"Click the button to get a random number!\", self)\n        self.button = QPushButton(\"Generate Random Number\", self)\n\n        self.layout.addWidget(self.label)\n        self.layout.addWidget(self.button)\n        self.setLayout(self.layout)\n\n        # Connect the button's clicked signal to the slot (handler function)\n        self.button.clicked.connect(self.show_random_number)\n\n    def show_random_number(self):\n        number = random.randint(1, 100)\n        self.label.setText(f\"Random number: {number}\")\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = RandomNumberApp()\n    window.setWindowTitle(\"Random Number Generator\")\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p></p>"},{"location":"2.%20PyQt/B.%20Signals/01-button-click/#key-points","title":"Key Points","text":"<ul> <li>The <code>clicked</code> signal of the button is connected to the <code>show_random_number</code> method, which is called every time the   button is pressed[4].</li> <li>The application uses <code>app.exec()</code> to start the event loop, as required in PyQt6[4].</li> <li>All widgets are imported from <code>PyQt6.QtWidgets</code>[4][5].</li> </ul> <p>This is the recommended way to handle events (signals and slots) in PyQt6[4][5].</p>"},{"location":"2.%20PyQt/B.%20Signals/01-button-click/#summary","title":"Summary","text":"<ul> <li>PyQt uses signals and slots for event handling.</li> <li>Signals are emitted by widgets when events occur (like a button click).</li> <li>Slots are functions that respond to those signals.</li> <li>Connecting signals to slots allows you to define interactive behaviors in your GUI[1][4][5].</li> </ul> <p>This example demonstrates the basic pattern you\u2019ll use throughout PyQt development: connect widget signals to your own functions to make your application respond to user actions.</p> References <ul> <li>[1] https://www.tutorialspoint.com/pyqt/pyqt_signals_and_slots.htm</li> <li>[2] https://www.tutorialspoint.com/pyqt/pyqt_event_handling.htm</li> <li>[3] https://www.pythonguis.com/tutorials/pyqt-signals-slots-events/</li> <li>[4] https://blog.heycoach.in/pyqt-event-handling/</li> <li>[5] https://zetcode.com/gui/pyqt5/eventssignals/</li> <li>[6] https://www.pythonguis.com/tutorials/pyqt-signals-slots-events/</li> <li>[7] https://www.youtube.com/watch?v=N2JfygnWJaA</li> <li>[8] https://doc.qt.io/qt-6/signalsandslots.html</li> <li>[9] https://www.youtube.com/watch?v=3t8KhIdSGYQ</li> <li>[10] https://www.techwithtim.net/tutorials/python-module-walk-throughs/pyqt5-tutorial/buttons-and-events</li> <li>[11] https://www.linkedin.com/pulse/how-handle-widget-events-using-pyqt-signal-slot-mechanism-garcia</li> <li>[12] https://stackoverflow.com/questions/72962792/brief-explanations-of-using-pyqt5-slots-signal-emit-and-connect</li> <li>[13] https://www.w3resource.com/python-exercises/pyqt/pyqt_event_handling.php</li> <li>[14] https://www.youtube.com/watch?v=yS_4PSRyovk</li> <li>[15] https://www.tutorialspoint.com/pyqt5/pyqt5_signals_and_slots.htm</li> <li>[16] https://pythonpyqt.com/pyqt-events/</li> <li>[17] https://stackoverflow.com/questions/18567988/why-signals-and-slots-in-pyqt</li> <li>[18] https://stackoverflow.com/questions/72713580/how-to-create-a-new-label-when-a-button-is-pressed-in-pyqt5</li> <li>[19] https://stackoverflow.com/questions/45924498/how-to-change-label-text-until-pushbutton-clicked-in-pyqt/45924703</li> <li>[20] https://forum.qt.io/topic/138880/strange-behaviour-of-qpushbutton</li> <li>[21] https://stackoverflow.com/questions/10730131/create-dynamic-button-in-pyqt/10730209</li> <li>[22] https://www.youtube.com/watch?v=9pl55MxZlG4</li> <li>[23] https://discuss.streamlit.io/t/randomly-generate-a-number-and-save-this-number-and-user-input/20615</li> <li>[24] https://www.pythonguis.com/tutorials/creating-multiple-windows/</li> <li>[25] https://www.qtcentre.org/threads/67719-(PyQt4)-How-to-update-a-label-with-a-random-value-from-a-list</li> <li>[26] https://realpython.com/python-gui-tkinter/</li> <li>[27] https://forum.qt.io/topic/111831/dynamica-buttons-in-pyqt5</li> <li>[28] https://forum.pythonguis.com/t/real-time-change-of-widgets/587</li> <li>[29] https://forum.qt.io/topic/130419/pyqt5-how-to-change-qpushbutton-qlabel</li> <li>[30] https://stackabuse.com/working-with-pythons-pyqt-framework/</li> <li>[31] https://doc.qt.io/qtforpython-6/tutorials/basictutorial/signals_and_slots.html</li> <li>[32] https://blog.heycoach.in/pyqt-signals-and-slots/</li> <li>[33] https://wiki.qt.io/Qt_for_Python_Signals_and_Slots</li> <li>[34] https://www.tutorialspoint.com/pyqt/pyqt_action_event.htm</li> <li>[35] https://community.esri.com/t5/python-questions/random-number-of-a-random-number/td-p/581091</li> <li>[36] https://www.reddit.com/r/learnpython/comments/gkylp6/pyqt5_update_label_on_button_click/</li> <li>[37] https://stackoverflow.com/questions/44355154/generate-a-new-random-number-on-button-click</li> <li>[38] https://forum.inductiveautomation.com/t/assigning-a-random-number-to-a-tag-on-a-button-click/15115</li> <li>[39] https://stackoverflow.com/questions/48416936/pyqt5-update-labels-inrun-time/48477755</li> <li>[40] https://stackoverflow.com/questions/56009884/how-to-have-qlabel-update-as-various-numbered-pushbuttons-are-clicked</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited, and completed by  the author.</p>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/","title":"2. Example with a slider and a dial","text":"<p>Here\u2019s a PyQt6 example with a slider, dial, and label that stay synchronized (values 1-10):</p> <pre><code>import sys\nfrom PyQt6.QtWidgets import QApplication, QWidget, QSlider, QDial, QLabel, QVBoxLayout\nfrom PyQt6.QtCore import Qt\n\n\nclass LinkedControlsApp(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n\n    def init_ui(self):\n        layout = QVBoxLayout()\n\n        # Create controls with range 1-10\n        self.slider = QSlider(Qt.Orientation.Horizontal)\n        self.dial = QDial()\n        self.label = QLabel(\"Value: 1\")\n\n        # Set ranges\n        self.slider.setRange(1, 10)\n        self.dial.setRange(1, 10)\n\n        # Add to layout\n        layout.addWidget(self.slider)\n        layout.addWidget(self.dial)\n        layout.addWidget(self.label)\n        self.setLayout(layout)\n\n        # Connect signals with loop prevention\n        self.slider.valueChanged.connect(self.update_controls)\n        self.dial.valueChanged.connect(self.update_controls)\n\n    def update_controls(self, value):\n        # Prevent signal loops\n        sender = self.sender()\n\n        if isinstance(sender, QSlider):\n            widget = self.dial \n        else:\n            widget = self.slider\n\n        widget.blockSignals(True)\n        widget.setValue(value)\n        widget.blockSignals(False)\n\n        self.label.setText(f\"Value: {value}\")\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = LinkedControlsApp()\n    window.setWindowTitle(\"Linked Controls Demo\")\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p></p>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#key-features","title":"Key Features","text":"<ol> <li> <p>Synchronized Controls (<code>QSlider</code> and <code>QDial</code>):</p> <ul> <li>Moving either control updates the other instantly[4]</li> <li><code>blockSignals()</code> prevents infinite update loops[4]</li> </ul> </li> <li> <p>Value Display (<code>QLabel</code>):</p> <ul> <li>Automatically shows current value (1-10)</li> <li>Updates on any control change</li> </ul> </li> <li> <p>Range Management:</p> <ul> <li>Both controls restricted to 1-10 using <code>setRange()</code></li> <li>Integer-only values by default</li> </ul> </li> </ol>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#usage","title":"Usage","text":"<ul> <li>Slide the horizontal slider or rotate the dial</li> <li>Both controls and label will stay synchronized</li> <li>Values wrap automatically between 1 and 10</li> </ul> <p>This demonstrates PyQt6\u2019s signal/slot mechanism while handling common synchronization challenges in GUI development[1][4].</p> References <ul> <li>[1] https://www.w3resource.com/python-exercises/pyqt/python-pyqt-connecting-signals-to-slots-exercise-10.php</li> <li>[2] https://forum.qt.io/topic/44417/placing-a-label-next-to-a-slider-handle</li> <li>[3] https://doc.qt.io/qtforpython-6/PySide6/QtWidgets/QRadioButton.html</li> <li>[4] https://stackoverflow.com/questions/75156906/how-to-make-a-slider-which-has-a-label-can-show-above-the-handle-with-pyside2</li> <li>[5] https://www.youtube.com/watch?v=Adg2zQaAF-g</li> <li>[6] https://stackoverflow.com/questions/76745611/pyqt6-slider-not-moving</li> <li>[7] https://stackoverflow.com/questions/43251692/how-to-make-button-like-radiobuttons-in-pyqt</li> <li>[8] https://forum.qt.io/topic/159776/accessibility-issue-with-radio-buttons-in-pyqt6-setting</li> <li>[9] https://www.reddit.com/r/Python/comments/wedvzi/what_is_the_best_gui_library_for_python/</li> <li>[10] https://stackoverflow.com/questions/53532276/how-to-display-the-range-values-in-slider</li> <li>[11] https://www.qtcentre.org/threads/3904-array-of-radio-buttons</li> <li>[12] https://www.pythonguis.com/tutorials/pyqt6-widgets/</li> <li>[13] https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QSlider.html</li> <li>[14] https://www.pythonguis.com/tutorials/pyside6-widgets/</li> <li>[15] https://forum.qt.io/topic/22609/qslider-needs-to-step-with-custom-step-value-on-mouse-slide</li> <li>[16] https://coderslegacy.com/python/pyqt6-qradiobutton/</li> <li>[17] https://pysdr.org/content/pyqt.html</li> <li>[18] https://www.youtube.com/watch?v=DZ3-ij_JHE0</li> <li>[19] https://stackoverflow.com/questions/68931326/how-switch-between-two-graphs-and-maintain-radio-button-and-slider-updates-worki</li> <li>[20] https://stackoverflow.com/questions/47494941/python-pyqt4-qslider-interval-bigger-than-1</li> </ul>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#alternative-version-with-an-instance-attribute","title":"Alternative version with an instance attribute","text":"<p>Here\u2019s a modified version of <code>LinkedControlsApp</code> that explicitly stores the current value in an instance attribute  and uses a setter method to handle updates:</p> <pre><code>import sys\nfrom PyQt6.QtWidgets import QApplication, QWidget, QSlider, QDial, QLabel, QVBoxLayout\nfrom PyQt6.QtCore import Qt\n\nimport qdarktheme\n\n\nclass DialWithLabel(QWidget):\n    \"\"\"\n    Composite widget that groups a QDial and a QLabel.\n    The label always displays the current value of the dial.\n    This widget provides a setValue method to update both the dial and the label together.\n    \"\"\"\n\n    def __init__(self, min_val, max_val):\n        \"\"\"\n        Initialize the dial and label, and set up the layout.\n\n        Args:\n            min_val (int): Minimum value for the dial.\n            max_val (int): Maximum value for the dial.\n        \"\"\"\n        super().__init__()\n        self.dial = QDial()\n        self.label = QLabel()\n\n        # Configure dial\n        self.dial.setNotchesVisible(True)\n        self.dial.setRange(min_val, max_val)\n\n        # Configure label\n        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        # Arrange widgets vertically\n        layout = QVBoxLayout()\n        layout.addWidget(self.dial)\n        layout.addWidget(self.label)\n        self.setLayout(layout)\n\n    def setValue(self, value):\n        \"\"\"\n        Set the value of the dial and update the label to match.\n\n        Args:\n            value (int): The value to set on the dial and display on the label.\n        \"\"\"\n        self.dial.setValue(value)\n        self.label.setText(f\"Value: {value}\")\n\n\nclass LinkedControlsApp(QWidget):\n    \"\"\"\n    Main application window.\n    Contains a QSlider and a DialWithLabel.\n    Keeps both controls synchronized, so changing one updates the other.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the application window and controls.\n        \"\"\"\n        super().__init__()\n        self.current_value = 1  # Stores the current value shared by the slider and dial\n        self.init_ui()\n\n    def init_ui(self):\n        \"\"\"\n        Set up the user interface, connect signals, and initialize control values.\n        \"\"\"\n        layout = QVBoxLayout()\n\n        # Create slider and composite dial-with-label widget\n        self.slider = QSlider(Qt.Orientation.Horizontal)\n        self.dial_widget = DialWithLabel(1, 10)\n\n        # Set slider range to match the dial\n        self.slider.setRange(1, 10)\n\n        # Add widgets to the layout\n        layout.addWidget(self.slider)\n        layout.addWidget(self.dial_widget)\n        self.setLayout(layout)\n\n        # Connect valueChanged signals to the synchronization method\n        self.slider.valueChanged.connect(self.set_current_value)\n        self.dial_widget.dial.valueChanged.connect(self.set_current_value)\n\n        # Set initial values for both controls\n        self.slider.setValue(self.current_value)\n        self.dial_widget.setValue(self.current_value)\n\n    def set_current_value(self, value):\n        \"\"\"\n        Synchronize the slider and dial so they always show the same value.\n        Update the label in the dial widget as well.\n\n        Args:\n            value (int): The new value to set on both controls.\n        \"\"\"\n        self.current_value = value\n\n        # Determine which widget needs to be updated\n        if self.sender() == self.slider:\n            # If the slider was changed, update the dial widget\n            widget = self.dial_widget\n        else:\n            # If the dial was changed, update the slider and the dial widget's label\n            widget = self.slider\n            self.dial_widget.setValue(value)\n\n        # Prevent signal feedback loops while updating the other widget\n        widget.blockSignals(True)\n        widget.setValue(value)\n        widget.blockSignals(False)\n\n\nif __name__ == \"__main__\":\n    # Standard PyQt application setup\n    app = QApplication(sys.argv)\n    app.setStyleSheet(qdarktheme.load_stylesheet(\"light\"))\n    window = LinkedControlsApp()\n    window.setWindowTitle(\"Stateful Linked Controls\")\n    window.show()\n    sys.exit(app.exec())\n</code></pre>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#key-improvements","title":"Key Improvements","text":"<ol> <li> <p>Explicit State Management:</p> <ul> <li><code>self.current_value</code> stores the current state</li> <li>All widget updates derive from this single source of truth</li> </ul> </li> <li> <p>Dedicated Setter Method:</p> <ul> <li><code>set_current_value</code> handles state updates</li> <li>Ensures state and UI remain synchronized</li> <li>Prevents infinite loops using <code>blockSignals()</code></li> </ul> </li> <li> <p>Initialization:</p> <ul> <li>Both controls initialized to <code>self.current_value</code></li> <li>Label shows initial value from the instance attribute</li> </ul> </li> <li> <p>Encapsulation:</p> <ul> <li>State modification happens only through the setter</li> <li>UI updates are centralized in one method</li> </ul> </li> </ol>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#usage-notes","title":"Usage Notes","text":"<ul> <li>The instance attribute (<code>current_value</code>) acts as the source of truth</li> <li>Any external modifications to <code>current_value</code> should go through <code>set_current_value</code></li> <li>The setter ensures all widgets and the label stay synchronized</li> <li>Signal blocking prevents infinite update loops between connected widgets</li> </ul> <p>This pattern provides a clear separation between state management and UI updates, making it easier to extend or  modify the behavior later.</p>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#alternative-version-with-a-custom-widget","title":"Alternative version with a custom widget","text":""},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#key-changes","title":"Key Changes","text":"<ol> <li>DialWithLabel now has a setValue method <ul> <li>This method updates both the dial and the label together, encapsulating the logic for keeping them in sync.</li> </ul> </li> <li>Widget Synchronization Logic <ul> <li>In <code>set_current_value</code>, you now use <code>setValue</code> on either the slider or the composite widget (<code>DialWithLabel</code>),    depending on which triggered the event.</li> <li>When the dial triggers the change, you explicitly call <code>self.dial_widget.setValue(value)</code> before updating the    slider.</li> </ul> </li> <li>Cleaner Signal Handling <ul> <li>All widget value updates are wrapped in <code>blockSignals(True/False)</code> to prevent feedback loops.</li> </ul> </li> <li>Docstrings:<ul> <li>Documentation strings (docstrings) added for each class and method</li> <li>Other comments added to help understand the code</li> </ul> </li> </ol>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#1-encapsulation-with-setvalue","title":"1. Encapsulation with <code>setValue</code>","text":"<p>The <code>DialWithLabel</code> class now exposes a <code>setValue(value)</code> method. This is a great design choice because:</p> <ul> <li>It encapsulates the logic for updating both the dial and its label in one place.</li> <li>The main application doesn\u2019t need to know how the label is updated-it just calls <code>setValue</code>.</li> </ul>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#2-simplified-synchronization","title":"2. Simplified Synchronization","text":"<p>In <code>LinkedControlsApp.set_current_value</code>, the widget that needs to be updated is determined:</p> <ul> <li>If the slider changed, it updates the dial (and label) using <code>self.dial_widget.setValue(value)</code>.</li> <li>If the dial changed, it updates the slider and also call <code>self.dial_widget.setValue(value)</code> to ensure the label    is always up to date.</li> </ul> <p>This ensures:</p> <ul> <li>Both controls always show the same value.</li> <li>The label always matches the dial.</li> </ul>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#3-signal-blocking","title":"3. Signal Blocking","text":"<p>The method calls <code>blockSignals(True)</code> and <code>blockSignals(False)</code> are executed around <code>setValue</code> calls.</p> <ul> <li>This prevents infinite loops where changing one widget would trigger the other\u2019s signal, which would then trigger    the first again, and so on.</li> <li>It\u2019s a standard PyQt technique for synchronizing widgets.</li> </ul>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#4-reusability","title":"4. Reusability","text":"<p>The <code>DialWithLabel</code> widget is now even more reusable. Any part of your application can use it and just call  <code>setValue()</code> to update both the dial and its label.</p>"},{"location":"2.%20PyQt/B.%20Signals/02-slider-dial/#summary-table","title":"Summary Table","text":"Component Responsibility How it\u2019s improved in your version <code>DialWithLabel</code> Manages dial and label together <code>setValue</code> updates both dial and label <code>LinkedControlsApp</code> Coordinates slider and dial-with-label Simpler, only calls <code>setValue</code> as needed Signal Handling Prevents feedback loops Uses <code>blockSignals</code> around all <code>setValue</code> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by  the author.</p>"},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/","title":"3. Defining and using custom signal","text":""},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/#what-is-pyqtsignal-and-how-do-you-use-it","title":"What is <code>pyqtSignal</code> and How Do You Use It?","text":"<p><code>pyqtSignal</code> is used in PyQt6 to define custom signals that your objects can emit. Signals are a core part of Qt\u2019s event-driven architecture, enabling communication between objects. You use them to notify other parts of your application when something happens-such as a value changing, a task completing, or a user action occurring.</p>"},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/#when-and-why-to-use-pyqtsignal","title":"When and Why to Use <code>pyqtSignal</code>","text":"<ul> <li>Use <code>pyqtSignal</code> when you want your custom class (typically a subclass of <code>QObject</code>) to notify other objects about   events or state changes.</li> <li>This is especially useful for decoupling: the object emitting the signal doesn\u2019t need to know who receives it.</li> </ul>"},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/#how-to-define-and-use-a-custom-signal","title":"How to Define and Use a Custom Signal","text":""},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/#1-define-the-signal-as-a-class-attribute","title":"1. Define the Signal as a Class Attribute","text":"<p>Signals must be defined as class attributes in a subclass of <code>QObject</code>:</p> <pre><code>from PyQt6.QtCore import QObject, pyqtSignal\n\n\nclass Counter(QObject):\n    # Define a signal that emits an integer\n    valueChanged = pyqtSignal(int)\n</code></pre>"},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/#2-connect-the-signal-to-a-slot","title":"2. Connect the Signal to a Slot","text":"<p>A slot is any callable (function or method) that should respond to the signal:</p> <pre><code>def print_value(value):\n    print(f\"Counter value: {value}\")\n\n\ncounter = Counter()\ncounter.valueChanged.connect(print_value)\n</code></pre>"},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/#3-emit-the-signal","title":"3. Emit the Signal","text":"<p>When your object wants to notify others, it calls <code>.emit()</code> on the signal:</p> <pre><code>counter.valueChanged.emit(42)  # This will call print_value(42)\n</code></pre>"},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/#4-putting-it-all-together-a-minimal-example","title":"4. Putting It All Together: A Minimal Example","text":"<pre><code>from PyQt6.QtCore import QObject, pyqtSignal\n\n\nclass Counter(QObject):\n    valueChanged = pyqtSignal(int)  # Define a custom signal\n\n    def __init__(self):\n        super().__init__()\n        self._value = 0\n\n    def increment(self):\n        self._value += 1\n        self.valueChanged.emit(self._value)  # Emit the signal\n\n\ndef handle_value(value):\n    print(f\"Counter value: {value}\")\n\n\ncounter = Counter()\ncounter.valueChanged.connect(handle_value)\ncounter.increment()  # Output: Counter value: 1\n</code></pre>"},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/#key-points","title":"Key Points","text":"<ul> <li>Define signals as class attributes using <code>pyqtSignal</code>.</li> <li>Connect signals to slots (functions/methods) using <code>.connect()</code>.</li> <li>Emit the signal with <code>.emit()</code> to notify all connected slots.</li> <li>Signals can carry arguments, and you can define their types (e.g., <code>pyqtSignal(int, str)</code>).</li> <li>Use custom signals to implement clean, decoupled communication between objects in your PyQt application[1][2][3][4].</li> </ul>"},{"location":"2.%20PyQt/B.%20Signals/03-pyqtSignal/#when-to-use","title":"When to Use","text":"<ul> <li>When you want your object to notify other parts of your program about something that happened, without hard-coding   those relationships.</li> <li>Example: A data model emits a signal when its data changes, and a view updates itself in response.</li> </ul> <p>In summary</p> <p><code>pyqtSignal</code> lets you define events that your objects can emit. Other objects can \u201clisten\u201d for these events by connecting slots to the signal. This is a fundamental way to structure event-driven, interactive applications in PyQt.</p> References <ul> <li>[1] https://stackoverflow.com/questions/36434706/pyqt-proper-use-of-emit-and-pyqtsignal</li> <li>[2] https://doc.bccnsoft.com/docs/PyQt5/signals_slots.html</li> <li>[3] https://www.tutorialspoint.com/pyqt/pyqt_new_signals_with_pyqtsignal.htm</li> <li>[4] https://www.w3resource.com/python-exercises/pyqt/python-pyqt-connecting-signals-to-slots-exercise-7.php</li> <li>[5] https://www.tutorialspoint.com/pyqt/pyqt_signals_and_slots.htm</li> <li>[6] https://doc.qt.io/qtforpython-5/PySide2/QtCore/Signal.html</li> <li>[7] https://stackoverflow.com/questions/3891465/how-to-connect-pyqtsignal-between-classes-in-pyqt</li> <li>[8] https://doc.qt.io/qtforpython-6/tutorials/basictutorial/signals_and_slots.html</li> <li>[9] https://www.reddit.com/r/Python/comments/11ks1hl/pyqt_signal_tricks/</li> <li>[10] https://www.youtube.com/watch?v=LfztdwaGOjs</li> <li>[11] https://www.youtube.com/watch?v=3t8KhIdSGYQ</li> <li>[12] https://forum.qt.io/topic/128626/sending-qwidgets-as-a-pyqtsignal</li> <li>[13] https://www.linkedin.com/pulse/how-handle-widget-events-using-pyqt-signal-slot-mechanism-garcia</li> <li>[14] https://wiki.qt.io/Qt_for_Python_Signals_and_Slots</li> <li>[15] https://blog.manash.io/quick-pyqt5-1-signal-and-slot-example-in-pyqt5-bf502ccaf11d</li> <li>[16] https://www.pythonguis.com/tutorials/pyqt-signals-slots-events/</li> <li>[17] https://stackoverflow.com/questions/36462003/pyqt5-signal-slot-decorator-example</li> <li>[18] https://www.qtcentre.org/threads/70973-Proper-PyQt5-signal-amp-slot-syntax</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/B.%20Signals/04-form/","title":"4. Submitting form data","text":"<p>Here\u2019s a modified version of the previous form layout example, this time with signals to react to button clicks :</p> <pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QMainWindow, QWidget, QFormLayout, QLineEdit,\n    QDateEdit, QCheckBox, QComboBox, QSpinBox, QPushButton, QLabel, QVBoxLayout\n)\nfrom PyQt6.QtCore import QDate, pyqtSignal\n\nclass Person:\n    def __init__(self, first_name, last_name, email, dob, is_student, gender, age, country):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.email = email\n        self.dob = dob\n        self.is_student = is_student\n        self.gender = gender\n        self.age = age\n        self.country = country\n\n    def __str__(self):\n        return (f\"Person: {self.first_name} {self.last_name}\\n\"\n                f\"Email: {self.email}\\n\"\n                f\"DOB: {self.dob.toString('yyyy-MM-dd')}\\n\"\n                f\"Student: {'Yes' if self.is_student else 'No'}\\n\"\n                f\"Gender: {self.gender}\\n\"\n                f\"Age: {self.age}\\n\"\n                f\"Country: {self.country}\")\n\nclass PersonForm(QWidget):\n    person_added = pyqtSignal(object)  # Signal to emit when person is added\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"New Person Entry Form\")\n        self.setup_ui()\n\n    def setup_ui(self):\n        layout = QFormLayout()\n\n        # Form fields\n        self.first_name_edit = QLineEdit()\n        self.last_name_edit = QLineEdit()\n        self.email_edit = QLineEdit()\n        self.dob_edit = QDateEdit()\n        self.dob_edit.setCalendarPopup(True)\n        self.dob_edit.setDate(QDate.currentDate())\n        self.student_checkbox = QCheckBox(\"Is a student\")\n        self.gender_combo = QComboBox()\n        self.gender_combo.addItems([\"Select...\", \"Female\", \"Male\", \"Other\"])\n        self.age_spin = QSpinBox()\n        self.age_spin.setRange(0, 120)\n        self.country_combo = QComboBox()\n        self.country_combo.addItems([\"Select...\", \"Canada\", \"USA\", \"Other\"])\n\n        # Add fields to layout\n        layout.addRow(\"First Name:\", self.first_name_edit)\n        layout.addRow(\"Last Name:\", self.last_name_edit)\n        layout.addRow(\"Email:\", self.email_edit)\n        layout.addRow(\"Date of Birth:\", self.dob_edit)\n        layout.addRow(\"Student:\", self.student_checkbox)\n        layout.addRow(\"Gender:\", self.gender_combo)\n        layout.addRow(\"Age:\", self.age_spin)\n        layout.addRow(\"Country:\", self.country_combo)\n\n        # Buttons\n        button_layout = QVBoxLayout()\n        self.add_button = QPushButton(\"Add\")\n        self.cancel_button = QPushButton(\"Cancel\")\n\n        self.add_button.clicked.connect(self.create_person)\n        self.cancel_button.clicked.connect(self.close)\n\n        button_layout.addWidget(self.add_button)\n        button_layout.addWidget(self.cancel_button)\n        layout.addRow(button_layout)\n\n        self.setLayout(layout)\n\n    def create_person(self):\n        # Create Person object from form data\n        person = Person(\n            first_name=self.first_name_edit.text(),\n            last_name=self.last_name_edit.text(),\n            email=self.email_edit.text(),\n            dob=self.dob_edit.date(),\n            is_student=self.student_checkbox.isChecked(),\n            gender=self.gender_combo.currentText(),\n            age=self.age_spin.value(),\n            country=self.country_combo.currentText()\n        )\n        self.person_added.emit(person)\n        self.close()\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.person = None\n        self.setup_ui()\n\n    def setup_ui(self):\n        central_widget = QWidget()\n        layout = QVBoxLayout()\n\n        # Add Person button\n        self.open_form_button = QPushButton(\"Add New Person\")\n        self.open_form_button.clicked.connect(self.show_form)\n\n        # Display label\n        self.person_label = QLabel(\"No person added yet\")\n\n        layout.addWidget(self.open_form_button)\n        layout.addWidget(self.person_label)\n        central_widget.setLayout(layout)\n\n        self.setCentralWidget(central_widget)\n        self.setWindowTitle(\"Person Management\")\n        self.setMinimumSize(400, 300)\n\n    def show_form(self):\n        self.form = PersonForm()\n        self.form.person_added.connect(self.handle_new_person)\n        self.form.show()\n\n    def handle_new_person(self, person):\n        self.person = person\n        self.person_label.setText(str(person))\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"2.%20PyQt/B.%20Signals/04-form/#key-changes-and-features","title":"Key Changes and Features","text":"<ol> <li> <p>Main Window Structure:</p> <ul> <li>Added <code>MainWindow</code> class as the primary interface</li> <li>Contains \u201cAdd New Person\u201d button and display label</li> </ul> </li> <li> <p>Form Display Logic:</p> <ul> <li>Form only appears when clicking \u201cAdd New Person\u201d</li> <li>Uses <code>show()</code> instead of <code>exec()</code> for non-modal dialog</li> </ul> </li> <li> <p>Person Class:</p> <ul> <li>Defined with all form fields as attributes</li> <li>Includes <code>__str__</code> method for display formatting</li> </ul> </li> <li> <p>Signal Handling:</p> <ul> <li><code>PersonForm</code> emits <code>person_added</code> signal with Person object</li> <li><code>MainWindow</code> connects to this signal to update display</li> </ul> </li> <li> <p>Button Functionality:</p> <ul> <li>Add button creates Person object and closes form</li> <li>Cancel button immediately closes form</li> <li>Both buttons clear the form on next opening (due to new instance)</li> </ul> </li> <li> <p>Data Flow:</p> <ul> <li>Form data is encapsulated in Person object</li> <li>Main window stores latest Person instance</li> <li>Label updates automatically when new person is added</li> </ul> </li> </ol>"},{"location":"2.%20PyQt/B.%20Signals/04-form/#usage-flow","title":"Usage Flow","text":"<ol> <li>Run the application to see main window</li> <li>Click \u201cAdd New Person\u201d to open form</li> <li>Fill form and click:<ul> <li>Add: Creates person, updates label, closes form</li> <li>Cancel: Closes form without saving</li> </ul> </li> <li>New person details appear in main window label after adding</li> </ol> <p>This implementation demonstrates proper separation of concerns between the form and main window, while maintaining  clean data flow through PyQt6\u2019s signal/slot mechanism.</p>"},{"location":"2.%20PyQt/B.%20Signals/04-form/#another-version-with-a-list-of-person-objects","title":"Another version with a list of Person objects","text":""},{"location":"2.%20PyQt/B.%20Signals/04-form/#summary-of-changes","title":"Summary of Changes","text":""},{"location":"2.%20PyQt/B.%20Signals/04-form/#1-person-class","title":"1. Person Class","text":"<ul> <li>Short Display: Implement <code>__str__</code> to return a brief summary (e.g., <code>\"First Last (email)\"</code>) for use in the list.</li> <li>Detailed Display: Move the original detailed string to <code>__repr__</code> for showing full details on the right.</li> </ul>"},{"location":"2.%20PyQt/B.%20Signals/04-form/#2-mainwindow-class","title":"2. MainWindow Class","text":"<ul> <li>Person List: Replace the single <code>person</code> attribute with a <code>self.people</code> list to store multiple <code>Person</code> objects.</li> <li>UI Layout: Use a <code>QSplitter</code> as the main layout, with:<ul> <li>A <code>QListWidget</code> on the left to display the list of people (using <code>str(person)</code>).</li> <li>A <code>QTextEdit</code> (set to read-only) on the right to display details (<code>repr(person)</code>).</li> </ul> </li> <li>Adding People: When a new person is added, append it to <code>self.people</code> and add its string to the <code>QListWidget</code>.</li> <li>Selection Handling: Connect the <code>currentRowChanged</code> signal of the <code>QListWidget</code> to a method that displays the    corresponding person\u2019s details in the <code>QTextEdit</code>.</li> </ul>"},{"location":"2.%20PyQt/B.%20Signals/04-form/#3-other","title":"3. Other","text":"<ul> <li>No changes needed to the form logic or person creation, except possibly clearing the form after adding.</li> </ul>"},{"location":"2.%20PyQt/B.%20Signals/04-form/#result","title":"Result","text":"<p>You now have a master-detail interface:  </p> <ul> <li>The left side lists all people in the app.  </li> <li>The right side shows detailed information for the selected person.  </li> <li>New people can be added and will appear in the list immediately.</li> </ul> <pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QMainWindow, QWidget, QFormLayout, QLineEdit,\n    QDateEdit, QCheckBox, QComboBox, QSpinBox, QPushButton, QVBoxLayout, QTextEdit, QListWidget, QSplitter\n)\nfrom PyQt6.QtCore import QDate, pyqtSignal\n\n\nclass Person:\n    def __init__(self, first_name, last_name, email, dob, is_student, gender, age, country):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.email = email\n        self.dob = dob\n        self.is_student = is_student\n        self.gender = gender\n        self.age = age\n        self.country = country\n\n    def __str__(self):\n        # Short version for list display\n        return f\"{self.first_name} {self.last_name} ({self.email})\"\n\n    def __repr__(self):\n        # Detailed version for detail display\n        return (f\"Person: {self.first_name} {self.last_name}\\n\"\n                f\"Email: {self.email}\\n\"\n                f\"DOB: {self.dob.toString('yyyy-MM-dd')}\\n\"\n                f\"Student: {'Yes' if self.is_student else 'No'}\\n\"\n                f\"Gender: {self.gender}\\n\"\n                f\"Age: {self.age}\\n\"\n                f\"Country: {self.country}\")\n\n\nclass PersonForm(QWidget):\n    person_added = pyqtSignal(object)  # Signal to emit when person is added\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"New Person Entry Form\")\n        self.setup_ui()\n\n    def setup_ui(self):\n        layout = QFormLayout()\n\n        # Form fields\n        self.first_name_edit = QLineEdit()\n        self.last_name_edit = QLineEdit()\n        self.email_edit = QLineEdit()\n        self.dob_edit = QDateEdit()\n        self.dob_edit.setCalendarPopup(True)\n        self.dob_edit.setDate(QDate.currentDate())\n        self.student_checkbox = QCheckBox(\"Is a student\")\n        self.gender_combo = QComboBox()\n        self.gender_combo.addItems([\"Select...\", \"Female\", \"Male\", \"Other\"])\n        self.age_spin = QSpinBox()\n        self.age_spin.setRange(0, 120)\n        self.country_combo = QComboBox()\n        self.country_combo.addItems([\"Select...\", \"Canada\", \"USA\", \"Other\"])\n\n        # Add fields to layout\n        layout.addRow(\"First Name:\", self.first_name_edit)\n        layout.addRow(\"Last Name:\", self.last_name_edit)\n        layout.addRow(\"Email:\", self.email_edit)\n        layout.addRow(\"Date of Birth:\", self.dob_edit)\n        layout.addRow(\"Student:\", self.student_checkbox)\n        layout.addRow(\"Gender:\", self.gender_combo)\n        layout.addRow(\"Age:\", self.age_spin)\n        layout.addRow(\"Country:\", self.country_combo)\n\n        # Buttons\n        button_layout = QVBoxLayout()\n        self.add_button = QPushButton(\"Add\")\n        self.cancel_button = QPushButton(\"Cancel\")\n\n        self.add_button.clicked.connect(self.create_person)\n        self.cancel_button.clicked.connect(self.close)\n\n        button_layout.addWidget(self.add_button)\n        button_layout.addWidget(self.cancel_button)\n        layout.addRow(button_layout)\n\n        self.setLayout(layout)\n\n    def create_person(self):\n        # Create Person object from form data\n        person = Person(\n            first_name=self.first_name_edit.text(),\n            last_name=self.last_name_edit.text(),\n            email=self.email_edit.text(),\n            dob=self.dob_edit.date(),\n            is_student=self.student_checkbox.isChecked(),\n            gender=self.gender_combo.currentText(),\n            age=self.age_spin.value(),\n            country=self.country_combo.currentText()\n        )\n        self.person_added.emit(person)\n        self.close()\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.people = []  # List of Person objects\n        self.setup_ui()\n\n    def setup_ui(self):\n        splitter = QSplitter()\n\n        # List widget for people\n        self.person_list = QListWidget()\n        self.person_list.currentRowChanged.connect(self.display_person_details)\n\n        # Detail display (read-only)\n        self.person_detail = QTextEdit()\n        self.person_detail.setReadOnly(True)\n\n        splitter.addWidget(self.person_list)\n        splitter.addWidget(self.person_detail)\n\n        # Add Person button above the splitter\n        central_widget = QWidget()\n        layout = QVBoxLayout()\n        self.open_form_button = QPushButton(\"Add New Person\")\n        self.open_form_button.clicked.connect(self.show_form)\n        layout.addWidget(self.open_form_button)\n        layout.addWidget(splitter)\n        central_widget.setLayout(layout)\n        self.setCentralWidget(central_widget)\n        self.setWindowTitle(\"Person Management\")\n        self.setMinimumSize(600, 400)\n\n    def handle_new_person(self, person):\n        self.people.append(person)\n        self.person_list.addItem(str(person))\n\n    def show_form(self):\n        self.form = PersonForm()\n        self.form.person_added.connect(self.handle_new_person)\n        self.form.show()\n\n    def display_person_details(self, row):\n        if 0 &lt;= row &lt; len(self.people):\n            self.person_detail.setPlainText(repr(self.people[row]))\n        else:\n            self.person_detail.clear()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/C.%20Menus/01-intro/","title":"1. Menus","text":""},{"location":"2.%20PyQt/C.%20Menus/01-intro/#introduction-to-menus","title":"Introduction to Menus","text":"<pre><code>from PyQt6.QtWidgets import QApplication, QMainWindow\nfrom PyQt6.QtGui import QAction\n\nimport sys\n\nclass SimpleMenuApp(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n\n    def init_ui(self):\n        self.setWindowTitle('Simple Menu App')\n        self.setGeometry(100, 100, 400, 300)\n\n        # Create a menu bar\n        menubar = self.menuBar()\n\n        # Add File menu\n        file_menu = menubar.addMenu('File')\n\n        # Add Quit action\n        quit_action = QAction('Quit', self)\n        quit_action.triggered.connect(self.close)  # Close the app when triggered\n        file_menu.addAction(quit_action)\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    ex = SimpleMenuApp()\n    ex.show()\n    sys.exit(app.exec())\n</code></pre> <p>In this example, we\u2019re creating a simple PyQt6 application that demonstrates how to add a menu bar to your GUI application. Menus are an essential part of most desktop applications, providing a way to organize commands and features in a hierarchical structure.</p>"},{"location":"2.%20PyQt/C.%20Menus/01-intro/#breaking-down-the-code","title":"Breaking Down the Code","text":"<p>Let\u2019s analyze this example step by step, focusing on the menu implementation:</p> <pre><code>from PyQt6.QtWidgets import QApplication, QMainWindow\nfrom PyQt6.QtGui import QAction\n\nimport sys\n</code></pre> <p>First, we import the necessary classes:</p> <ul> <li><code>QMainWindow</code>: This is the main window class that provides a framework for building an application\u2019s UI with menus,   toolbars, etc.</li> <li><code>QAction</code>: This class provides an abstract user interface action that can be inserted into menus and toolbars.</li> </ul> <pre><code>class SimpleMenuApp(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n</code></pre> <p>We create a class that inherits from <code>QMainWindow</code>, which automatically gives us the ability to add menus, toolbars, and status bars.</p>"},{"location":"2.%20PyQt/C.%20Menus/01-intro/#menu-creation-process","title":"Menu Creation Process","text":"<pre><code>def init_ui(self):\n    self.setWindowTitle('Simple Menu App')\n    self.setGeometry(100, 100, 400, 300)\n\n    # Create a menu bar\n    menubar = self.menuBar()\n</code></pre> <p>The <code>menuBar()</code> method returns the menu bar for the main window. If the menu bar doesn\u2019t exist yet, a new one is created. This is your first step in creating menus.</p> <pre><code>    # Add File menu\nfile_menu = menubar.addMenu('File')\n</code></pre> <p>The <code>addMenu()</code> method creates a new menu in the menu bar with the title \u2018File\u2019. This returns a <code>QMenu</code> object that we can add actions to.</p> <pre><code>    # Add Quit action\nquit_action = QAction('Quit', self)\nquit_action.triggered.connect(self.close)  # Close the app when triggered\nfile_menu.addAction(quit_action)\n</code></pre> <p>Here\u2019s where we create a menu item:</p> <ol> <li>We create a <code>QAction</code> with the text \u2018Quit\u2019</li> <li>We connect its <code>triggered</code> signal to the <code>close()</code> method of our window</li> <li>We add this action to our File menu using <code>addAction()</code></li> </ol> <p>When a user clicks on \u201cFile\u201d in the menu bar, a dropdown will appear with \u201cQuit\u201d as an option. Clicking \u201cQuit\u201d will trigger the action, which will call <code>self.close()</code> to close the application.</p>"},{"location":"2.%20PyQt/C.%20Menus/01-intro/#key-concepts-about-menus","title":"Key Concepts About Menus","text":"<ol> <li> <p>Menu Hierarchy: Menus in PyQt6 follow a hierarchy:</p> <ul> <li>Menu Bar (top level)</li> <li>Menus (like File, Edit, View)</li> <li>Actions (the actual commands users can select)</li> </ul> </li> <li> <p>QAction: This class represents an item that a user can select from a menu. Actions can:</p> <ul> <li>Display text and/or an icon</li> <li>Have a shortcut key</li> <li>Show status tips</li> <li>Trigger a signal when activated</li> </ul> </li> <li> <p>Signal-Slot Connection: The line <code>quit_action.triggered.connect(self.close)</code> demonstrates PyQt\u2019s signal-slot    mechanism. When the action is triggered (clicked), it emits a signal that is connected to the <code>close()</code> slot.</p> </li> </ol> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/C.%20Menus/02-editor/","title":"2. Simple text editor","text":"<p>This example builds on our previous menu example by creating a functional text editor with a more complete menu system. Let\u2019s focus on how the menus are implemented and how they connect to the application\u2019s functionality.</p> Version 2 <pre><code>import sys\n\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QTextEdit,\n                             QFileDialog, QScrollArea)\nfrom PyQt6.QtGui import QAction\n\n\nclass TextEditorApp(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.current_file = None\n        self.init_ui()\n\n    def init_ui(self):\n        self.setWindowTitle('Text Editor')\n        self.setGeometry(100, 100, 800, 600)\n\n        # Create scroll area and text edit\n        scroll = QScrollArea()\n        self.text_area = QTextEdit()\n        self.text_area.setLineWrapMode(QTextEdit.LineWrapMode.NoWrap)\n        scroll.setWidget(self.text_area)\n        scroll.setWidgetResizable(True)\n        self.setCentralWidget(scroll)\n\n        # Create menu bar\n        menubar = self.menuBar()\n\n        # File menu\n        file_menu = menubar.addMenu('File')\n\n        # New action\n        new_action = QAction('New', self)\n        new_action.triggered.connect(self.new_file)\n\n        # Open action\n        open_action = QAction('Open...', self)\n        open_action.triggered.connect(self.open_file)\n\n        # Save action\n        save_action = QAction('Save', self)\n        save_action.triggered.connect(self.save_file)\n\n        # Save As action\n        save_as_action = QAction('Save As...', self)\n        save_as_action.triggered.connect(self.save_file_as)\n\n        # Quit action\n        quit_action = QAction('Quit', self)\n        quit_action.triggered.connect(self.close)\n\n        # Add actions to menu\n        file_menu.addAction(new_action)\n        file_menu.addAction(open_action)\n        file_menu.addAction(save_action)\n        file_menu.addAction(save_as_action)\n        file_menu.addSeparator()\n        file_menu.addAction(quit_action)\n\n    def new_file(self):\n        self.current_file = None\n        self.text_area.clear()\n\n    def open_file(self):\n        file_path, _ = QFileDialog.getOpenFileName(\n            self, \"Open File\", \"\", \"Text Files (*.txt);;Markdown Files (*.md);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    self.text_area.setText(file.read())\n                self.current_file = file_path\n            except Exception as e:\n                self.show_error(str(e))\n\n    def save_file(self):\n        if self.current_file:\n            try:\n                with open(self.current_file, 'w', encoding='utf-8') as file:\n                    file.write(self.text_area.toPlainText())\n            except Exception as e:\n                self.show_error(str(e))\n        else:\n            self.save_file_as()\n\n    def save_file_as(self):\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, \"Save File\", \"\", \"Text Files (*.txt);;Markdown Files (*.md);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'w', encoding='utf-8') as file:\n                    file.write(self.text_area.toPlainText())\n                self.current_file = file_path\n            except Exception as e:\n                self.show_error(str(e))\n\n    def show_error(self, message):\n        error_dialog = QFileDialog(self)\n        error_dialog.setWindowTitle(\"Error\")\n        error_dialog.setText(message)\n        error_dialog.exec()\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    editor = TextEditorApp()\n    editor.show()\n    sys.exit(app.exec())\n</code></pre>"},{"location":"2.%20PyQt/C.%20Menus/02-editor/#menu-structure-in-this-example","title":"Menu Structure in This Example","text":"<p>In this text editor application, we create a more sophisticated menu structure with multiple actions and a separator:</p> <pre><code># Create menu bar\nmenubar = self.menuBar()\n\n# File menu\nfile_menu = menubar.addMenu('File')\n</code></pre> <p>Just like in our previous example, we start by getting the menu bar and adding a \u2018File\u2019 menu to it.</p>"},{"location":"2.%20PyQt/C.%20Menus/02-editor/#creating-multiple-menu-actions","title":"Creating Multiple Menu Actions","text":"<pre><code># New action\nnew_action = QAction('New', self)\nnew_action.triggered.connect(self.new_file)\n\n# Open action\nopen_action = QAction('Open...', self)\nopen_action.triggered.connect(self.open_file)\n\n# Save action\nsave_action = QAction('Save', self)\nsave_action.triggered.connect(self.save_file)\n\n# Save As action\nsave_as_action = QAction('Save As...', self)\nsave_as_action.triggered.connect(self.save_file_as)\n\n# Quit action\nquit_action = QAction('Quit', self)\nquit_action.triggered.connect(self.close)\n</code></pre> <p>Here we create five different actions for our File menu:</p> <ol> <li>New - Creates a new empty document</li> <li>Open\u2026 - Opens an existing file</li> <li>Save - Saves the current file</li> <li>Save As\u2026 - Saves the current file with a new name</li> <li>Quit - Exits the application</li> </ol> <p>Each action follows the same pattern:</p> <ul> <li>Create a <code>QAction</code> with a descriptive label</li> <li>Connect its <code>triggered</code> signal to the appropriate method</li> </ul>"},{"location":"2.%20PyQt/C.%20Menus/02-editor/#adding-actions-to-the-menu-with-a-separator","title":"Adding Actions to the Menu with a Separator","text":"<pre><code># Add actions to menu\nfile_menu.addAction(new_action)\nfile_menu.addAction(open_action)\nfile_menu.addAction(save_action)\nfile_menu.addAction(save_as_action)\nfile_menu.addSeparator()  # This adds a horizontal line in the menu\nfile_menu.addAction(quit_action)\n</code></pre> <p>After creating the actions, we add them to the menu. Notice the <code>addSeparator()</code> method, which adds a horizontal line between menu items. This is a common UI pattern used to group related actions together. In this case, it separates the file operations from the application exit command.</p>"},{"location":"2.%20PyQt/C.%20Menus/02-editor/#connecting-menu-actions-to-functionality","title":"Connecting Menu Actions to Functionality","text":"<p>Each menu action is connected to a method that performs the corresponding operation:</p> <pre><code>def new_file(self):\n    self.current_file = None\n    self.text_area.clear()\n</code></pre> <p>The <code>new_file</code> method resets the current file to <code>None</code> and clears the text area.</p> <pre><code>def open_file(self):\n    file_path, _ = QFileDialog.getOpenFileName(\n        self, \"Open File\", \"\", \"Text Files (*.txt);;Markdown Files (*.md);;All Files (*)\"\n    )\n    if file_path:\n        try:\n            with open(file_path, 'r', encoding='utf-8') as file:\n                self.text_area.setText(file.read())\n            self.current_file = file_path\n        except Exception as e:\n            self.show_error(str(e))\n</code></pre> <p>The <code>open_file</code> method uses <code>QFileDialog.getOpenFileName()</code> to display a file selection dialog. If a file is selected, it reads the content and displays it in the text area.</p> <p>Similar implementations exist for <code>save_file</code> and <code>save_file_as</code>.</p>"},{"location":"2.%20PyQt/C.%20Menus/02-editor/#key-menu-concepts-demonstrated","title":"Key Menu Concepts Demonstrated","text":"<ol> <li> <p>Multiple Actions: A real-world menu typically contains multiple related actions.</p> </li> <li> <p>Separators: The <code>addSeparator()</code> method adds visual separation between groups of related menu items.</p> </li> <li> <p>Dialog Integration: Menu actions often trigger dialogs, like the file open/save dialogs shown here.</p> </li> <li> <p>Conventional Naming: Notice how menu items that open dialogs end with \u201c\u2026\u201d (e.g., \u201cOpen\u2026\u201d). This is a UI    convention indicating that selecting this option will require additional input.</p> </li> <li> <p>Error Handling: The methods connected to menu actions include error handling to manage potential issues.</p> </li> </ol>"},{"location":"2.%20PyQt/C.%20Menus/02-editor/#menu-design-best-practices","title":"Menu Design Best Practices","text":"<ol> <li> <p>Logical Grouping: Group related actions together (file operations are grouped, with Quit separated).</p> </li> <li> <p>Standard Menus: Follow conventions for menu names and organization (File, Edit, View, etc.).</p> </li> <li> <p>Clear Labels: Use clear, concise labels for menu items.</p> </li> <li> <p>Consistent Terminology: Use consistent terms across your application.</p> </li> </ol> <p>This example demonstrates how to create a practical menu system that follows standard UI conventions and connects to actual application functionality. Students can use this as a template for creating their own menu-driven applications.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/C.%20Menus/03-editor/","title":"3. Text editor: settings menu","text":"Version 3 <pre><code>import sys\n\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QTextEdit,\n                             QFileDialog, QScrollArea)\nfrom PyQt6.QtGui import QAction, QFont\n\n\nclass TextEditorApp(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.current_file = None\n        self.init_ui()\n\n    def init_ui(self):\n        self.setWindowTitle('Text Editor')\n        self.setGeometry(100, 100, 800, 600)\n\n        # Create scroll area and text edit\n        scroll = QScrollArea()\n        self.text_area = QTextEdit()\n        self.text_area.setLineWrapMode(QTextEdit.LineWrapMode.NoWrap)\n        self.font_size = 12  # or whatever default you want\n        font = QFont(\"Courier New\")\n        font.setStyleHint(QFont.StyleHint.Monospace)\n        font.setFixedPitch(True)\n        font.setPointSize(self.font_size)\n        self.text_area.setFont(font)\n\n        scroll.setWidget(self.text_area)\n        scroll.setWidgetResizable(True)\n        self.setCentralWidget(scroll)\n\n        # Create menu bar\n        menubar = self.menuBar()\n\n        # File menu\n        file_menu = menubar.addMenu('File')\n\n        # New action\n        new_action = QAction('New', self)\n        new_action.triggered.connect(self.new_file)\n\n        # Open action\n        open_action = QAction('Open...', self)\n        open_action.triggered.connect(self.open_file)\n\n        # Save action\n        save_action = QAction('Save', self)\n        save_action.triggered.connect(self.save_file)\n\n        # Save As action\n        save_as_action = QAction('Save As...', self)\n        save_as_action.triggered.connect(self.save_file_as)\n\n        # Quit action\n        quit_action = QAction('Quit', self)\n        quit_action.triggered.connect(self.close)\n\n        # Add actions to menu\n        file_menu.addAction(new_action)\n        file_menu.addAction(open_action)\n        file_menu.addAction(save_action)\n        file_menu.addAction(save_as_action)\n        file_menu.addSeparator()\n        file_menu.addAction(quit_action)\n\n        self.create_settings_menu()\n\n    def new_file(self):\n        self.current_file = None\n        self.text_area.clear()\n\n    def open_file(self):\n        file_path, _ = QFileDialog.getOpenFileName(\n            self, \"Open File\", \"\", \"Text Files (*.txt);;Markdown Files (*.md);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    self.text_area.setText(file.read())\n                self.current_file = file_path\n            except Exception as e:\n                self.show_error(str(e))\n\n    def save_file(self):\n        if self.current_file:\n            try:\n                with open(self.current_file, 'w', encoding='utf-8') as file:\n                    file.write(self.text_area.toPlainText())\n            except Exception as e:\n                self.show_error(str(e))\n        else:\n            self.save_file_as()\n\n    def save_file_as(self):\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, \"Save File\", \"\", \"Text Files (*.txt);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'w') as file:\n                    file.write(self.text_area.toPlainText())\n                self.current_file = file_path\n            except Exception as e:\n                self.show_error(str(e))\n\n    def show_error(self, message):\n        error_dialog = QFileDialog(self)\n        error_dialog.setWindowTitle(\"Error\")\n        error_dialog.setText(message)\n        error_dialog.exec()\n\n    def set_textedit_font(self):\n        font = QFont(\"Source Code Pro\")\n        font.setStyleHint(QFont.StyleHint.Monospace)\n        font.setFixedPitch(True)\n        font.setPointSize(self.font_size)\n        self.text_area.setFont(font)\n\n    def increase_font_size(self):\n        self.font_size += 1\n        self.set_textedit_font()\n\n    def decrease_font_size(self):\n        if self.font_size &gt; 1:\n            self.font_size -= 1\n            self.set_textedit_font()\n\n    def create_settings_menu(self):\n        menubar = self.menuBar()\n        settings_menu = menubar.addMenu('Settings')\n\n        increase_font_action = QAction('Increase font size', self)\n        increase_font_action.triggered.connect(self.increase_font_size)\n        settings_menu.addAction(increase_font_action)\n\n        decrease_font_action = QAction('Decrease font size', self)\n        decrease_font_action.triggered.connect(self.decrease_font_size)\n        settings_menu.addAction(decrease_font_action)\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    editor = TextEditorApp()\n    editor.show()\n    sys.exit(app.exec())\n</code></pre>"},{"location":"2.%20PyQt/C.%20Menus/03-editor/#key-differences-from-the-previous-example","title":"Key Differences from the Previous Example","text":"<p>This modified text editor example builds on the previous one by introducing several important new features, particularly in the menu system. Let\u2019s focus on these differences:</p>"},{"location":"2.%20PyQt/C.%20Menus/03-editor/#1-multiple-menus","title":"1. Multiple Menus","text":"<p>The most significant difference is the addition of a second menu called \u201cSettings\u201d:</p> <pre><code>def create_settings_menu(self):\n    menubar = self.menuBar()\n    settings_menu = menubar.addMenu('Settings')\n\n    # Add actions to the Settings menu\n    increase_font_action = QAction('Increase font size', self)\n    increase_font_action.triggered.connect(self.increase_font_size)\n    settings_menu.addAction(increase_font_action)\n\n    decrease_font_action = QAction('Decrease font size', self)\n    decrease_font_action.triggered.connect(self.decrease_font_size)\n    settings_menu.addAction(decrease_font_action)\n</code></pre> <p>This demonstrates how to create multiple menus in the menu bar. The application now has:</p> <ul> <li>A \u201cFile\u201d menu for document operations</li> <li>A \u201cSettings\u201d menu for application preferences</li> </ul>"},{"location":"2.%20PyQt/C.%20Menus/03-editor/#2-menu-organization-with-a-separate-method","title":"2. Menu Organization with a Separate Method","text":"<p>The code uses a separate method <code>create_settings_menu()</code> to organize the creation of the Settings menu:</p> <pre><code>def init_ui(self):\n    # ... other code ...\n\n    # Create File menu and its actions\n    # ... (code for File menu) ...\n\n    # Create Settings menu using a separate method\n    self.create_settings_menu()\n</code></pre> <p>This is a good practice for organizing code when you have multiple menus. Each menu can have its own setup method, making the code more modular and easier to maintain.</p>"},{"location":"2.%20PyQt/C.%20Menus/03-editor/#3-font-configuration-actions","title":"3. Font Configuration Actions","text":"<p>The Settings menu contains actions that affect the application\u2019s appearance:</p> <pre><code>increase_font_action = QAction('Increase font size', self)\nincrease_font_action.triggered.connect(self.increase_font_size)\n\ndecrease_font_action = QAction('Decrease font size', self)\ndecrease_font_action.triggered.connect(self.decrease_font_size)\n</code></pre> <p>These actions demonstrate how menus can control application settings rather than just performing file operations.</p>"},{"location":"2.%20PyQt/C.%20Menus/03-editor/#4-state-management","title":"4. State Management","text":"<p>The application now maintains state information for the font size:</p> <pre><code>self.font_size = 12  # Default font size\n</code></pre> <p>This state variable is modified by the menu actions:</p> <pre><code>def increase_font_size(self):\n    self.font_size += 1\n    self.set_textedit_font()\n\n\ndef decrease_font_size(self):\n    if self.font_size &gt; 1:\n        self.font_size -= 1\n        self.set_textedit_font()\n</code></pre> <p>This demonstrates how menu actions can update application state and trigger visual changes.</p>"},{"location":"2.%20PyQt/C.%20Menus/03-editor/#5-helper-methods-for-actions","title":"5. Helper Methods for Actions","text":"<p>The code includes helper methods that implement the functionality triggered by menu actions:</p> <pre><code>def set_textedit_font(self):\n    font = QFont(\"Source Code Pro\")\n    font.setStyleHint(QFont.StyleHint.Monospace)\n    font.setFixedPitch(True)\n    font.setPointSize(self.font_size)\n    self.text_area.setFont(font)\n</code></pre> <p>This method is called by both font size actions, showing how to reuse functionality across multiple menu items.</p>"},{"location":"2.%20PyQt/C.%20Menus/03-editor/#menu-design-principles-demonstrated","title":"Menu Design Principles Demonstrated","text":"<ol> <li> <p>Logical Grouping: Related functions are grouped in their own menus (file operations in \u201cFile\u201d, appearance    settings in \u201cSettings\u201d).</p> </li> <li> <p>Hierarchical Organization: The menu bar contains multiple top-level menus, each with their own set of actions.</p> </li> <li> <p>Consistent Naming: Menu items use clear, action-oriented names that describe what they do.</p> </li> <li> <p>Functional Separation: Different types of functionality are separated into different menus.</p> </li> <li> <p>State Management: Menu actions can both read and modify application state.</p> </li> </ol>"},{"location":"2.%20PyQt/C.%20Menus/03-editor/#practical-applications","title":"Practical Applications","text":"<p>This enhanced menu system demonstrates patterns that students can apply to their own applications:</p> <ol> <li> <p>Settings Control: Menus can be used to control application settings and preferences.</p> </li> <li> <p>Multiple Menu Categories: Applications can organize functionality into multiple logical categories.</p> </li> <li> <p>Dynamic UI Updates: Menu actions can trigger visual changes in the application.</p> </li> <li> <p>Code Organization: Menu creation can be organized into separate methods for better code structure.</p> </li> </ol> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/","title":"4. Text editor: Toolbar and Mouse Wheel Events","text":"Version 4 <pre><code>import sys\n\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QTextEdit,\n                             QFileDialog, QScrollArea, QToolBar, QLabel)\nfrom PyQt6.QtGui import QAction, QFont, QShortcut, QKeySequence\nfrom PyQt6.QtCore import Qt, pyqtSignal\n\n\nclass TextEditorApp(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.current_file = None\n        self.init_ui()\n\n    def init_ui(self):\n        self.setWindowTitle('Text Editor')\n        self.setGeometry(100, 100, 800, 600)\n\n        self.create_text_edit()\n\n        self.create_file_menu()\n        self.create_settings_menu()\n\n        self.add_toolbar()\n        self.add_shortcuts()\n\n    def create_text_edit(self):\n        # Create scroll area and text edit\n        self.text_area = WheelAwareTextEdit()\n        self.text_area.ctrl_wheel.connect(self.handle_ctrl_wheel)\n        self.text_area.setLineWrapMode(QTextEdit.LineWrapMode.NoWrap)\n\n        self.font_size = 12  # or whatever default you want\n        font = QFont(\"Courier New\")\n        font.setStyleHint(QFont.StyleHint.Monospace)\n        font.setFixedPitch(True)\n        font.setPointSize(self.font_size)\n        self.text_area.setFont(font)\n\n        scroll = QScrollArea()\n        scroll.setWidget(self.text_area)\n        scroll.setWidgetResizable(True)\n\n        self.setCentralWidget(scroll)\n\n    def create_file_menu(self):\n        # Create menu bar\n        menubar = self.menuBar()\n        # File menu\n        file_menu = menubar.addMenu('File')\n        # New action\n        new_action = QAction('New', self)\n        new_action.triggered.connect(self.new_file)\n        # Open action\n        open_action = QAction('Open...', self)\n        open_action.triggered.connect(self.open_file)\n        # Save action\n        save_action = QAction('Save', self)\n        save_action.triggered.connect(self.save_file)\n        # Save As action\n        save_as_action = QAction('Save As...', self)\n        save_as_action.triggered.connect(self.save_file_as)\n        # Quit action\n        quit_action = QAction('Quit', self)\n        quit_action.triggered.connect(self.close)\n        # Add actions to menu\n        file_menu.addAction(new_action)\n        file_menu.addAction(open_action)\n        file_menu.addAction(save_action)\n        file_menu.addAction(save_as_action)\n        file_menu.addSeparator()\n        file_menu.addAction(quit_action)\n\n    def new_file(self):\n        self.current_file = None\n        self.text_area.clear()\n\n    def open_file(self):\n        file_path, _ = QFileDialog.getOpenFileName(\n            self, \"Open File\", \"\", \"Text Files (*.txt);;Markdown Files (*.md);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    self.text_area.setText(file.read())\n                self.current_file = file_path\n            except Exception as e:\n                self.show_error(str(e))\n\n    def save_file(self):\n        if self.current_file:\n            try:\n                with open(self.current_file, 'w', encoding='utf-8') as file:\n                    file.write(self.text_area.toPlainText())\n            except Exception as e:\n                self.show_error(str(e))\n        else:\n            self.save_file_as()\n\n    def save_file_as(self):\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, \"Save File\", \"\", \"Text Files (*.txt);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'w') as file:\n                    file.write(self.text_area.toPlainText())\n                self.current_file = file_path\n            except Exception as e:\n                self.show_error(str(e))\n\n    def show_error(self, message):\n        error_dialog = QFileDialog(self)\n        error_dialog.setWindowTitle(\"Error\")\n        error_dialog.setText(message)\n        error_dialog.exec()\n\n    def set_textedit_font(self):\n        font = QFont(\"Source Code Pro\")\n        font.setStyleHint(QFont.StyleHint.Monospace)\n        font.setFixedPitch(True)\n        font.setPointSize(self.font_size)\n        self.text_area.setFont(font)\n\n    def increase_font_size(self):\n        self.font_size += 1\n        self.set_textedit_font()\n\n    def decrease_font_size(self):\n        if self.font_size &gt; 1:\n            self.font_size -= 1\n            self.set_textedit_font()\n\n    def create_settings_menu(self):\n        menubar = self.menuBar()\n        settings_menu = menubar.addMenu('Settings')\n\n        increase_font_action = QAction('Increase font size', self)\n        increase_font_action.triggered.connect(self.increase_font_size)\n        settings_menu.addAction(increase_font_action)\n\n        decrease_font_action = QAction('Decrease font size', self)\n        decrease_font_action.triggered.connect(self.decrease_font_size)\n        settings_menu.addAction(decrease_font_action)\n\n    def add_toolbar(self):\n        toolbar = QToolBar(\"Font Tools\")\n        self.addToolBar(toolbar)\n\n        toolbar.addWidget(QLabel(\"Font Size:\"))\n        toolbar.addAction(\"+\", self.increase_font_size)\n        toolbar.addAction(\"-\", self.decrease_font_size)\n\n    def add_shortcuts(self):\n        QShortcut(QKeySequence(\"Ctrl++\"), self).activated.connect(self.increase_font_size)\n        QShortcut(QKeySequence(\"Ctrl+-\"), self).activated.connect(self.decrease_font_size)\n\n    def handle_ctrl_wheel(self, delta):\n        if delta &gt; 0:  # Wheel scrolled up\n            self.increase_font_size()\n        else:  # Wheel scrolled down\n            self.decrease_font_size()\n\n\nclass WheelAwareTextEdit(QTextEdit):\n    ctrl_wheel = pyqtSignal(int)  # Emit wheel delta\n\n    def wheelEvent(self, event):\n        if event.modifiers() &amp; Qt.KeyboardModifier.ControlModifier:\n            self.ctrl_wheel.emit(event.angleDelta().y())\n            event.accept()\n        else:\n            super().wheelEvent(event)\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    editor = TextEditorApp()\n    editor.show()\n    sys.exit(app.exec())\n</code></pre>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/#key-changes-in-this-version","title":"Key Changes in This Version","text":"<p>This version of the text editor introduces several significant enhancements to the user interface, particularly in how users can interact with the application. Let\u2019s focus on the key differences from the previous version:</p>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/#1-code-organization","title":"1. Code Organization","text":"<p>The code has been reorganized into more focused methods:</p> <pre><code>def init_ui(self):\n    self.setWindowTitle('Text Editor')\n    self.setGeometry(100, 100, 800, 600)\n\n    self.create_text_edit()\n    self.create_file_menu()\n    self.create_settings_menu()\n    self.add_toolbar()\n    self.add_shortcuts()\n</code></pre> <p>This modular approach makes the code more maintainable and easier to understand. Each UI component has its own dedicated setup method.</p>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/#2-toolbar-integration","title":"2. Toolbar Integration","text":"<p>A major addition is the toolbar, which provides quick access to font size controls:</p> <pre><code>def add_toolbar(self):\n    toolbar = QToolBar(\"Font Tools\")\n    self.addToolBar(toolbar)\n\n    toolbar.addWidget(QLabel(\"Font Size:\"))\n    toolbar.addAction(\"+\", self.increase_font_size)\n    toolbar.addAction(\"-\", self.decrease_font_size)\n</code></pre> <p>This demonstrates how to:</p> <ul> <li>Create a toolbar using <code>QToolBar</code></li> <li>Add a label to the toolbar using <code>addWidget()</code></li> <li>Add actions to the toolbar that connect to the same methods used by menu items</li> </ul> <p>The toolbar provides an alternative way to access functionality that\u2019s also available in the menus, which is a common pattern in modern applications.</p>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/#3-keyboard-shortcuts","title":"3. Keyboard Shortcuts","text":"<p>Another significant addition is keyboard shortcuts for common operations:</p> <pre><code>def add_shortcuts(self):\n    QShortcut(QKeySequence(\"Ctrl++\"), self).activated.connect(self.increase_font_size)\n    QShortcut(QKeySequence(\"Ctrl+-\"), self).activated.connect(self.decrease_font_size)\n</code></pre> <p>This code:</p> <ul> <li>Creates <code>QShortcut</code> objects with specific key combinations</li> <li>Connects them to the same methods used by the menu items and toolbar actions</li> <li>Provides yet another way for users to access the same functionality</li> </ul>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/#4-custom-widget-with-signal","title":"4. Custom Widget with Signal","text":"<p>The application now uses a custom <code>QTextEdit</code> subclass that emits a signal when the user scrolls with the Ctrl key pressed:</p> <pre><code>class WheelAwareTextEdit(QTextEdit):\n    ctrl_wheel = pyqtSignal(int)  # Emit wheel delta\n\n    def wheelEvent(self, event):\n        if event.modifiers() &amp; Qt.KeyboardModifier.ControlModifier:\n            self.ctrl_wheel.emit(event.angleDelta().y())\n            event.accept()\n        else:\n            super().wheelEvent(event)\n</code></pre> <p>This custom widget:</p> <ul> <li>Defines a new signal <code>ctrl_wheel</code> using <code>pyqtSignal</code></li> <li>Overrides the <code>wheelEvent</code> method to detect Ctrl+wheel combinations</li> <li>Emits the signal with the wheel delta value when Ctrl is pressed</li> <li>Otherwise, passes the event to the parent class</li> </ul>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/#5-signal-slot-connection-for-wheel-events","title":"5. Signal-Slot Connection for Wheel Events","text":"<p>The application connects to the custom signal:</p> <pre><code>def create_text_edit(self):\n    # Create scroll area and text edit\n    self.text_area = WheelAwareTextEdit()\n    self.text_area.ctrl_wheel.connect(self.handle_ctrl_wheel)\n    # ...\n</code></pre> <p>And handles it with a dedicated method:</p> <pre><code>def handle_ctrl_wheel(self, delta):\n    if delta &gt; 0:  # Wheel scrolled up\n        self.increase_font_size()\n    else:  # Wheel scrolled down\n        self.decrease_font_size()\n</code></pre> <p>This provides a third way to change the font size (Ctrl+wheel), in addition to the menu and toolbar.</p>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/#multiple-access-paths-to-the-same-functionality","title":"Multiple Access Paths to the Same Functionality","text":"<p>This example demonstrates a key principle in UI design: providing multiple ways to access the same functionality:</p> <ol> <li>Menu items - Traditional access through hierarchical menus</li> <li>Toolbar buttons - Quick access through visible buttons</li> <li>Keyboard shortcuts - Efficient access for keyboard-oriented users</li> <li>Mouse gestures (Ctrl+wheel) - Intuitive access using familiar gestures</li> </ol> <p>Each of these methods connects to the same underlying functionality (<code>increase_font_size()</code> and <code>decrease_font_size()</code>), which ensures consistent behavior regardless of how the user chooses to interact with the application.</p>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/#menu-design-in-context","title":"Menu Design in Context","text":"<p>The menus in this version serve as just one part of a comprehensive UI strategy. They provide a discoverable, hierarchical organization of all available commands, while the toolbar, shortcuts, and gestures provide quicker access to common operations.</p> <p>This approach follows modern application design principles, where menus act as a complete catalog of functionality, while other UI elements provide optimized paths to frequently used features.</p>"},{"location":"2.%20PyQt/C.%20Menus/04-editor/#practical-takeaways","title":"Practical Takeaways","text":"<ol> <li>Multiple access paths improve usability by accommodating different user preferences.</li> <li>Consistent functionality ensures that the same action produces the same result, regardless of how it\u2019s triggered.</li> <li>Modular code organization makes complex applications easier to maintain.</li> <li>Custom widgets and signals allow for sophisticated user interactions.</li> <li>Toolbars complement menus by providing quick access to common commands.</li> </ol> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/","title":"5. Text editor: Document State Management","text":"Version 5 <pre><code>import sys\n\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QTextEdit,\n                             QFileDialog, QScrollArea, QToolBar, QLabel, QMessageBox)\nfrom PyQt6.QtGui import QAction, QFont, QShortcut, QKeySequence\nfrom PyQt6.QtCore import Qt, pyqtSignal\n\n\nclass TextEditorApp(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.is_modified = None\n        self.current_file = None\n        self.init_ui()\n\n    def init_ui(self):\n        self.setWindowTitle('Text Editor')\n        self.setGeometry(100, 100, 800, 600)\n\n        self.create_text_edit()\n\n        self.create_file_menu()\n        self.create_settings_menu()\n\n        self.add_toolbar()\n        self.add_shortcuts()\n\n    def mark_modified(self):\n        self.is_modified = True\n\n    def create_text_edit(self):\n        # Create scroll area and text edit\n        self.text_edit = WheelAwareTextEdit()\n        self.text_edit.ctrl_wheel.connect(self.handle_ctrl_wheel)\n        self.text_edit.setLineWrapMode(QTextEdit.LineWrapMode.NoWrap)\n        self.text_edit.textChanged.connect(self.mark_modified)\n\n        self.font_size = 12  # or whatever default you want\n        font = QFont(\"Courier New\")\n        font.setStyleHint(QFont.StyleHint.Monospace)\n        font.setFixedPitch(True)\n        font.setPointSize(self.font_size)\n        self.text_edit.setFont(font)\n\n        scroll = QScrollArea()\n        scroll.setWidget(self.text_edit)\n        scroll.setWidgetResizable(True)\n\n        self.setCentralWidget(scroll)\n\n    def create_file_menu(self):\n        # Create menu bar\n        menubar = self.menuBar()\n        # File menu\n        file_menu = menubar.addMenu('File')\n        # New action\n        new_action = QAction('New', self)\n        new_action.triggered.connect(self.new_file)\n        # Open action\n        open_action = QAction('Open...', self)\n        open_action.triggered.connect(self.open_file)\n        # Save action\n        save_action = QAction('Save', self)\n        save_action.triggered.connect(self.save_file)\n        # Save As action\n        save_as_action = QAction('Save As...', self)\n        save_as_action.triggered.connect(self.save_file_as)\n        # Quit action\n        quit_action = QAction('Quit', self)\n        quit_action.triggered.connect(self.close)\n        # Add actions to menu\n        file_menu.addAction(new_action)\n        file_menu.addAction(open_action)\n        file_menu.addAction(save_action)\n        file_menu.addAction(save_as_action)\n        file_menu.addSeparator()\n        file_menu.addAction(quit_action)\n\n    def new_file(self):\n        if not self.maybe_save():\n            return\n        self.current_file = None\n        self.text_edit.clear()\n        self.is_modified = False\n\n    def open_file(self):\n        if not self.maybe_save():\n            return\n        file_path, _ = QFileDialog.getOpenFileName(\n            self, \"Open File\", \"\", \"Text Files (*.txt);;Markdown Files (*.md);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    self.text_edit.setText(file.read())\n                self.current_file = file_path\n                self.is_modified = False\n            except Exception as e:\n                self.show_error(str(e))\n\n    def save_file(self):\n        if self.current_file:\n            try:\n                with open(self.current_file, 'w', encoding='utf-8') as file:\n                    file.write(self.text_edit.toPlainText())\n                self.is_modified = False\n            except Exception as e:\n                self.show_error(str(e))\n        else:\n            self.save_file_as()\n\n    def save_file_as(self):\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, \"Save File\", \"\", \"Text Files (*.txt);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'w') as file:\n                    file.write(self.text_edit.toPlainText())\n                self.current_file = file_path\n                self.is_modified = False\n            except Exception as e:\n                self.show_error(str(e))\n\n    def maybe_save(self):\n        \"\"\"\n        Checks if there are unsaved changes and prompts the user to save them. If there are no changes\n        or the user confirms an action, the method returns True. Otherwise, depending on the user's\n        response, it may prompt to save, discard changes, or cancel.\n\n        QMessageBox::StandardButton.Yes: Saves the file and proceeds after the user confirms.\n        QMessageBox::StandardButton.No: Discards unsaved changes and proceeds after the user confirms.\n        QMessageBox::StandardButton.Cancel: Cancels the operation and takes no further action.\n\n        :return:\n            True if the user opts to save or discard the changes, or if there are no unsaved changes.\n            False if the user cancels the action.\n        :rtype: bool\n        \"\"\"\n        if self.is_modified:\n            reply = QMessageBox.question(\n                self, \"Unsaved Changes\",\n                \"You have unsaved changes. Do you want to save them?\",\n                QMessageBox.StandardButton.Yes |\n                QMessageBox.StandardButton.No |\n                QMessageBox.StandardButton.Cancel\n            )\n            if reply == QMessageBox.StandardButton.Yes:\n                self.save_file()\n                return True\n            elif reply == QMessageBox.StandardButton.No:\n                return True\n            else:\n                return False\n        return True\n\n    def show_error(self, message):\n        error_dialog = QFileDialog(self)\n        error_dialog.setWindowTitle(\"Error\")\n        error_dialog.setText(message)\n        error_dialog.exec()\n\n    def set_textedit_font(self):\n        font = QFont(\"Source Code Pro\")\n        font.setStyleHint(QFont.StyleHint.Monospace)\n        font.setFixedPitch(True)\n        font.setPointSize(self.font_size)\n        self.text_edit.setFont(font)\n\n    def increase_font_size(self):\n        self.font_size += 1\n        self.set_textedit_font()\n\n    def decrease_font_size(self):\n        if self.font_size &gt; 1:\n            self.font_size -= 1\n            self.set_textedit_font()\n\n    def create_settings_menu(self):\n        menubar = self.menuBar()\n        settings_menu = menubar.addMenu('Settings')\n\n        increase_font_action = QAction('Increase font size', self)\n        increase_font_action.triggered.connect(self.increase_font_size)\n        settings_menu.addAction(increase_font_action)\n\n        decrease_font_action = QAction('Decrease font size', self)\n        decrease_font_action.triggered.connect(self.decrease_font_size)\n        settings_menu.addAction(decrease_font_action)\n\n    def add_toolbar(self):\n        toolbar = QToolBar(\"Font Tools\")\n        self.addToolBar(toolbar)\n\n        toolbar.addWidget(QLabel(\"Font Size:\"))\n        toolbar.addAction(\"+\", self.increase_font_size)\n        toolbar.addAction(\"-\", self.decrease_font_size)\n\n    def add_shortcuts(self):\n        QShortcut(QKeySequence(\"Ctrl++\"), self).activated.connect(self.increase_font_size)\n        QShortcut(QKeySequence(\"Ctrl+-\"), self).activated.connect(self.decrease_font_size)\n\n    def handle_ctrl_wheel(self, delta):\n        if delta &gt; 0:  # Wheel scrolled up\n            self.increase_font_size()\n        else:  # Wheel scrolled down\n            self.decrease_font_size()\n\n    def closeEvent(self, event):\n        if self.maybe_save():\n            event.accept()\n        else:\n            event.ignore()\n\n\nclass WheelAwareTextEdit(QTextEdit):\n    ctrl_wheel = pyqtSignal(int)  # Emit wheel delta\n\n    def wheelEvent(self, event):\n        if event.modifiers() &amp; Qt.KeyboardModifier.ControlModifier:\n            self.ctrl_wheel.emit(event.angleDelta().y())\n            event.accept()\n        else:\n            super().wheelEvent(event)\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    editor = TextEditorApp()\n    editor.show()\n    sys.exit(app.exec())\n</code></pre>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/#key-changes-in-this-version","title":"Key Changes in This Version","text":"<p>This version of the text editor introduces an important concept in document-based applications: tracking and managing document modification state. Let\u2019s focus on these changes and how they affect the menu-driven workflow.</p>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/#1-document-modification-tracking","title":"1. Document Modification Tracking","text":"<p>The most significant addition is tracking whether the document has been modified:</p> <pre><code>def __init__(self):\n    super().__init__()\n    self.is_modified = None  # New state variable\n    self.current_file = None\n    self.init_ui()\n</code></pre> <p>The application now maintains an <code>is_modified</code> flag to track whether the document has unsaved changes.</p> <pre><code>def create_text_edit(self):\n    # ...\n    self.text_edit.textChanged.connect(self.mark_modified)\n    # ...\n</code></pre> <pre><code>def mark_modified(self):\n    self.is_modified = True\n</code></pre> <p>The application connects to the <code>textChanged</code> signal of the text editor, which is emitted whenever the text is modified. This automatically sets the <code>is_modified</code> flag to <code>True</code>.</p>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/#2-unsaved-changes-dialog","title":"2. Unsaved Changes Dialog","text":"<p>A major enhancement is the addition of a confirmation dialog when attempting to close a document with unsaved changes:</p> <pre><code>def maybe_save(self):\n    if self.is_modified:\n        reply = QMessageBox.question(\n            self, \"Unsaved Changes\",\n            \"You have unsaved changes. Do you want to save them?\",\n            QMessageBox.StandardButton.Yes |\n            QMessageBox.StandardButton.No |\n            QMessageBox.StandardButton.Cancel\n        )\n        if reply == QMessageBox.StandardButton.Yes:\n            self.save_file()\n            return True\n        elif reply == QMessageBox.StandardButton.No:\n            return True\n        else:\n            return False\n    return True\n</code></pre> <p>This method:</p> <ol> <li>Checks if the document has been modified</li> <li>If modified, displays a dialog asking the user if they want to save changes</li> <li>Handles the user\u2019s response (Yes, No, or Cancel)</li> <li>Returns <code>True</code> if the operation should continue, <code>False</code> if it should be canceled</li> </ol>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/#3-integration-with-file-operations","title":"3. Integration with File Operations","text":"<p>The <code>maybe_save()</code> method is now called before operations that would discard the current document:</p> <pre><code>def new_file(self):\n    if not self.maybe_save():\n        return\n    self.current_file = None\n    self.text_edit.clear()\n</code></pre> <pre><code>def open_file(self):\n    if not self.maybe_save():\n        return\n    # ... rest of open_file code ...\n</code></pre> <p>This ensures that users are prompted to save unsaved changes before these operations proceed.</p>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/#4-resetting-the-modified-flag","title":"4. Resetting the Modified Flag","text":"<p>When a file is saved or opened, the <code>is_modified</code> flag is reset to <code>False</code>:</p> <pre><code>def save_file(self):\n    if self.current_file:\n        try:\n            with open(self.current_file, 'w', encoding='utf-8') as file:\n                file.write(self.text_edit.toPlainText())\n            self.is_modified = False  # Reset modified flag after saving\n        except Exception as e:\n            self.show_error(str(e))\n    else:\n        self.save_file_as()\n</code></pre> <p>Similar code appears in <code>save_file_as()</code> and <code>open_file()</code>.</p>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/#5-handling-application-close-events","title":"5. Handling Application Close Events","text":"<p>The application now intercepts close events to check for unsaved changes:</p> <pre><code>def closeEvent(self, event):\n    if self.maybe_save():\n        event.accept()\n    else:\n        event.ignore()\n</code></pre> <p>This ensures that users are prompted to save unsaved changes even when closing the application window.</p>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/#impact-on-menu-driven-workflow","title":"Impact on Menu-Driven Workflow","text":"<p>These changes significantly enhance the menu-driven workflow by:</p> <ol> <li> <p>Preventing Data Loss: The application now prevents users from accidentally losing unsaved work.</p> </li> <li> <p>Providing Context-Aware Choices: Users are given appropriate options (Save, Don\u2019t Save, Cancel) when performing    actions that would discard changes.</p> </li> <li> <p>Maintaining Document State: The application tracks document state and provides appropriate feedback and options    based on that state.</p> </li> <li> <p>Consistent Behavior: The same document state management applies whether using menu commands, keyboard shortcuts,    or window close events.</p> </li> </ol>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/#standard-application-behavior","title":"Standard Application Behavior","text":"<p>This version implements behavior that users expect from professional document-editing applications:</p> <ol> <li> <p>Modified Document Indicator: The application tracks whether the document has been modified.</p> </li> <li> <p>Save Prompts: Users are prompted to save changes before actions that would discard them.</p> </li> <li> <p>Cancel Option: Users can cancel operations that would discard their work.</p> </li> <li> <p>Consistent State Management: The modified state is consistently updated across all operations.</p> </li> </ol>"},{"location":"2.%20PyQt/C.%20Menus/05-editor/#practical-takeaways-for-students","title":"Practical Takeaways for Students","text":"<ol> <li> <p>State Management: Tracking application state (like document modification) is crucial for providing a good user    experience.</p> </li> <li> <p>User Confirmation: Always confirm with users before potentially destructive actions.</p> </li> <li> <p>Signal Connections: Connect to appropriate signals (like <code>textChanged</code>) to keep state information updated.</p> </li> <li> <p>Event Handling: Override events like <code>closeEvent</code> to integrate state management with system-level interactions.</p> </li> <li> <p>Consistent Behavior: Ensure consistent behavior across all ways of triggering the same functionality.</p> </li> </ol> <p>This example demonstrates how to build a more robust, user-friendly application that protects users\u2019 work while maintaining a clean, menu-driven interface.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/C.%20Menus/06-editor/","title":"6. Text editor: Keyboard Shortcut Integration","text":"Version 6 <pre><code>import sys\n\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QTextEdit,\n                             QFileDialog, QScrollArea, QToolBar, QLabel, QMessageBox)\nfrom PyQt6.QtGui import QAction, QFont, QShortcut, QKeySequence\nfrom PyQt6.QtCore import Qt, pyqtSignal\n\n\nclass TextEditorApp(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.is_modified = None\n        self.current_file = None\n        self.init_ui()\n\n    def init_ui(self):\n        self.setWindowTitle('Text Editor')\n        self.setGeometry(100, 100, 800, 600)\n\n        self.create_text_edit()\n\n        self.create_file_menu()\n        self.create_settings_menu()\n\n        self.add_toolbar()\n\n    def mark_modified(self):\n        self.is_modified = True\n\n    def create_text_edit(self):\n        # Create scroll area and text edit\n        self.text_edit = WheelAwareTextEdit()\n        self.text_edit.ctrl_wheel.connect(self.handle_ctrl_wheel)\n        self.text_edit.setLineWrapMode(QTextEdit.LineWrapMode.NoWrap)\n        self.text_edit.textChanged.connect(self.mark_modified)\n\n        self.font_size = 12  # or whatever default you want\n        font = QFont(\"Courier New\")\n        font.setStyleHint(QFont.StyleHint.Monospace)\n        font.setFixedPitch(True)\n        font.setPointSize(self.font_size)\n        self.text_edit.setFont(font)\n\n        scroll = QScrollArea()\n        scroll.setWidget(self.text_edit)\n        scroll.setWidgetResizable(True)\n\n        self.setCentralWidget(scroll)\n\n    def create_file_menu(self):\n        # Create menu bar\n        menubar = self.menuBar()\n        # File menu\n        file_menu = menubar.addMenu('File')\n        # New action\n        new_action = QAction('New', self)\n        new_action.triggered.connect(self.new_file)\n        new_action.setShortcut('Ctrl+N')\n\n        # Open action\n        open_action = QAction('Open...', self)\n        open_action.triggered.connect(self.open_file)\n        open_action.setShortcut('Ctrl+O')\n\n        # Save action\n        save_action = QAction('Save', self)\n        save_action.triggered.connect(self.save_file)\n        save_action.setShortcut('Ctrl+S')\n\n        # Save As action\n        save_as_action = QAction('Save As...', self)\n        save_as_action.triggered.connect(self.save_file_as)\n        save_as_action.setShortcut('Ctrl+Shift+S')\n\n        # Quit action\n        quit_action = QAction('Quit', self)\n        quit_action.triggered.connect(self.close)\n        quit_action.setShortcut('Ctrl+Q')\n\n        # Add actions to menu\n        file_menu.addAction(new_action)\n        file_menu.addAction(open_action)\n        file_menu.addAction(save_action)\n        file_menu.addAction(save_as_action)\n        file_menu.addSeparator()\n        file_menu.addAction(quit_action)\n\n    def new_file(self):\n        if not self.maybe_save():\n            return\n        self.current_file = None\n        self.text_edit.clear()\n        self.is_modified = False\n\n    def open_file(self):\n        if not self.maybe_save():\n            return\n        file_path, _ = QFileDialog.getOpenFileName(\n            self, \"Open File\", \"\", \"Text Files (*.txt);;Markdown Files (*.md);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    self.text_edit.setText(file.read())\n                self.current_file = file_path\n                self.is_modified = False\n            except Exception as e:\n                self.show_error(str(e))\n\n    def save_file(self):\n        if self.current_file:\n            try:\n                with open(self.current_file, 'w', encoding='utf-8') as file:\n                    file.write(self.text_edit.toPlainText())\n                self.is_modified = False\n            except Exception as e:\n                self.show_error(str(e))\n        elif self.text_edit.toPlainText() != \"\":\n            self.save_file_as()\n\n    def save_file_as(self):\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, \"Save File\", \"\", \"Text Files (*.txt);;All Files (*)\"\n        )\n        if file_path:\n            try:\n                with open(file_path, 'w') as file:\n                    file.write(self.text_edit.toPlainText())\n                self.current_file = file_path\n                self.is_modified = False\n            except Exception as e:\n                self.show_error(str(e))\n\n    def maybe_save(self):\n        if self.is_modified:\n            reply = QMessageBox.question(\n                self, \"Unsaved Changes\",\n                \"You have unsaved changes. Do you want to save them?\",\n                QMessageBox.StandardButton.Yes |\n                QMessageBox.StandardButton.No |\n                QMessageBox.StandardButton.Cancel\n            )\n            if reply == QMessageBox.StandardButton.Yes:\n                self.save_file()\n                return True\n            elif reply == QMessageBox.StandardButton.No:\n                return True\n            else:\n                return False\n        return True\n\n    def show_error(self, message):\n        error_dialog = QFileDialog(self)\n        error_dialog.setWindowTitle(\"Error\")\n        error_dialog.setText(message)\n        error_dialog.exec()\n\n    def set_textedit_font(self):\n        font = QFont(\"Source Code Pro\")\n        font.setStyleHint(QFont.StyleHint.Monospace)\n        font.setFixedPitch(True)\n        font.setPointSize(self.font_size)\n        self.text_edit.setFont(font)\n\n    def increase_font_size(self):\n        self.font_size += 1\n        self.set_textedit_font()\n\n    def decrease_font_size(self):\n        if self.font_size &gt; 1:\n            self.font_size -= 1\n            self.set_textedit_font()\n\n    def create_settings_menu(self):\n        menubar = self.menuBar()\n        settings_menu = menubar.addMenu('Settings')\n\n        increase_font_action = QAction('Increase font size', self)\n        increase_font_action.triggered.connect(self.increase_font_size)\n        increase_font_action.setShortcut('Ctrl++')\n        settings_menu.addAction(increase_font_action)\n\n        decrease_font_action = QAction('Decrease font size', self)\n        decrease_font_action.triggered.connect(self.decrease_font_size)\n        decrease_font_action.setShortcut('Ctrl+-')\n        settings_menu.addAction(decrease_font_action)\n\n    def add_toolbar(self):\n        toolbar = QToolBar(\"Font Tools\")\n        self.addToolBar(toolbar)\n\n        toolbar.addWidget(QLabel(\"Font Size:\"))\n        toolbar.addAction(\"+\", self.increase_font_size)\n        toolbar.addAction(\"-\", self.decrease_font_size)\n\n    def handle_ctrl_wheel(self, delta):\n        if delta &gt; 0:  # Wheel scrolled up\n            self.increase_font_size()\n        else:  # Wheel scrolled down\n            self.decrease_font_size()\n\n    def closeEvent(self, event):\n        if self.maybe_save():\n            event.accept()\n        else:\n            event.ignore()\n\n\nclass WheelAwareTextEdit(QTextEdit):\n    ctrl_wheel = pyqtSignal(int)  # Emit wheel delta\n\n    def wheelEvent(self, event):\n        if event.modifiers() &amp; Qt.KeyboardModifier.ControlModifier:\n            self.ctrl_wheel.emit(event.angleDelta().y())\n            event.accept()\n        else:\n            super().wheelEvent(event)\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    editor = TextEditorApp()\n    editor.show()\n    sys.exit(app.exec())\n</code></pre>"},{"location":"2.%20PyQt/C.%20Menus/06-editor/#key-changes-in-this-final-version","title":"Key Changes in This Final Version","text":"<p>This version introduces important refinements to keyboard shortcut handling and menu item presentation. Let\u2019s examine the significant changes from the previous version:</p>"},{"location":"2.%20PyQt/C.%20Menus/06-editor/#1-integrated-shortcut-management","title":"1. Integrated Shortcut Management","text":"<p>The most noticeable change is how keyboard shortcuts are now defined directly on menu actions:</p> <pre><code>def create_file_menu(self):\n    # ...\n    new_action = QAction('New', self)\n    new_action.triggered.connect(self.new_file)\n    new_action.setShortcut('Ctrl+N')  # Shortcut added directly to action\n\n    open_action = QAction('Open...', self)\n    open_action.triggered.connect(self.open_file)\n    open_action.setShortcut('Ctrl+O')  # Shortcut here\n</code></pre> <p>This approach replaces the previous <code>add_shortcuts()</code> method. Shortcuts are now:</p> <ul> <li>Defined directly on their corresponding actions</li> <li>Automatically displayed in menu items</li> <li>More tightly integrated with the actions they trigger</li> </ul>"},{"location":"2.%20PyQt/C.%20Menus/06-editor/#2-standard-shortcut-conventions","title":"2. Standard Shortcut Conventions","text":"<p>The application now uses conventional keyboard shortcuts:</p> <pre><code># File menu shortcuts\nnew_action.setShortcut('Ctrl+N')\nopen_action.setShortcut('Ctrl+O')\nsave_action.setShortcut('Ctrl+S')\nsave_as_action.setShortcut('Ctrl+Shift+S')\nquit_action.setShortcut('Ctrl+Q')\n\n# Settings menu shortcuts\nincrease_font_action.setShortcut('Ctrl++')\ndecrease_font_action.setShortcut('Ctrl+-')\n</code></pre> <p>This follows standard application conventions, making the shortcuts more discoverable and intuitive for users.</p>"},{"location":"2.%20PyQt/C.%20Menus/06-editor/#3-improved-save-behavior","title":"3. Improved Save Behavior","text":"<p>The save logic has been refined to prevent unnecessary save prompts for empty documents:</p> <pre><code>def save_file(self):\n    if self.current_file:\n    # Existing save logic\n    elif self.text_edit.toPlainText() != \"\":  # New check for empty content\n        self.save_file_as()\n</code></pre> <p>This change prevents the application from prompting users to save empty files, improving the user experience.</p>"},{"location":"2.%20PyQt/C.%20Menus/06-editor/#4-simplified-code-structure","title":"4. Simplified Code Structure","text":"<p>The previous <code>add_shortcuts()</code> method has been removed, simplifying the code:</p> <pre><code>def init_ui(self):\n    # ...\n    self.add_toolbar()  # No more add_shortcuts() call\n</code></pre> <p>Shortcut management is now handled entirely within menu creation methods.</p>"},{"location":"2.%20PyQt/C.%20Menus/06-editor/#impact-on-menu-presentation","title":"Impact on Menu Presentation","text":"<p>The menu items now automatically display their associated shortcuts, such as  \u201cNew Ctrl+N\u201d, \u201cOpen\u2026 Ctrl+O\u201d, etc.</p> <p>This provides better user feedback and helps users learn the application\u2019s shortcuts.</p>"},{"location":"2.%20PyQt/C.%20Menus/06-editor/#key-concepts-demonstrated","title":"Key Concepts Demonstrated","text":"<ol> <li>Action-Shortcut Integration: Shortcuts are directly associated with their corresponding actions</li> <li>Standard Shortcuts: Using conventional combinations users expect</li> <li>Automatic Display: The menu system automatically shows shortcuts next to menu items</li> <li>Context-Sensitive Saving: Only prompt to save non-empty documents</li> </ol>"},{"location":"2.%20PyQt/C.%20Menus/06-editor/#practical-takeaways-for-students","title":"Practical Takeaways for Students","text":"<ol> <li>Use setShortcut() for better integration with menu items</li> <li>Follow Platform Conventions for keyboard shortcuts</li> <li>Consider Empty States when implementing save/load logic</li> <li>Keep Related Functionality Together by defining shortcuts with their actions</li> <li>Leverage Automatic Display of shortcuts in menus</li> </ol> <p>This final version demonstrates how to create a professional-quality menu system with integrated keyboard shortcuts that follows platform conventions and provides clear visual feedback to users.</p> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/D.%20Architecture/01-overview/","title":"1. Overview","text":""},{"location":"2.%20PyQt/D.%20Architecture/01-responsive/","title":"1. Responsive","text":""},{"location":"2.%20PyQt/E.%20Exercises/01-counter/","title":"1. Counter Application","text":""},{"location":"2.%20PyQt/E.%20Exercises/01-counter/#exercise-building-a-pyqt-counter-application","title":"Exercise: Building a PyQt Counter Application","text":""},{"location":"2.%20PyQt/E.%20Exercises/01-counter/#part-1-create-the-basic-layout","title":"Part 1: Create the Basic Layout","text":"<ul> <li>Create a new PyQt application with a main window.</li> <li>Add a label to display a number (start with 0).</li> <li>Add a button labeled \u201c+\u201d (plus) below the label.</li> <li>Arrange the label and button vertically using a layout manager.</li> <li>At this stage, do not add any interactivity; just build the static interface.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/01-counter/#part-2-add-basic-interactivity","title":"Part 2: Add Basic Interactivity","text":"<ul> <li>Make the \u201c+\u201d button functional: when clicked, it should increase the displayed number by 1.</li> <li>Ensure the label updates immediately to show the new value.</li> <li>Use appropriate signal and slot mechanisms to connect the button to the logic that updates the counter.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/01-counter/#part-3-add-more-controls","title":"Part 3: Add More Controls","text":"<ul> <li>Add a \u201c-\u201d (minus) button to allow decrementing the counter.</li> <li>Add a spin box (numeric input) that lets the user choose the amount by which the counter increases or decreases.</li> <li>Update the logic so that both the \u201c+\u201d and \u201c-\u201d buttons use the value from the spin box as the step size for   incrementing or decrementing.</li> <li>Place the new controls neatly in the layout.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/01-counter/#part-4-create-a-settings-window","title":"Part 4: Create a Settings Window","text":"<ul> <li>Add a separate settings window that the user can open from the main window (for example, with a \u201cSettings\u201d button).</li> <li>In the settings window, include a control (such as a spin box) that allows the user to set the global step size for   the counter.</li> <li>When the step size is changed in the settings window, it should automatically update the step size in the main   window\u2019s spin box.</li> <li>Use custom signals if necessary to communicate changes from the settings window back to the main window.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/01-counter/#part-5-add-a-reset-feature-via-the-settings-window","title":"Part 5: Add a Reset Feature via the Settings Window","text":"<ul> <li>In the settings window, add a \u201cReset\u201d button.</li> <li>When the user clicks \u201cReset,\u201d the counter in the main window should reset to zero.</li> <li>Ensure the communication between the settings window and the main window is handled using signals and slots.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/01-counter/#part-6-reusable-widgets-mass-signal-connections","title":"Part 6: Reusable Widgets &amp; Mass Signal Connections","text":"<p>Task: Create 3 independent counters that all respond to global settings Objectives: 1. Create reusable <code>CounterWidget</code> class with self-contained functionality 2. Demonstrate multiple widgets connecting to same signals 3. Centralized control through shared settings  </p> <p>Bonus Challenge:</p> <ul> <li>Add any additional features you can think of, such as changing the color scheme from the settings window, or   displaying a message when the counter reaches a certain value.</li> </ul> <p>Instructions: </p> <ul> <li>For each part, start from your previous solution and add the new features described. Test your application after each step to ensure everything works as expected. Focus on organizing your code and using PyQt\u2019s signals and slots effectively.</li> <li>Keep your different versions in different files, for example in the files named <code>counter1.py</code>, <code>counter2.py</code>, <code>counter3.py</code>, \u2026</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"2.%20PyQt/E.%20Exercises/02-counter-solutions/","title":"2. Counter Application: Solutions","text":"<p>Here\u2019s a complete solution series with explanations for each part of the counter exercise:</p> <p>Here are the solutions for each exercise, rewritten for PyQt6. Key PyQt6 differences include:</p> <ul> <li>Enums (like alignment or check state) must use their fully qualified names (e.g., <code>Qt.AlignmentFlag.AlignCenter</code> </li> <li>instead of <code>Qt.AlignCenter</code>)[1][2][5].</li> <li>The <code>exec_()</code> method is now just <code>exec()</code>[3].</li> <li>Some imports may change slightly.</li> </ul> <p>Each version below is named <code>counter1.py</code>, <code>counter2.py</code>, etc., with explanations of the code and changes.</p>"},{"location":"2.%20PyQt/E.%20Exercises/02-counter-solutions/#counter1py-basic-layout","title":"counter1.py \u2013 Basic Layout","text":"<pre><code>import sys\nfrom PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QPushButton\n\nclass CounterApp(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Counter v1\")\n\n        self.layout = QVBoxLayout()\n        self.display = QLabel(\"0\")\n        self.inc_btn = QPushButton(\"+\")\n\n        self.layout.addWidget(self.display)\n        self.layout.addWidget(self.inc_btn)\n        self.setLayout(self.layout)\n        self.resize(200, 150)\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = CounterApp()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p>Explanation: </p> <ul> <li>Basic window with a label and a \u201c+\u201d button, arranged vertically.</li> <li>No functionality yet.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/02-counter-solutions/#counter2py-basic-increment","title":"counter2.py \u2013 Basic Increment","text":"<pre><code>import sys\nfrom PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QPushButton\n\nclass CounterApp(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Counter v2\")\n        self.counter = 0\n\n        self.layout = QVBoxLayout()\n        self.display = QLabel(\"0\")\n        self.inc_btn = QPushButton(\"+\")\n\n        self.layout.addWidget(self.display)\n        self.layout.addWidget(self.inc_btn)\n        self.setLayout(self.layout)\n        self.resize(200, 150)\n\n        self.inc_btn.clicked.connect(self.increment)\n\n    def increment(self):\n        self.counter += 1\n        self.display.setText(str(self.counter))\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = CounterApp()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p>Changes: </p> <ul> <li>Added a counter variable.</li> <li>Connected the \u201c+\u201d button to increment the counter and update the label.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/02-counter-solutions/#counter3py-add-decrement-and-step-control","title":"counter3.py \u2013 Add Decrement and Step Control","text":"<pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QLabel, QPushButton,\n    QSpinBox, QHBoxLayout\n)\n\nclass CounterApp(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Counter v3\")\n        self.counter = 0\n\n        self.layout = QVBoxLayout()\n        self.display = QLabel(\"0\")\n\n        # Buttons\n        self.inc_btn = QPushButton(\"+\")\n        self.dec_btn = QPushButton(\"-\")\n\n        # Step size input\n        self.step_input = QSpinBox()\n        self.step_input.setValue(1)\n\n        # Button layout\n        btn_layout = QHBoxLayout()\n        btn_layout.addWidget(self.dec_btn)\n        btn_layout.addWidget(self.inc_btn)\n\n        self.layout.addWidget(self.display)\n        self.layout.addLayout(btn_layout)\n        self.layout.addWidget(QLabel(\"Step size:\"))\n        self.layout.addWidget(self.step_input)\n        self.setLayout(self.layout)\n        self.resize(200, 180)\n\n        self.inc_btn.clicked.connect(self.increment)\n        self.dec_btn.clicked.connect(self.decrement)\n\n    def increment(self):\n        self.counter += self.step_input.value()\n        self.display.setText(str(self.counter))\n\n    def decrement(self):\n        self.counter -= self.step_input.value()\n        self.display.setText(str(self.counter))\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = CounterApp()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p>Changes: </p> <ul> <li>Added a \u201c-\u201d button for decrementing.</li> <li>Added a <code>QSpinBox</code> for step size.</li> <li>Both increment and decrement use the step value.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/02-counter-solutions/#counter4py-settings-window-with-custom-signal","title":"counter4.py \u2013 Settings Window with Custom Signal","text":"<pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QLabel, QPushButton,\n    QSpinBox, QHBoxLayout\n)\nfrom PyQt6.QtCore import pyqtSignal\n\nclass SettingsWindow(QWidget):\n    step_changed = pyqtSignal(int)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Settings\")\n        layout = QVBoxLayout()\n        self.step_control = QSpinBox()\n        self.step_control.setValue(1)\n        layout.addWidget(QLabel(\"Global Step Size:\"))\n        layout.addWidget(self.step_control)\n        self.setLayout(layout)\n        self.resize(150, 100)\n\n        self.step_control.valueChanged.connect(\n            lambda value: self.step_changed.emit(value)\n        )\n\nclass CounterApp(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Counter v4\")\n        self.counter = 0\n\n        self.layout = QVBoxLayout()\n        self.display = QLabel(\"0\")\n        self.inc_btn = QPushButton(\"+\")\n        self.dec_btn = QPushButton(\"-\")\n        self.step_input = QSpinBox()\n        self.step_input.setValue(1)\n\n        btn_layout = QHBoxLayout()\n        btn_layout.addWidget(self.dec_btn)\n        btn_layout.addWidget(self.inc_btn)\n\n        self.layout.addWidget(self.display)\n        self.layout.addLayout(btn_layout)\n        self.layout.addWidget(QLabel(\"Step size:\"))\n        self.layout.addWidget(self.step_input)\n\n        self.settings_btn = QPushButton(\"\u2699 Settings\")\n        self.layout.addWidget(self.settings_btn)\n        self.setLayout(self.layout)\n        self.resize(220, 200)\n\n        self.inc_btn.clicked.connect(self.increment)\n        self.dec_btn.clicked.connect(self.decrement)\n\n        # Settings window\n        self.settings_window = SettingsWindow()\n        self.settings_btn.clicked.connect(self.settings_window.show)\n        self.settings_window.step_changed.connect(self.step_input.setValue)\n\n    def increment(self):\n        self.counter += self.step_input.value()\n        self.display.setText(str(self.counter))\n\n    def decrement(self):\n        self.counter -= self.step_input.value()\n        self.display.setText(str(self.counter))\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = CounterApp()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p>Changes: </p> <ul> <li>Added a separate settings window with its own spin box.</li> <li>Used a custom signal (<code>step_changed</code>) to update the main window\u2019s step size.</li> <li>Settings window is shown with a button.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/02-counter-solutions/#counter5py-reset-feature-via-settings-window","title":"counter5.py \u2013 Reset Feature via Settings Window","text":"<pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QLabel, QPushButton,\n    QSpinBox, QHBoxLayout\n)\nfrom PyQt6.QtCore import pyqtSignal\n\nclass SettingsWindow(QWidget):\n    step_changed = pyqtSignal(int)\n    reset_requested = pyqtSignal()\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Settings\")\n        layout = QVBoxLayout()\n        self.step_control = QSpinBox()\n        self.step_control.setValue(1)\n        layout.addWidget(QLabel(\"Global Step Size:\"))\n        layout.addWidget(self.step_control)\n\n        self.reset_btn = QPushButton(\"Reset Counter\")\n        layout.addWidget(self.reset_btn)\n        self.setLayout(layout)\n        self.resize(150, 120)\n\n        self.step_control.valueChanged.connect(\n            lambda value: self.step_changed.emit(value)\n        )\n        self.reset_btn.clicked.connect(self.reset_requested.emit)\n\nclass CounterApp(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Counter v5\")\n        self.counter = 0\n\n        self.layout = QVBoxLayout()\n        self.display = QLabel(\"0\")\n        self.inc_btn = QPushButton(\"+\")\n        self.dec_btn = QPushButton(\"-\")\n        self.step_input = QSpinBox()\n        self.step_input.setValue(1)\n\n        btn_layout = QHBoxLayout()\n        btn_layout.addWidget(self.dec_btn)\n        btn_layout.addWidget(self.inc_btn)\n\n        self.layout.addWidget(self.display)\n        self.layout.addLayout(btn_layout)\n        self.layout.addWidget(QLabel(\"Step size:\"))\n        self.layout.addWidget(self.step_input)\n\n        self.settings_btn = QPushButton(\"\u2699 Settings\")\n        self.layout.addWidget(self.settings_btn)\n        self.setLayout(self.layout)\n        self.resize(220, 210)\n\n        self.inc_btn.clicked.connect(self.increment)\n        self.dec_btn.clicked.connect(self.decrement)\n\n        # Settings window\n        self.settings_window = SettingsWindow()\n        self.settings_btn.clicked.connect(self.settings_window.show)\n        self.settings_window.step_changed.connect(self.step_input.setValue)\n        self.settings_window.reset_requested.connect(self.reset_counter)\n\n    def increment(self):\n        self.counter += self.step_input.value()\n        self.display.setText(str(self.counter))\n\n    def decrement(self):\n        self.counter -= self.step_input.value()\n        self.display.setText(str(self.counter))\n\n    def reset_counter(self):\n        self.counter = 0\n        self.display.setText(\"0\")\n        self.step_input.setValue(1)\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = CounterApp()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p>Changes: </p> <ul> <li>Added a \u201cReset Counter\u201d button to the settings window.</li> <li>Introduced a new custom signal (<code>reset_requested</code>) for reset.</li> <li>Main window resets counter and step size when reset is requested.</li> </ul>"},{"location":"2.%20PyQt/E.%20Exercises/02-counter-solutions/#counter6py-multi-counter-system","title":"counter6.py - Multi-Counter System","text":"<pre><code>import sys\nfrom PyQt6.QtWidgets import (\n    QApplication, QWidget, QVBoxLayout, QLabel, QPushButton,\n    QSpinBox, QHBoxLayout\n)\nfrom PyQt6.QtCore import pyqtSignal\n\n\nclass SettingsWindow(QWidget):\n    step_changed = pyqtSignal(int)\n    reset_requested = pyqtSignal()\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Settings\")\n        layout = QVBoxLayout()\n        self.step_control = QSpinBox()\n        self.step_control.setValue(1)\n        layout.addWidget(QLabel(\"Global Step Size:\"))\n        layout.addWidget(self.step_control)\n\n        self.reset_btn = QPushButton(\"Reset Counter\")\n        layout.addWidget(self.reset_btn)\n        self.setLayout(layout)\n        self.resize(150, 120)\n\n        self.step_control.valueChanged.connect(\n            lambda value: self.step_changed.emit(value)\n        )\n        self.reset_btn.clicked.connect(self.reset_requested.emit)\n\n\nclass CounterApp(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Counter v5\")\n        self.counter = 0\n\n        self.layout = QVBoxLayout()\n        self.display = QLabel(\"0\")\n        self.inc_btn = QPushButton(\"+\")\n        self.dec_btn = QPushButton(\"-\")\n        self.step_input = QSpinBox()\n        self.step_input.setValue(1)\n\n        btn_layout = QHBoxLayout()\n        btn_layout.addWidget(self.dec_btn)\n        btn_layout.addWidget(self.inc_btn)\n\n        self.layout.addWidget(self.display)\n        self.layout.addLayout(btn_layout)\n        self.layout.addWidget(QLabel(\"Step size:\"))\n        self.layout.addWidget(self.step_input)\n\n        self.settings_btn = QPushButton(\"\u2699 Settings\")\n        self.layout.addWidget(self.settings_btn)\n        self.setLayout(self.layout)\n        self.resize(220, 210)\n\n        self.inc_btn.clicked.connect(self.increment)\n        self.dec_btn.clicked.connect(self.decrement)\n\n        # Settings window\n        self.settings_window = SettingsWindow()\n        self.settings_btn.clicked.connect(self.settings_window.show)\n        self.settings_window.step_changed.connect(self.step_input.setValue)\n        self.settings_window.reset_requested.connect(self.reset_counter)\n\n    def increment(self):\n        self.counter += self.step_input.value()\n        self.display.setText(str(self.counter))\n\n    def decrement(self):\n        self.counter -= self.step_input.value()\n        self.display.setText(str(self.counter))\n\n    def reset_counter(self):\n        self.counter = 0\n        self.display.setText(\"0\")\n        self.step_input.setValue(1)  # probably not necessary\n\n    def closeEvent(self, event):\n        self.settings_window.close()\n        event.accept()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = CounterApp()\n    window.show()\n    sys.exit(app.exec())\n</code></pre> <p>Key Changes/Additions: </p> <ol> <li> <p>Reusable <code>CounterWidget</code>: </p> <ul> <li>Encapsulates all counter functionality in a self-contained widget</li> <li>Can be instantiated multiple times</li> <li>Has built-in reset capability</li> </ul> </li> <li> <p>Bulk Signal Connections: </p> <ul> <li>Settings window\u2019s <code>step_changed</code> updates all counters\u2019 step inputs</li> <li><code>reset_requested</code> triggers resets on all counters</li> <li>Uses list comprehensions to apply changes to all instances</li> </ul> </li> <li> <p>Visual Separation:</p> <ul> <li>Uses <code>QFrame</code> with styled panel for visual distinction</li> <li>Vertical layout stacks multiple counters</li> </ul> </li> <li> <p>Close Event:</p> <ul> <li>Redefined the <code>closeEvent()</code> method in the <code>CounterApp</code> class to close the settings window at the same time as    close the main window</li> </ul> <pre><code>def closeEvent(self, event):\n    self.settings_window.close()\n    event.accept()\n</code></pre> </li> </ol> References <ul> <li>[1] https://stackoverflow.com/questions/72086632/migrating-to-qt6-pyqt6-what-are-all-the-deprecated-short-form-names-in-qt5</li> <li>[2] https://www.pythonguis.com/pyqt6-tutorial/</li> <li>[3] https://zetcode.com/pyqt6/firstprograms/</li> <li>[4] https://github.com/bit-team/backintime/issues/1301</li> <li>[5] https://www.pythonguis.com/faq/about-pyqt6-and-pyside6/</li> <li>[6] https://www.youtube.com/watch?v=nrUFM0NXNG4</li> <li>[7] https://stackoverflow.com/questions/67167123/differences-in-pyside6-and-pyqt5</li> <li>[8] https://github.com/janbodnar/PyQt6-Tutorial-Examples/blob/main/events/signals_slots.py</li> <li>[9] https://realpython.com/python-pyqt-gui-calculator/</li> <li>[10] https://stackoverflow.com/questions/76281633/migrate-a-qkeysequence-from-pyqt5-to-pyqt6</li> <li>[11] https://github.com/qutebrowser/qutebrowser/issues/7370</li> <li>[12] https://zetcode.com/pyqt6/eventssignals/</li> <li>[13] https://www.pythonguis.com/tutorials/pyqt6-creating-your-first-window/</li> <li>[14] https://github.com/ZELLMECHANIK-DRESDEN/ShapeOut2/issues/165</li> <li>[15] https://www.youtube.com/watch?v=upvU3d6NAvs</li> <li>[16] https://github.com/pyqt/examples</li> <li>[17] https://www.reddit.com/r/learnpython/comments/l3m4gq/how_similar_are_pyqt6_and_pyqt5/</li> <li>[18] https://discuss.python.org/t/from-pyqt5-to-pyqt6/28043</li> <li>[19] https://learn.foundry.com/katana/dev-guide/Qt6Migration.html</li> <li>[20] https://doc.qt.io/qtforpython-6/tutorials/basictutorial/signals_and_slots.html</li> </ul> Use of AI <p>Page written in part with the help of an AI assistant, mainly using Perplexity AI. The AI was used to generate explanations, examples and/or structure suggestions. All information has been verified, edited and completed by the author.</p>"},{"location":"3.%20Managing%20Data/A.%20Files/01-overview/","title":"1. Overview","text":""},{"location":"3.%20Managing%20Data/B.%20Localization/01-overview/","title":"1. Overview","text":""},{"location":"3.%20Managing%20Data/C.%20External%20Data%20Sources/01-overview/","title":"1. Overview","text":""},{"location":"3.%20Managing%20Data/D.%20Graphics/01-overview/","title":"1. Overview","text":""}]}